<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
<channel>
  <title>Pikapikapi Blog</title>
  <atom:link href="https://pikapikapikaori.github.io/pikapikapi-blog/#//pikapikapi-blog-rss.xml" rel="self" type="application/rss+xml" />
  <link>https://pikapikapikaori.github.io/pikapikapi-blog/#/</link>
  <description>Pikapikapi Blog</description>
   
  <item>
    <title><![CDATA[[ホームページ](/jp/)]]></title>
    <link>https://pikapikapikaori.github.io/pikapikapi-blog/#//#/jp/_navbar</link>
    <guid isPermaLink="false">https://pikapikapikaori.github.io/pikapikapi-blog/#//#/jp/_navbar</guid>
    <description><![CDATA[<ul>
<li><a href="/jp/">ホームページ</a></li>
<li><a href="/jp/ITtech/">IT技術につして</a></li>
<li><a href="/jp/writings/">随想</a></li>
<li>言語
<ul>
<li><a href="/">:cn: 简体中文</a></li>
<li><a href="/jp/">:jp: 日本語</a></li>
<li><a href="/en-us/">:us: English (US)</a></li>
</ul></li>
</ul>]]></description>
    <pubDate>Tue, 2 May 2023 23:19:08 +0800</pubDate>
  </item>
   
  <item>
    <title><![CDATA[iv class="pagesSideBarLevel1TitleDiv">]]></title>
    <link>https://pikapikapikaori.github.io/pikapikapi-blog/#//#/en-us/writings/_sidebar</link>
    <guid isPermaLink="false">https://pikapikapikaori.github.io/pikapikapi-blog/#//#/en-us/writings/_sidebar</guid>
    <description><![CDATA[<div class="pagesSideBarLevel1TitleDiv">
<p>Preface</p>
</div>
<ul>
<li><ul>
<li><a href="/en-us/writings/">Beginning</a></li>
</ul></li>
</ul>
<div class="pagesSideBarLevel1TitleDiv">
<p>Writings</p>
</div>
<ul>
<li><ul>
<li><a href="/en-us/writings/PrivateEcard-20220517">Birthday E-card for GF</a></li>
</ul></li>
</ul>]]></description>
    <pubDate>Tue, 2 May 2023 23:19:08 +0800</pubDate>
  </item>
   
  <item>
    <title><![CDATA[Birthday E-card for GF]]></title>
    <link>https://pikapikapikaori.github.io/pikapikapi-blog/#//#/en-us/writings/PrivateEcard-20220517</link>
    <guid isPermaLink="false">https://pikapikapikaori.github.io/pikapikapi-blog/#//#/en-us/writings/PrivateEcard-20220517</guid>
    <description><![CDATA[<h1 id="birthday-e-card-for-gf">Birthday E-card for GF</h1>
<blockquote>
<p>This page is first published on my <a href="https://github.com/pikapikapikaori">Github</a>, the repository of which has now been migrated to that of <a href="https://github.com/pikapikapikaori/pikapikapi-blog">this blog</a><br />
Publish date: 2022.5.17</p>
</blockquote>
<p><a href="./_media/PrivateEcard-20220517/index.html" title=":include height=1000px">website</a></p>]]></description>
    <pubDate>Tue, 2 May 2023 23:19:08 +0800</pubDate>
  </item>
   
  <item>
    <title><![CDATA[[Home Page](/en-us/)]]></title>
    <link>https://pikapikapikaori.github.io/pikapikapi-blog/#//#/en-us/_navbar</link>
    <guid isPermaLink="false">https://pikapikapikaori.github.io/pikapikapi-blog/#//#/en-us/_navbar</guid>
    <description><![CDATA[<ul>
<li><a href="/en-us/">Home Page</a></li>
<li><a href="/en-us/ITtech/">IT Related</a></li>
<li><a href="/en-us/writings/">Writings</a></li>
<li>Language
<ul>
<li><a href="/">:cn: 简体中文</a></li>
<li><a href="/jp/">:jp: 日本語</a></li>
<li><a href="/en-us/">:us: English (US)</a></li>
</ul></li>
</ul>]]></description>
    <pubDate>Tue, 2 May 2023 23:19:08 +0800</pubDate>
  </item>
   
  <item>
    <title><![CDATA[[首页](/)]]></title>
    <link>https://pikapikapikaori.github.io/pikapikapi-blog/#//#/_navbar</link>
    <guid isPermaLink="false">https://pikapikapikaori.github.io/pikapikapi-blog/#//#/_navbar</guid>
    <description><![CDATA[<ul>
<li><a href="/">首页</a></li>
<li><a href="/ITtech/">技术相关</a></li>
<li><a href="/writings/">一些随笔</a></li>
<li>语言
<ul>
<li><a href="/">:cn: 简体中文</a></li>
<li><a href="/jp/">:jp: 日本語</a></li>
<li><a href="/en-us/">:us: English (US)</a></li>
</ul></li>
</ul>]]></description>
    <pubDate>Tue, 2 May 2023 23:19:08 +0800</pubDate>
  </item>
   
  <item>
    <title><![CDATA[软件项目实践的一些思索与后期优化方向：设计、开发以及其他]]></title>
    <link>https://pikapikapikaori.github.io/pikapikapi-blog/#//#/ITtech/SoftwareDevelopementInsights-20230428</link>
    <guid isPermaLink="false">https://pikapikapikaori.github.io/pikapikapi-blog/#//#/ITtech/SoftwareDevelopementInsights-20230428</guid>
    <description><![CDATA[<h1 id="软件项目实践的一些思索与后期优化方向设计开发以及其他">软件项目实践的一些思索与后期优化方向：设计、开发以及其他</h1>
<blockquote>
<p>本文首发于个人博客<br />
发表日期：2023.4.28</p>
</blockquote>
<p>大四下最后的一门课也结束了。这门课大体是由数个人组成一个小小团体进行一个小小项目从零到一的完整开发过程，不同于其他课程，这个项目要求以类似于实际开发的模式，让所有参与者都经历由需求确定、初期架构设计到中期开发、版本发布甚至于是需求变更以及迭代的完整软件开发的整个生命周期。当然其中也包括不同团队间的沟通协商。</p>
<p>大体而言我在其中以项目经理、架构设计、团队Leader等各种身份参与了后端的完整开发，并也作为开发者参与到了前端部分的开发任务中。个人从中确实有不少感悟，故而写此文记录。在这里主要想谈谈设计、开发的一些感想，诸如进度管理、质量把控等等可能也略有涉及。</p>
<h2 id="项目背景">项目背景</h2>
<p>大体而言这个课程项目要求做一个宠物医院的线上学习平台，主要受众大概就是即将毕业或是正在大学学习的兽医相关专业的学生。其功能简要来讲大概有这么几类：</p>
<ul>
<li>用户管理与鉴权：常规的大系统都有的功能，这里大体上就分为管理员、出题的老师和进行学习的学生三类用户。</li>
<li>一个完整医院的3D全景地图与导览模型：前端开发为主的功能，本文不涉及。</li>
<li>系统管理：要求对这个宠物医院内诸如药物、档案、收费项目、各类检查项目、住院者的信息等等各类内容进行管理，不过这个东西似乎没有在需求文档中体现出实际的意义与用处。</li>
<li>病例管理：大体上是需要把来医院就诊过的各类病例收集起来存储，其包括从入院诊断、具体检查到诊断结果与治疗方案等全过程的文字图片视频信息，当然也包括得的病的信息。</li>
<li>测试管理：由病例管理上游的疾病部分内容衍生而来。老师根据疾病生成题库，并从中选题整理为试卷。学生则参加考试进行答题。不过这部分内容似乎与虚拟宠物医院没有太大关系。</li>
<li>职能学习：一方面是让学生去学习疾病的相关知识（当然要看文字图片视频），一方面学生也可以通过看文字图片视频学习医院内各类角色（医生、医助等等）的具体操作内容。</li>
<li>数据管理：和上面提到的图片视频的存储有关。需求上还挺麻烦的，视频格式支持太多还需要进行视频的格式转换，反应到和用户的交互上来说还需要实现分块上传等功能等。</li>
</ul>
<p>尽管后文对具体业务尽量不会涉及，但姑且将背景记于这里。不难看出这个项目还是一个比较传统的要用到数据库后端前端三个维度的项目，因而后文也主要想从这三个维度的设计与开发两方面来聊聊。</p>
<p>项目可以参考：</p>
<ul>
<li><a href="https://github.com/SoftwareDevelopmentPractice6/virtualPetHospital-backend">后端</a></li>
<li><a href="https://github.com/SoftwareDevelopmentPractice6/virtualPetHospital-frontend">前端</a></li>
</ul>
<p>本博客的仓库中也保存了相关的源码，可以参考<a href="https://github.com/pikapikapikaori/pikapikapi-blog/tree/master/resource/ITtech/SoftwareDevelopementInsights-20230428">这里</a>。</p>
<h2 id="设计">设计</h2>
<p>由于课程要求重各类文档，因而并没有采取如今主流的敏捷开发模式，而是采取的<a href="#RAD">RAD</a>模型。个人来讲其实并不是很习惯这个模型，一方面其由瀑布式改进而来，从某种角度上还是非常重文档和前期的设计的，对需求的变更与过程中的变化并不敏感，另一方面也是因此在开发过程中的抗风险能力也非常依赖于前期的设计以及开发过程中的质量，由此带来的风险是非常恐怖的。</p>
<p>总之也是因此在进行前期设计时就花了相当多的时间。然而尽管如此，初期的设计还是有着比较大的漏洞，因而也给后期开发带来了一些麻烦。这些问题大多集中在数据库设计上。</p>
<h3 id="数据库设计">数据库设计</h3>
<p>由于项目较为庞大因而一些细节的设计我也没有来得及能够去亲自把控，而是交给了同组的其他人。在这里就出了问题。上文所述的测试管理中，题库中的问题需要记录与其相关的问题类别（属于哪种病）、问题类型（单选多选）、问题内容等等。针对此负责这块内容的组员A给出了这样的设计：</p>
<pre class="mermaid"><code>erDiagram
Exam {
int exam_id PK
string exam_name
}

Paper {
int paper_id PK
string paper_name
int exam_id FK
string duration
string total_score
}

Question {
int question_id PK
string question_content
string question_type
int category_id FK
}

Category {
int category_id PK
string category_name
}

ExamSession {
int session_id PK
int paper_id FK
time start_time
time end_time
}

StudentResult {
int result_id PK
int session_id FK
int student_id
int score
}
Exam ||--|| Paper : relate
Paper ||--|| ExamSession : relate
Question }o--|| Category : contains
ExamSession ||--o{ StudentResult : relate</code></pre>
<p>且不谈同学A遗漏了需要对每张卷子上包含的题目、以及每位学生在试卷上答题所做出的回答进行存储的功能，单看<code>Question</code>与<code>Category</code>两张表。乍一看虽然是挺合理的设计，然而后者的实际有效字段只有<code>category_name</code>一栏。我不否认在大型项目中这样设计的合理性，但是考虑到这个项目的规模、以及后续可能会进行的功能上的拓展，我个人看来<code>Category</code>这张表完全冗余的。</p>
<p>另一方面，<code>Exam</code>、<code>Paper</code>、<code>ExamSession</code>这三张一对一的表虽然也是很符合设计原则的设计，但是同样考虑到项目规模与未来可能的拓展，这三张表就算合在一起也不会对性能与吞吐量带来很大的负担。一般来讲，只有在表中有一栏以上可能包含大量空值的情况下，或是某一些栏可能被频繁更新时，一对一关系的设计才相对合理。而在当前的情形中，这样的设计则是给后期撰写<code>SQL</code>与开发上带来了巨大的麻烦。且不谈数据的整合与处理，仅仅是外键的存在就已经带来了巨大的麻烦。这也直接导致了在后期初始化数据<code>SQL</code>撰写上耗费了大量Debug的时间，在开发的编码中也需要增加大量检测外键存在性的不必要代码。</p>
<h3 id="后端架构设计">后端架构设计</h3>
<p>初期设计时我就已经敲定了<a href="#微服务">微服务</a>的架构。通常，微服务确实不适合于本项目这样的小型项目：配置麻烦、DevOps麻烦，等等。此外，大型项目中服务间数据一致性以及安全性都是非常棘手且关键的问题。</p>
<p>不过事实上，我其实很看重松散耦合这一点。其给后期开发与迭代过程中带来的自由度是相当大的。前述的问题，如配置、DevOps的确相对棘手，不过包含公用模块、各类插件的配置在初期完成后便一了百了，运维上利用Docker与统一的脚本进行自动化管理也是一经配置后就极易使用的，并没有给开发人员带来很高的成本。倘若有购买服务器配置Jenkins进行更多的自动化的话，相关成本应该还能进一步降低。</p>
<p>实践中，jacoco、spotless、公共模块的配置实质上也仅仅耗费了我半天的时间，而后期部署时自动化测试脚本的编写仅仅耗费了我两个小时不到的时间。接口测试上所花费的时间略多一点，不过由于接口测试脚本基本是直接由swagger生成的，因而也没有耗费太多的成本。</p>
<p>相较于这些仅局限于初期和末期的麻烦而言，微服务架构带来的好处是实打实巨大的。数据库与模块的分离带来的是各模块开发的高独立性以及运行时的高可用性。前文所提到的数据库尽管经常会碰到组员产生的Bug，但分离的数据库使得其余的几个模块并没有受到影响从而能够很顺利的进行开发。另一方面，后端模块的分离使得几个模块都能够被快速地开发出来，也因此能够较早地将接口给到前端，从而留出了大量可用于迭代的时间。产生缺陷时查找定位的范围仅仅在自身的子系统内，因而定位缺陷的成本也略有降低。而最最重要的，由于模块间的松散耦合，即使一个服务失败其他服务也能够继续工作，这给开发与测试都带来了相当程度上的便捷。</p>
<p>更具体的，微服务给实践中的开发带来了巨大的便捷性。我在项目中大概采取了下图的架构：</p>
<pre class="mermaid"><code>flowchart LR
    subgraph backend
        subgraph modules
            direction TB
            subgraph module 1
                direction LR
                entity1 --&gt; dao1 --&gt; service1 --&gt; controller1
            end
            subgraph module 2
                direction LR
                entity2 --&gt; dao2 --&gt; service2 --&gt; controller2
            end
            subgraph module 3
                direction LR
                entity3 --&gt; dao3 --&gt; service3 --&gt; controller3
            end
            subgraph module 4
                direction LR
                entity4 --&gt; dao4 --&gt; service4 --&gt; controller4
            end
        end
        subgraph intermediator
            direction LR
            servicei --&gt; controlleri
        end

        controller1 --&gt; servicei
        controller2 --&gt; servicei
        controller3 --&gt; servicei
        controller4 --&gt; servicei
    end

    subgraph database
        databse1 --&gt; entity1
        databse2 --&gt; entity2
        databse3 --&gt; entity3
        databse4 --&gt; entity4
    end

    controlleri --&gt; frontend</code></pre>
<p>作为微服务而言其实也是非常常见与合理的架构。中间层充当网关的角色被外部服务（前端）统一调用，其内部则再根据具体的调用请求来选择合适的服务进行通信，并将数据进行处理后转发给外部服务。在实践中，前端组与后端组同时开发，需求细节与开发细节还不明了的情况下，接口的内容与种类尽管可以大体确定，但具体的数据内容与种类等都是难以确定的。因而，利用中间层也即网关这一角色，接口确定的难题得以被解决。前后端可以先按照自己的想法对接口进行设计与模拟，当有一定的进度、对接口需求更加明确时再利用中间层进行数据的整合与处理，从而节约了大量沟通与修改的时间。</p>
<pre class="mermaid"><code>sequenceDiagram
    Frontend-&gt;&gt;+Intermediator: Request
    Intermediator-&gt;&gt;+Module: Processed Request
    Module--&gt;&gt;-Intermediator: Response
    Intermediator--&gt;&gt;-Frontend: Processed Response</code></pre>
<p>实践上，数据的转发与整合可以由后端的网关接管，也可以由前端利用nodejs来开发，无论哪种都是非常灵活的。事实上，nodejs构建的中间层或称node层的出现，就是为了让前后端都更关注于业务本身。尽管层数的增加可能会给性能带来一些影响，然而这与开发效率所节省的成本相比是微乎其微的。由过去后端渲染html发送给浏览器的前后端不分离，到前后端分离开发再到中间层的进化，我想这是一个相当自然的过程，也非常值得去学习与应用。</p>
<p>此外，采取微服务架构，后期的扩展性也是相当高的。一方面，需要增加新业务时可以直接以模块为单位进行添加，而不需要再去对原有代码进行改动。另一方面，甚至也可以将同一服务运行在多台服务器上，并利用Eureka、Ribbon等等组件进行负载均衡与健康检查的功能，从而能够进一步提升可用性与性能，这些都是单体应用难以带来的好处。</p>
<p>当然，微服务的思想也能直接应用到前端上，也就是前些年提出的<a href="#微前端">微前端</a>的思想。似乎前端组也有利用这一思想进行开发，不过本文就先不作赘述了。</p>
<h2 id="开发">开发</h2>
<h3 id="后端开发仍存在的问题">后端开发仍存在的问题</h3>
<p>开发上后端直接采用了SpringBoot的四层架构，基本上实现了增删改查四类功能。同时，调数据库方面使用了JPA。</p>
<p>需求上，为了满足全字段搜索、以及较简单的增删改功能，考虑到开发上的便捷性，查询相关的业务逻辑大体都是采取了下面的写法：</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="kw">public</span> JSONObject <span class="fu">getFeature</span>(</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>        <span class="bu">Integer</span> funcId,</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>        <span class="bu">String</span> funcName,</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>        <span class="bu">String</span> funcDescription,</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a>        <span class="bu">String</span> funcFlow,</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a>        <span class="bu">String</span> funcRole,</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a>        <span class="bu">String</span> funcTool,</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a>        <span class="bu">String</span> roomName) {</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a>    JSONObject res = <span class="kw">new</span> <span class="fu">JSONObject</span>();</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true"></a>    res.<span class="fu">put</span>(</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true"></a>            Constants.<span class="fu">featureList</span>,</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true"></a>            JSONObject.<span class="fu">parseArray</span>(JSON.<span class="fu">toJSONString</span>(featureRepository.<span class="fu">findAll</span>().<span class="fu">stream</span>()</span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true"></a>                    .<span class="fu">filter</span>(feature -&gt; SearchJudgeHelper.<span class="fu">softEquals</span>(funcName, feature.<span class="fu">getFuncName</span>())</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true"></a>                            &amp;&amp; SearchJudgeHelper.<span class="fu">softIncludes</span>(funcDescription, feature.<span class="fu">getFuncDescription</span>())</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true"></a>                            &amp;&amp; SearchJudgeHelper.<span class="fu">softIncludes</span>(funcFlow, feature.<span class="fu">getFuncFlow</span>())</span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true"></a>                            &amp;&amp; SearchJudgeHelper.<span class="fu">softIncludes</span>(funcRole, feature.<span class="fu">getFuncRole</span>())</span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true"></a>                            &amp;&amp; SearchJudgeHelper.<span class="fu">softEquals</span>(funcTool, feature.<span class="fu">getFuncTool</span>())</span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true"></a>                            &amp;&amp; SearchJudgeHelper.<span class="fu">softEquals</span>(</span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true"></a>                                    roomName, feature.<span class="fu">getFeatureRoom</span>().<span class="fu">getRoomName</span>())</span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true"></a>                            &amp;&amp; SearchJudgeHelper.<span class="fu">softEquals</span>(funcId, feature.<span class="fu">getFuncId</span>()))</span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true"></a>                    .<span class="fu">collect</span>(Collectors.<span class="fu">toList</span>()))));</span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true"></a>    <span class="kw">return</span> ResponseHelper.<span class="fu">constructSuccessResponse</span>(res);</span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true"></a>}</span></code></pre></div>
<p>先说查询逻辑。为了少写<code>SQL</code>因而这里是直接调用了JPA的<code>findAll</code>方法，随后利用<code>Java</code>的流函数对其进行遍历筛选，由此得到目标结果以返回。判断相等或包含的方法由自建类进行处理，以满足空数值的比较操作，例如：</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="kw">public</span> <span class="dt">static</span> <span class="bu">Boolean</span> <span class="fu">softEquals</span>(<span class="bu">String</span> toBeJudged, <span class="bu">String</span> referencedValue) {</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>    <span class="kw">try</span> {</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>        <span class="kw">return</span> (Objects.<span class="fu">equals</span>(toBeJudged, <span class="kw">null</span>) || Objects.<span class="fu">equals</span>(toBeJudged, <span class="st">&quot;&quot;</span>))</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>                ? <span class="kw">true</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>                : Objects.<span class="fu">equals</span>(referencedValue, <span class="bu">URLDecoder</span>.<span class="fu">decode</span>(toBeJudged, Constants.<span class="fu">UTF8</span>));</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a>    } <span class="kw">catch</span> (<span class="bu">UnsupportedEncodingException</span> e) {</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a>        <span class="kw">return</span> <span class="kw">false</span>;</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true"></a>    }</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true"></a>}</span></code></pre></div>
<p>小型项目中这样的写法大体上是没什么问题的，但如果遇上较大的项目这样的写法绝对会出很大的问题。一来，论谁都能看出的遍历查询的性能问题，在十万级别数据量下大概就能有很直观的感受了，这一工作本来应该在数据库中利用索引来优化解决。二来，大量的吞吐量给服务器带来了IO上巨大负担。其潜在的风险是难以估量的。</p>
<p>为了在满足需求的基础上尽可能简化开发上的工作量（即少写<code>SQL</code>与对应的函数），我目前的想法是利用正则表达式（例如MySQL中的<code>REGEXP</code>关键字）进行查询，由此将查询的相关工作返还给数据库。利用数据库内部的索引等机制对查询进行优化（MySQL内部索引的B+树能带来数倍的性能），借此来消除服务器的负担。借由这一方法全字段搜索可以通过唯一的一条<code>SQL</code>来实现，也符合尽量不写<code>SQL</code>的原则。</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="co">// Dao层</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="at">@Query</span>(value = <span class="st">&quot;SELECT f.* FROM Feature f WHERE (f.name REGEXP :funcNameRegExp) AND (f.description REGEXP :funcDescriptionRegExp)&quot;</span>, nativeQuery = <span class="kw">true</span>)</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a><span class="bu">ArrayList</span>&lt;Feature&gt; <span class="fu">findFeatureByRegExp</span>(<span class="at">@Param</span>(<span class="st">&quot;funcNameRegExp&quot;</span>) <span class="bu">String</span> funcNameRegExp, <span class="at">@Param</span>(<span class="st">&quot;funcDescriptionRegExp&quot;</span>) <span class="bu">String</span> funcDescriptionRegExp);</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a><span class="co">// Service层</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a><span class="kw">public</span> JSONObject <span class="fu">getFeature</span>(</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true"></a>        <span class="bu">String</span> funcName,</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true"></a>        <span class="bu">String</span> funcDescription) {</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true"></a>    <span class="bu">String</span> funcNameRegExp = funcName;</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true"></a>    <span class="bu">String</span> funcDescriptionRegExp =  <span class="st">&quot;^&quot;</span> + funcName + <span class="st">&quot;$&quot;</span>;</span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true"></a>    JSONObject res = <span class="kw">new</span> <span class="fu">JSONObject</span>();</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true"></a>    res.<span class="fu">put</span>(</span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true"></a>            Constants.<span class="fu">featureList</span>,</span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true"></a>            JSONObject.<span class="fu">parseArray</span>(JSON.<span class="fu">toJSONString</span>(featureRepository.<span class="fu">findFeatureByRegExp</span>(funcNameRegExp, funcDescriptionRegExp))));</span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true"></a>    <span class="kw">return</span> ResponseHelper.<span class="fu">constructSuccessResponse</span>(res);</span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true"></a>}</span></code></pre></div>
<p>再说增删改。项目中这些功能的实现大体如下：</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a>\\ 增</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a><span class="kw">public</span> JSONObject <span class="fu">addExamine</span>(<span class="bu">String</span> examineName, <span class="dt">double</span> examinePrice, <span class="bu">String</span> roomName) {</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a>    <span class="bu">List</span>&lt;Examine&gt; targetExamineList = examineRepository.<span class="fu">findAll</span>().<span class="fu">stream</span>()</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a>            .<span class="fu">filter</span>(examine -&gt; Objects.<span class="fu">equals</span>(examine.<span class="fu">getExamineName</span>(), examineName))</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true"></a>            .<span class="fu">collect</span>(Collectors.<span class="fu">toList</span>());</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true"></a></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true"></a>    <span class="kw">if</span> (Objects.<span class="fu">equals</span>(targetExamineList.<span class="fu">size</span>(), <span class="dv">0</span>)) {</span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true"></a>        Optional&lt;Room&gt; targetRoomOptional = roomRepository.<span class="fu">findById</span>(roomName);</span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true"></a></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true"></a>        <span class="kw">if</span> (targetRoomOptional.<span class="fu">isEmpty</span>()) {</span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true"></a>            <span class="kw">return</span> ResponseHelper.<span class="fu">constructFailedResponse</span>(ResponseHelper.<span class="fu">requestErrorCode</span>);</span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true"></a>        } <span class="kw">else</span> {</span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true"></a>            Examine newExamine = <span class="kw">new</span> <span class="fu">Examine</span>();</span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true"></a>            newExamine.<span class="fu">setExamineName</span>(examineName);</span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true"></a>            newExamine.<span class="fu">setExaminePrice</span>(examinePrice);</span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true"></a>            newExamine.<span class="fu">setExamineRoom</span>(targetRoomOptional.<span class="fu">get</span>());</span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true"></a></span>
<span id="cb7-18"><a href="#cb7-18" aria-hidden="true"></a>            Examine addedExamine = examineRepository.<span class="fu">saveAndFlush</span>(newExamine);</span>
<span id="cb7-19"><a href="#cb7-19" aria-hidden="true"></a></span>
<span id="cb7-20"><a href="#cb7-20" aria-hidden="true"></a>            <span class="kw">return</span> ResponseHelper.<span class="fu">constructSuccessResponse</span>(addedExamine);</span>
<span id="cb7-21"><a href="#cb7-21" aria-hidden="true"></a>        }</span>
<span id="cb7-22"><a href="#cb7-22" aria-hidden="true"></a>    } <span class="kw">else</span> {</span>
<span id="cb7-23"><a href="#cb7-23" aria-hidden="true"></a>        <span class="kw">return</span> ResponseHelper.<span class="fu">constructFailedResponse</span>(ResponseHelper.<span class="fu">requestErrorCode</span>);</span>
<span id="cb7-24"><a href="#cb7-24" aria-hidden="true"></a>    }</span>
<span id="cb7-25"><a href="#cb7-25" aria-hidden="true"></a>}</span>
<span id="cb7-26"><a href="#cb7-26" aria-hidden="true"></a></span>
<span id="cb7-27"><a href="#cb7-27" aria-hidden="true"></a>\\ 改</span>
<span id="cb7-28"><a href="#cb7-28" aria-hidden="true"></a><span class="kw">public</span> JSONObject <span class="fu">updateExamine</span>(<span class="dt">int</span> examineId, <span class="bu">String</span> examineName, <span class="dt">double</span> examinePrice, <span class="bu">String</span> roomName) {</span>
<span id="cb7-29"><a href="#cb7-29" aria-hidden="true"></a>    Optional&lt;Examine&gt; targetExamineOptional = examineRepository.<span class="fu">findById</span>(examineId);</span>
<span id="cb7-30"><a href="#cb7-30" aria-hidden="true"></a></span>
<span id="cb7-31"><a href="#cb7-31" aria-hidden="true"></a>    <span class="kw">if</span> (targetExamineOptional.<span class="fu">isEmpty</span>()) {</span>
<span id="cb7-32"><a href="#cb7-32" aria-hidden="true"></a>        <span class="kw">return</span> ResponseHelper.<span class="fu">constructFailedResponse</span>(ResponseHelper.<span class="fu">requestErrorCode</span>);</span>
<span id="cb7-33"><a href="#cb7-33" aria-hidden="true"></a>    } <span class="kw">else</span> {</span>
<span id="cb7-34"><a href="#cb7-34" aria-hidden="true"></a></span>
<span id="cb7-35"><a href="#cb7-35" aria-hidden="true"></a>        <span class="bu">List</span>&lt;Examine&gt; targetExamineList = examineRepository.<span class="fu">findAll</span>().<span class="fu">stream</span>()</span>
<span id="cb7-36"><a href="#cb7-36" aria-hidden="true"></a>                .<span class="fu">filter</span>(examine -&gt; Objects.<span class="fu">equals</span>(examine.<span class="fu">getExamineName</span>(), examineName)</span>
<span id="cb7-37"><a href="#cb7-37" aria-hidden="true"></a>                        &amp;&amp; !Objects.<span class="fu">equals</span>(examine.<span class="fu">getExamineId</span>(), examineId))</span>
<span id="cb7-38"><a href="#cb7-38" aria-hidden="true"></a>                .<span class="fu">collect</span>(Collectors.<span class="fu">toList</span>());</span>
<span id="cb7-39"><a href="#cb7-39" aria-hidden="true"></a></span>
<span id="cb7-40"><a href="#cb7-40" aria-hidden="true"></a>        Optional&lt;Room&gt; targetRoomOptional = roomRepository.<span class="fu">findById</span>(roomName);</span>
<span id="cb7-41"><a href="#cb7-41" aria-hidden="true"></a></span>
<span id="cb7-42"><a href="#cb7-42" aria-hidden="true"></a>        <span class="kw">if</span> (targetRoomOptional.<span class="fu">isEmpty</span>() || !Objects.<span class="fu">equals</span>(targetExamineList.<span class="fu">size</span>(), <span class="dv">0</span>)) {</span>
<span id="cb7-43"><a href="#cb7-43" aria-hidden="true"></a>            <span class="kw">return</span> ResponseHelper.<span class="fu">constructFailedResponse</span>(ResponseHelper.<span class="fu">requestErrorCode</span>);</span>
<span id="cb7-44"><a href="#cb7-44" aria-hidden="true"></a>        } <span class="kw">else</span> {</span>
<span id="cb7-45"><a href="#cb7-45" aria-hidden="true"></a>            Examine targetExamine = targetExamineOptional.<span class="fu">get</span>();</span>
<span id="cb7-46"><a href="#cb7-46" aria-hidden="true"></a>            targetExamine.<span class="fu">setExamineName</span>(examineName);</span>
<span id="cb7-47"><a href="#cb7-47" aria-hidden="true"></a>            targetExamine.<span class="fu">setExaminePrice</span>(examinePrice);</span>
<span id="cb7-48"><a href="#cb7-48" aria-hidden="true"></a>            targetExamine.<span class="fu">setExamineRoom</span>(targetRoomOptional.<span class="fu">get</span>());</span>
<span id="cb7-49"><a href="#cb7-49" aria-hidden="true"></a></span>
<span id="cb7-50"><a href="#cb7-50" aria-hidden="true"></a>            Examine updatedExamine = examineRepository.<span class="fu">saveAndFlush</span>(targetExamine);</span>
<span id="cb7-51"><a href="#cb7-51" aria-hidden="true"></a></span>
<span id="cb7-52"><a href="#cb7-52" aria-hidden="true"></a>            <span class="kw">return</span> ResponseHelper.<span class="fu">constructSuccessResponse</span>(updatedExamine);</span>
<span id="cb7-53"><a href="#cb7-53" aria-hidden="true"></a>        }</span>
<span id="cb7-54"><a href="#cb7-54" aria-hidden="true"></a>    }</span>
<span id="cb7-55"><a href="#cb7-55" aria-hidden="true"></a>}</span>
<span id="cb7-56"><a href="#cb7-56" aria-hidden="true"></a></span>
<span id="cb7-57"><a href="#cb7-57" aria-hidden="true"></a>\\ 删</span>
<span id="cb7-58"><a href="#cb7-58" aria-hidden="true"></a><span class="kw">public</span> JSONObject <span class="fu">deleteExamine</span>(<span class="dt">int</span> examineId) {</span>
<span id="cb7-59"><a href="#cb7-59" aria-hidden="true"></a>    Optional&lt;Examine&gt; targetExamineOptional = examineRepository.<span class="fu">findById</span>(examineId);</span>
<span id="cb7-60"><a href="#cb7-60" aria-hidden="true"></a></span>
<span id="cb7-61"><a href="#cb7-61" aria-hidden="true"></a>    <span class="kw">if</span> (targetExamineOptional.<span class="fu">isEmpty</span>()) {</span>
<span id="cb7-62"><a href="#cb7-62" aria-hidden="true"></a>        <span class="kw">return</span> ResponseHelper.<span class="fu">constructFailedResponse</span>(ResponseHelper.<span class="fu">requestErrorCode</span>);</span>
<span id="cb7-63"><a href="#cb7-63" aria-hidden="true"></a>    } <span class="kw">else</span> {</span>
<span id="cb7-64"><a href="#cb7-64" aria-hidden="true"></a>        examineRepository.<span class="fu">deleteById</span>(examineId);</span>
<span id="cb7-65"><a href="#cb7-65" aria-hidden="true"></a></span>
<span id="cb7-66"><a href="#cb7-66" aria-hidden="true"></a>        <span class="kw">if</span> (examineRepository.<span class="fu">findById</span>(examineId).<span class="fu">isEmpty</span>()) {</span>
<span id="cb7-67"><a href="#cb7-67" aria-hidden="true"></a>            <span class="kw">return</span> ResponseHelper.<span class="fu">constructSuccessResponse</span>(targetExamineOptional.<span class="fu">get</span>());</span>
<span id="cb7-68"><a href="#cb7-68" aria-hidden="true"></a>        } <span class="kw">else</span> {</span>
<span id="cb7-69"><a href="#cb7-69" aria-hidden="true"></a>            <span class="kw">return</span> ResponseHelper.<span class="fu">constructFailedResponse</span>(ResponseHelper.<span class="fu">requestErrorCode</span>);</span>
<span id="cb7-70"><a href="#cb7-70" aria-hidden="true"></a>        }</span>
<span id="cb7-71"><a href="#cb7-71" aria-hidden="true"></a>    }</span>
<span id="cb7-72"><a href="#cb7-72" aria-hidden="true"></a>}</span></code></pre></div>
<p>说实话每个表增删改查写一遍还是挺繁琐的，毕竟业务逻辑上太过类似了。基本上都是这样的逻辑：</p>
<ul>
<li>增：查询重复数据存在情况<span class="math inline">→</span>查外键存在情况<span class="math inline">→</span>插入数据。</li>
<li>改：查自身数据存在情况<span class="math inline">→</span>查询重复数据存在情况<span class="math inline">→</span>查外键存在情况<span class="math inline">→</span>插入数据。</li>
<li>删：直接调用JPA的<code>deleteById</code>方法。</li>
</ul>
<p>这里的如果需要重构可以考虑利用<a href="#java反射机制"><code>Java</code>反射机制</a>。事实上，项目末期时根据前端需求增加的根据数据Id查询功能就是利用这一机制写的。</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="kw">public</span> <span class="kw">class</span> GeneralService {</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a>    <span class="at">@Autowired</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a>    <span class="kw">private</span> RoomRepository roomRepository;</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true"></a>    <span class="at">@Autowired</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true"></a>    <span class="kw">private</span> FeatureRepository featureRepository;</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true"></a></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true"></a>    <span class="at">@Autowired</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true"></a>    <span class="kw">private</span> AdmissionRepository admissionRepository;</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true"></a></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true"></a>    <span class="at">@Autowired</span></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true"></a>    <span class="kw">private</span> ArchiveRepository archiveRepository;</span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true"></a></span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true"></a>    <span class="at">@Autowired</span></span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true"></a>    <span class="kw">private</span> ChargeRepository chargeRepository;</span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true"></a></span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true"></a>    <span class="at">@Autowired</span></span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true"></a>    <span class="kw">private</span> ExamineRepository examineRepository;</span>
<span id="cb8-19"><a href="#cb8-19" aria-hidden="true"></a></span>
<span id="cb8-20"><a href="#cb8-20" aria-hidden="true"></a>    <span class="at">@Autowired</span></span>
<span id="cb8-21"><a href="#cb8-21" aria-hidden="true"></a>    <span class="kw">private</span> MedicineRepository medicineRepository;</span>
<span id="cb8-22"><a href="#cb8-22" aria-hidden="true"></a></span>
<span id="cb8-23"><a href="#cb8-23" aria-hidden="true"></a>    <span class="kw">public</span> JSONObject <span class="fu">getDataById</span>(<span class="bu">String</span> tableName, <span class="dt">int</span> id) <span class="kw">throws</span> <span class="bu">Exception</span> {</span>
<span id="cb8-24"><a href="#cb8-24" aria-hidden="true"></a>        <span class="bu">Class</span>&lt;?&gt; dataDaoClass = <span class="bu">Class</span>.<span class="fu">forName</span>(</span>
<span id="cb8-25"><a href="#cb8-25" aria-hidden="true"></a>                Constants.<span class="fu">projectPackageName</span> + <span class="st">&quot;.&quot;</span> + Constants.<span class="fu">systemModulePackageName</span> + <span class="st">&quot;.&quot;</span></span>
<span id="cb8-26"><a href="#cb8-26" aria-hidden="true"></a>                        + Constants.<span class="fu">daoClassPackageName</span></span>
<span id="cb8-27"><a href="#cb8-27" aria-hidden="true"></a>                        + <span class="st">&quot;.&quot;</span> + tableName</span>
<span id="cb8-28"><a href="#cb8-28" aria-hidden="true"></a>                        + Constants.<span class="fu">daoClassSuffix</span>,</span>
<span id="cb8-29"><a href="#cb8-29" aria-hidden="true"></a>                <span class="kw">true</span>,</span>
<span id="cb8-30"><a href="#cb8-30" aria-hidden="true"></a>                <span class="bu">Thread</span>.<span class="fu">currentThread</span>().<span class="fu">getContextClassLoader</span>().<span class="fu">getParent</span>());</span>
<span id="cb8-31"><a href="#cb8-31" aria-hidden="true"></a></span>
<span id="cb8-32"><a href="#cb8-32" aria-hidden="true"></a>        <span class="bu">Method</span> getByIdMethod = <span class="kw">null</span>;</span>
<span id="cb8-33"><a href="#cb8-33" aria-hidden="true"></a></span>
<span id="cb8-34"><a href="#cb8-34" aria-hidden="true"></a>        <span class="kw">for</span> (<span class="bu">Method</span> classMethods : dataDaoClass.<span class="fu">getMethods</span>()) {</span>
<span id="cb8-35"><a href="#cb8-35" aria-hidden="true"></a>            <span class="kw">if</span> (Objects.<span class="fu">equals</span>(classMethods.<span class="fu">getName</span>(), Constants.<span class="fu">findByIdMethodName</span>)) {</span>
<span id="cb8-36"><a href="#cb8-36" aria-hidden="true"></a>                getByIdMethod = classMethods;</span>
<span id="cb8-37"><a href="#cb8-37" aria-hidden="true"></a>            }</span>
<span id="cb8-38"><a href="#cb8-38" aria-hidden="true"></a>        }</span>
<span id="cb8-39"><a href="#cb8-39" aria-hidden="true"></a></span>
<span id="cb8-40"><a href="#cb8-40" aria-hidden="true"></a>        <span class="kw">for</span> (<span class="bu">Field</span> selfField : <span class="kw">this</span>.<span class="fu">getClass</span>().<span class="fu">getDeclaredFields</span>()) {</span>
<span id="cb8-41"><a href="#cb8-41" aria-hidden="true"></a>            <span class="kw">if</span> (Objects.<span class="fu">equals</span>(selfField.<span class="fu">getType</span>().<span class="fu">getName</span>(), dataDaoClass.<span class="fu">getName</span>())) {</span>
<span id="cb8-42"><a href="#cb8-42" aria-hidden="true"></a>                Optional&lt;?&gt; getIdRes = (Optional&lt;?&gt;) getByIdMethod.<span class="fu">invoke</span>(selfField.<span class="fu">get</span>(<span class="kw">this</span>), id);</span>
<span id="cb8-43"><a href="#cb8-43" aria-hidden="true"></a></span>
<span id="cb8-44"><a href="#cb8-44" aria-hidden="true"></a>                <span class="kw">if</span> (getIdRes.<span class="fu">isEmpty</span>()) {</span>
<span id="cb8-45"><a href="#cb8-45" aria-hidden="true"></a>                    <span class="kw">return</span> ResponseHelper.<span class="fu">constructFailedResponse</span>(ResponseHelper.<span class="fu">requestErrorCode</span>);</span>
<span id="cb8-46"><a href="#cb8-46" aria-hidden="true"></a>                } <span class="kw">else</span> {</span>
<span id="cb8-47"><a href="#cb8-47" aria-hidden="true"></a>                    <span class="kw">return</span> ResponseHelper.<span class="fu">constructSuccessResponse</span>(getIdRes.<span class="fu">get</span>());</span>
<span id="cb8-48"><a href="#cb8-48" aria-hidden="true"></a>                }</span>
<span id="cb8-49"><a href="#cb8-49" aria-hidden="true"></a>            }</span>
<span id="cb8-50"><a href="#cb8-50" aria-hidden="true"></a>        }</span>
<span id="cb8-51"><a href="#cb8-51" aria-hidden="true"></a></span>
<span id="cb8-52"><a href="#cb8-52" aria-hidden="true"></a>        <span class="kw">return</span> ResponseHelper.<span class="fu">constructFailedResponse</span>(ResponseHelper.<span class="fu">requestErrorCode</span>);</span>
<span id="cb8-53"><a href="#cb8-53" aria-hidden="true"></a>    }</span>
<span id="cb8-54"><a href="#cb8-54" aria-hidden="true"></a>}</span></code></pre></div>
<p>事实上，删除功能可以直接套用这一写法。当然，在上面的<code>getDataById</code>方法中查找<code>Method</code>与<code>Field</code>的逻辑也可以进一步进行优化：</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="kw">public</span> <span class="bu">Class</span>&lt;JPARepository&gt; <span class="fu">getDataDaoClassByTableName</span> (<span class="bu">String</span> tableName) <span class="kw">throws</span> <span class="bu">Exception</span> {</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a>    <span class="kw">return</span> <span class="bu">Class</span>.<span class="fu">forName</span>(</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true"></a>            Constants.<span class="fu">projectPackageName</span> + <span class="st">&quot;.&quot;</span> + Constants.<span class="fu">systemModulePackageName</span> + <span class="st">&quot;.&quot;</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true"></a>                    + Constants.<span class="fu">daoClassPackageName</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true"></a>                    + <span class="st">&quot;.&quot;</span> + tableName</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true"></a>                    + Constants.<span class="fu">daoClassSuffix</span>,</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true"></a>            <span class="kw">true</span>,</span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true"></a>            <span class="bu">Thread</span>.<span class="fu">currentThread</span>().<span class="fu">getContextClassLoader</span>().<span class="fu">getParent</span>());</span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true"></a>}</span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true"></a></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true"></a><span class="kw">public</span> JSONObject <span class="fu">getDataById</span>(<span class="bu">String</span> tableName, <span class="dt">int</span> id) <span class="kw">throws</span> <span class="bu">Exception</span> {</span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true"></a>    <span class="bu">Class</span>&lt;?&gt; dataDaoClass = <span class="kw">this</span>.<span class="fu">getDataDaoClassByTableName</span>(tableName);</span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true"></a>    <span class="bu">Method</span> getByIdMethod = dataDaoClass.<span class="fu">getMethod</span>(Constants.<span class="fu">findByIdMethodName</span>, <span class="bu">Integer</span>.<span class="fu">class</span>);</span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true"></a>    <span class="bu">Field</span> selfField = <span class="kw">this</span>.<span class="fu">getClass</span>().<span class="fu">getDeclaredField</span>(tableName.<span class="fu">toFirstCharLowerCase</span>());</span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true"></a></span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true"></a>    Optional&lt;?&gt; getIdRes = (Optional&lt;?&gt;) getByIdMethod.<span class="fu">invoke</span>(selfField.<span class="fu">get</span>(<span class="kw">this</span>), id);</span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true"></a></span>
<span id="cb9-18"><a href="#cb9-18" aria-hidden="true"></a>    <span class="kw">return</span> getIdRes.<span class="fu">isEmpty</span>() ? ResponseHelper.<span class="fu">constructFailedResponse</span>(ResponseHelper.<span class="fu">requestErrorCode</span>) : ResponseHelper.<span class="fu">constructSuccessResponse</span>(getIdRes.<span class="fu">get</span>());</span>
<span id="cb9-19"><a href="#cb9-19" aria-hidden="true"></a>}</span>
<span id="cb9-20"><a href="#cb9-20" aria-hidden="true"></a></span>
<span id="cb9-21"><a href="#cb9-21" aria-hidden="true"></a><span class="kw">public</span> JSONObject <span class="fu">deleteDataById</span>(<span class="bu">String</span> tableName, <span class="dt">int</span> id) <span class="kw">throws</span> <span class="bu">Exception</span> {</span>
<span id="cb9-22"><a href="#cb9-22" aria-hidden="true"></a>    JSONObject getDataByIdRes = <span class="kw">this</span>.<span class="fu">getDataById</span>(tableName, id);</span>
<span id="cb9-23"><a href="#cb9-23" aria-hidden="true"></a></span>
<span id="cb9-24"><a href="#cb9-24" aria-hidden="true"></a>    <span class="co">// 表内查询无数据</span></span>
<span id="cb9-25"><a href="#cb9-25" aria-hidden="true"></a>    <span class="kw">if</span> (<span class="bu">Object</span>.<span class="fu">equals</span>(getDataByIdRes.<span class="fu">data</span>, <span class="kw">null</span>)) {</span>
<span id="cb9-26"><a href="#cb9-26" aria-hidden="true"></a>        <span class="kw">return</span> getDataByIdRes;</span>
<span id="cb9-27"><a href="#cb9-27" aria-hidden="true"></a>    }</span>
<span id="cb9-28"><a href="#cb9-28" aria-hidden="true"></a></span>
<span id="cb9-29"><a href="#cb9-29" aria-hidden="true"></a>    <span class="bu">Class</span>&lt;?&gt; dataDaoClass = <span class="kw">this</span>.<span class="fu">getDataDaoClassByTableName</span>(tableName);</span>
<span id="cb9-30"><a href="#cb9-30" aria-hidden="true"></a>    <span class="bu">Method</span> deleteByIdMethod = dataDaoClass.<span class="fu">getMethod</span>(Constants.<span class="fu">deleteByIdMethodName</span>, <span class="bu">Integer</span>.<span class="fu">class</span>);</span>
<span id="cb9-31"><a href="#cb9-31" aria-hidden="true"></a>    <span class="bu">Field</span> selfField = <span class="kw">this</span>.<span class="fu">getClass</span>().<span class="fu">getDeclaredField</span>(tableName.<span class="fu">toFirstCharLowerCase</span>());</span>
<span id="cb9-32"><a href="#cb9-32" aria-hidden="true"></a></span>
<span id="cb9-33"><a href="#cb9-33" aria-hidden="true"></a>    deleteByIdMethod.<span class="fu">invoke</span>(selfField.<span class="fu">get</span>(<span class="kw">this</span>), id);</span>
<span id="cb9-34"><a href="#cb9-34" aria-hidden="true"></a></span>
<span id="cb9-35"><a href="#cb9-35" aria-hidden="true"></a>    <span class="kw">return</span> ResponseHelper.<span class="fu">constructSuccessResponse</span>(getDataByIdRes.<span class="fu">get</span>());</span>
<span id="cb9-36"><a href="#cb9-36" aria-hidden="true"></a>}</span></code></pre></div>
<p>为了进一步简化开发工作量与代码逻辑，可以考虑先创建公共类：<code>BaseEntity</code>与<code>BaseRepository</code>，使得实体类继承前者，对应的<code>dao</code>类继承后者。</p>
<p>对于增改功能而言，业务逻辑中唯二的区别在于判断重复条件与判断外键存在逻辑这两项。可以考虑抽象成统一的公共方法，通过接收可变个数个参数构成的List来进行判断。更具体的，其可能是下面的实现形式：</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="kw">public</span> JSONObject <span class="fu">updateDataById</span>(</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a>    <span class="bu">String</span> tableName, </span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a>    <span class="dt">int</span> id, </span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true"></a>    <span class="bu">ArrayList</span>&lt;<span class="bu">String</span>&gt; duplicateConditionFields, </span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true"></a>    <span class="bu">ArrayList</span>&lt;<span class="bu">String</span>&gt; foreignKeys,</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true"></a>    <span class="bu">Map</span>&lt;<span class="bu">String</span>, <span class="bu">String</span>&gt; newValues</span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true"></a>) {</span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true"></a>    <span class="bu">Class</span>&lt;?&gt; dataEntityClass = ...; <span class="co">// 查找对应的Entity层类</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true"></a>    <span class="bu">Class</span>&lt;?&gt; dataDaoClass = ...; <span class="co">// 查找对应的Dao层类</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true"></a>    <span class="bu">Method</span> updateByIdMethod = dataDaoClass.<span class="fu">getMethod</span>(<span class="st">&quot;saveAndFlush&quot;</span>); <span class="co">// 查找保存数据的方法</span></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true"></a>    <span class="bu">Method</span> findAllMethod = dataDaoClass.<span class="fu">getMethod</span>(<span class="st">&quot;findAll&quot;</span>); </span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true"></a>    <span class="bu">Field</span> selfField = ...; <span class="co">// 找到自身类中对应的field</span></span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true"></a></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true"></a>    <span class="bu">Object</span> targetData = dataEntityClass.<span class="fu">getConstructor</span>().<span class="fu">newInstance</span>(); <span class="co">//获取要更新数据</span></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true"></a></span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true"></a>    <span class="bu">Boolean</span> isForeignKeyExist = <span class="kw">true</span>;</span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true"></a></span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true"></a>    <span class="co">// 如果满足重复条件或外键不存在则直接返回，这里可以进一步优化</span></span>
<span id="cb10-19"><a href="#cb10-19" aria-hidden="true"></a>    <span class="kw">for</span>(foreignKey : foreignKeys) {</span>
<span id="cb10-20"><a href="#cb10-20" aria-hidden="true"></a>        <span class="bu">Class</span>&lt;?&gt; foreignKeyDaoClass = <span class="bu">Class</span>.<span class="fu">forName</span>(targetData.<span class="fu">getDeclaredField</span>(foreignKey).<span class="fu">getType</span>().<span class="fu">getName</span>() + ...); <span class="co">//找到外键对应Dao层类</span></span>
<span id="cb10-21"><a href="#cb10-21" aria-hidden="true"></a>        <span class="bu">Method</span> findByIdMethod = foreignKeyDaoClass.<span class="fu">getMethod</span>(<span class="st">&quot;findById&quot;</span>); </span>
<span id="cb10-22"><a href="#cb10-22" aria-hidden="true"></a>        <span class="bu">Field</span> selfField = ...; <span class="co">// 找到自身类中对应的field</span></span>
<span id="cb10-23"><a href="#cb10-23" aria-hidden="true"></a>        Optional&lt;?&gt; getIdRes = (Optional&lt;?&gt;) findByIdMethod.<span class="fu">invoke</span>(selfField.<span class="fu">get</span>(<span class="kw">this</span>), <span class="bu">Integer</span>.<span class="fu">parseInt</span>(newValues.<span class="fu">get</span>(foreignKey).<span class="fu">getId</span>()));</span>
<span id="cb10-24"><a href="#cb10-24" aria-hidden="true"></a>        isForeignKeyExist &amp;= !getIdRes.<span class="fu">isEmpty</span>();</span>
<span id="cb10-25"><a href="#cb10-25" aria-hidden="true"></a>    }</span>
<span id="cb10-26"><a href="#cb10-26" aria-hidden="true"></a></span>
<span id="cb10-27"><a href="#cb10-27" aria-hidden="true"></a>    <span class="bu">List</span>&lt;?&gt; getAllRes = (<span class="bu">List</span>&lt;?&gt;) findAllMethod.<span class="fu">invoke</span>(selfField.<span class="fu">get</span>(<span class="kw">this</span>));</span>
<span id="cb10-28"><a href="#cb10-28" aria-hidden="true"></a></span>
<span id="cb10-29"><a href="#cb10-29" aria-hidden="true"></a>    <span class="kw">if</span> (<span class="bu">Object</span>.<span class="fu">equals</span>(getAllRes.<span class="fu">findAll</span>().<span class="fu">stream</span>().<span class="fu">filter</span>(data -&gt; {</span>
<span id="cb10-30"><a href="#cb10-30" aria-hidden="true"></a>        <span class="bu">Boolean</span> isExist = <span class="kw">true</span>;</span>
<span id="cb10-31"><a href="#cb10-31" aria-hidden="true"></a>        <span class="kw">for</span> (duplicateConditionField : duplicateConditionFields) {</span>
<span id="cb10-32"><a href="#cb10-32" aria-hidden="true"></a>            isExist &amp;= <span class="bu">Object</span>.<span class="fu">equals</span>(</span>
<span id="cb10-33"><a href="#cb10-33" aria-hidden="true"></a>                data.<span class="fu">getDeclaredField</span>(duplicateConditionField).<span class="fu">get</span>(data), </span>
<span id="cb10-34"><a href="#cb10-34" aria-hidden="true"></a>                targetData.<span class="fu">getDeclaredField</span>(duplicateConditionField).<span class="fu">get</span>(targetData)</span>
<span id="cb10-35"><a href="#cb10-35" aria-hidden="true"></a>            );</span>
<span id="cb10-36"><a href="#cb10-36" aria-hidden="true"></a>        }</span>
<span id="cb10-37"><a href="#cb10-37" aria-hidden="true"></a>        <span class="kw">return</span> isExist;</span>
<span id="cb10-38"><a href="#cb10-38" aria-hidden="true"></a>    }).<span class="fu">collect</span>(Collectors.<span class="fu">toList</span>()).<span class="fu">size</span>(), <span class="dv">0</span>) || !isForeignKeyExist) {</span>
<span id="cb10-39"><a href="#cb10-39" aria-hidden="true"></a>        <span class="kw">return</span>;</span>
<span id="cb10-40"><a href="#cb10-40" aria-hidden="true"></a>    }</span>
<span id="cb10-41"><a href="#cb10-41" aria-hidden="true"></a></span>
<span id="cb10-42"><a href="#cb10-42" aria-hidden="true"></a>    <span class="co">// 不满足重复条件且外键都存在时，进行数据更新</span></span>
<span id="cb10-43"><a href="#cb10-43" aria-hidden="true"></a>    <span class="kw">for</span> (field : targetData.<span class="fu">getDeclaredFields</span>()) {</span>
<span id="cb10-44"><a href="#cb10-44" aria-hidden="true"></a>        field.<span class="fu">set</span>(targetData, newValues.<span class="fu">get</span>(field.<span class="fu">getName</span>()).<span class="fu">toTargetType</span>());</span>
<span id="cb10-45"><a href="#cb10-45" aria-hidden="true"></a>    }</span>
<span id="cb10-46"><a href="#cb10-46" aria-hidden="true"></a></span>
<span id="cb10-47"><a href="#cb10-47" aria-hidden="true"></a>    updateByIdMethod.<span class="fu">invoke</span>(selfField.<span class="fu">get</span>(<span class="kw">this</span>), targetData);</span>
<span id="cb10-48"><a href="#cb10-48" aria-hidden="true"></a></span>
<span id="cb10-49"><a href="#cb10-49" aria-hidden="true"></a>    <span class="kw">return</span> ...; <span class="co">// 返回值</span></span>
<span id="cb10-50"><a href="#cb10-50" aria-hidden="true"></a>}</span></code></pre></div>
<p>考虑到增改功能逻辑也比较类似，因而增加功能的伪代码不再再次列出。</p>
<p>借此，大量类似的代码也可以被大幅省略，从而大幅减少工作量，同时也减少了冗余代码。</p>
<p>当然，这里也可以考虑使用拼接<code>SQL</code>的方法。不过考虑到后端开发上应该尽可能不写或少写原生的<code>SQL</code>，因而这一种写法更符合规范些。</p>
<p>通过利用上述的写法，项目中的代码可以精简许多，由此也可以使得所需要的测试代码大幅减少，从而使得项目整体的工作量大量降低。事实上，正是由于当前项目中有大量逻辑比较类似的代码，导致为满足覆盖率所需的测试代码非常庞大，从而难以完成自动化测试代码的编写。</p>
<p>除此之外，一些类内的方法也可以作出一些更改。考虑到方法链的写法更加符合直觉，且也在一定程度上能提升开发效率并使代码更加简洁（尽管在一定程度上破坏了<code>.</code>运算符的原有语义，且也不是很符合 <a href="CQRS">CQRS</a>），因而我个人更倾向于尽可能使用方法链的写法。</p>
<h3 id="前端">前端</h3>
<p>我个人而言也作为开发人员参与到了前端组的开发中。事实上最大的优化点在于接口调用的时机。当前，前端组在页面渲染时会请求一次后端接口，获取全部数据并渲染到页面上。之后，在进行关键词查找、数据插入、数据删除时各自会调用一次接口。至此为止都是比较合理的，当数据量庞大时前端不应该负责数据的查找工作，利用在服务器侧进行过优化的查询接口比较合理。然而，前端在进行数据编辑时，则是采用下面的流程：</p>
<pre class="mermaid"><code>flowchart TD
    A[页面选中数据] --&gt; B[获取数据id]
    B --&gt; C[根据id再次调用后端接口获取全部数据]
    C --&gt; D[根据后端返回渲染页面]
    D --&gt; E[用户输入完成后再次调取后端更新数据接口]</code></pre>
<p>由于在包含全部数据的页面进行初期渲染时每条数据的全部内容前端都已经获取到，因而选中数据进入编辑页面时完全可以直接利用前端已经拿到的数据进行渲染，不需要再次调用后端端口。且不谈在网络延迟较高的情况下，上面的做法会使得用户体验较差，在服务器有大量请求的情况下，前端冗余的调用会加重服务器的负担，从而影响性能。</p>
<p>另一方面我也注意到，前端由于没有将方法应用到了页面渲染的各个阶段，从而导致了某些请求会被重复多次执行，这也是影响性能的一大问题。当然，最好的解决方法应是前后端都做一下防抖处理。</p>
<h2 id="一些其他">一些其他</h2>
<p>开发上的问题大体如上，基本上都是后续项目中值得进行进一步更改的地方。除此以外，整个项目的生命周期中最最值得被后续继承的地方在于严格的PR-Code Review制度与文档的维护。其中前者保证了代码的质量与规范，后者则提高了有效沟通的效率。这两者才是在开发过程中降低工作量与各类成本的最关键因素。</p>
<h2 id="名词释义">名词释义</h2>
<h3 id="rad">RAD</h3>
<p>快速应用开发模型，又称V模型。似乎是为了改进瀑布式模型而在上世纪70至80年代提出的。这一模型大体上遵循下图的几个阶段：</p>
<figure>
<img src="_meida/SoftwareDevelopementInsights-20230428/RAD-model.webp" alt="" /><figcaption>picture</figcaption>
</figure>
<h3 id="微服务">微服务</h3>
<p>SOA（面向服务架构）的一种变体，提倡将单一应用程序划分为松耦合的服务组，每个服务可独立部署。其概念最早于2005年提出。</p>
<figure>
<img src="_meida/SoftwareDevelopementInsights-20230428/microservice.png" alt="" /><figcaption>picture</figcaption>
</figure>
<h3 id="微前端">微前端</h3>
<p>2016年被正式提出，是微服务这一概念被扩展到前端的一种应用形式，便于新老项目的共存与过渡，以及项目独立开发等。</p>
<figure>
<img src="_meida/SoftwareDevelopementInsights-20230428/mircro-frontend.png" alt="" /><figcaption>picture</figcaption>
</figure>
<h3 id="java反射机制"><code>Java</code>反射机制</h3>
<p><code>Java</code>先编译后运行，对象类型在编译期确定。在程序运行时类被动态加载，当类没被用到时没有被加载到JVM，因而利用反射，可以在运行时获得类的各种内容。通过利用反射，可以动态地创建对象，更加灵活，但是会消耗系统资源。</p>
<h3 id="cqrs">CQRS</h3>
<p>Command Query Responsibility Segregation，即命令查询职责分离模式，要求一个方法更改对象的状态或返回一个结果，但是不能同时包含这两个行为。从某种角度来说算是继承了从前将系统交互视为CRUD的思想。相较之下，方法链（Method Chaining）语法中由于对象被引用一次即可被多次调用，从某种意义上违反了这一原则。</p>
<p>更具体的，符合CQRS与<code>.</code>运算符原有语义（<code>调用者.操作名</code>）的写法形如下面的形式：</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a>Person p = <span class="kw">new</span> <span class="fu">Person</span>();</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true"></a>p.<span class="fu">getWater</span>();</span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true"></a>p.<span class="fu">drinkWater</span>();</span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true"></a>p.<span class="fu">getThirsty</span>();</span></code></pre></div>
<p>而方法链则形如下面的形式：</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a><span class="kw">new</span> <span class="fu">Person</span>().<span class="fu">getWater</span>().<span class="fu">drinkWater</span>().<span class="fu">getThirsty</span>();</span></code></pre></div>
<p>这种写法更符合直觉，同时可以节省临时变量、简化代码。</p>
<h2 id="参考资料">参考资料</h2>
<ol type="1">
<li>When I should use one to one relationship? (2012, September 7). Stack Overflow. https://stackoverflow.com/questions/12318870/when-i-should-use-one-to-one-relationship</li>
<li>search using regex in JPA. (2020, June 15). Stack Overflow. https://stackoverflow.com/questions/62379559/search-using-regex-in-jpa</li>
<li>Using Java Reflection. (n.d.). Using Java Reflection. https://www.oracle.com/technical-resources/articles/java/javareflection.html</li>
<li>Rapid application development - Wikipedia. (2014, July 2). Rapid Application Development - Wikipedia. https://en.wikipedia.org/wiki/Rapid_application_development</li>
<li>Jackson, C. (2019, June 19). Micro Frontends. martinfowler.com. https://martinfowler.com/articles/micro-frontends.html</li>
<li>M. (n.d.). CQRS pattern - Azure Architecture Center. CQRS Pattern - Azure Architecture Center | Microsoft Learn. https://learn.microsoft.com/en-us/azure/architecture/patterns/cqrs</li>
<li>Method chaining - why is it a good practice, or not? (2009, July 9). Stack Overflow. https://stackoverflow.com/questions/1103985/method-chaining-why-is-it-a-good-practice-or-not</li>
</ol>]]></description>
    <pubDate>Tue, 2 May 2023 23:19:08 +0800</pubDate>
  </item>
   
  <item>
    <title><![CDATA[生成n位全部二进制数，数组形式：蚂蚁爬杆问题]]></title>
    <link>https://pikapikapikaori.github.io/pikapikapi-blog/#//#/ITtech/OOADAntProblem-20210924</link>
    <guid isPermaLink="false">https://pikapikapikaori.github.io/pikapikapi-blog/#//#/ITtech/OOADAntProblem-20210924</guid>
    <description><![CDATA[<h1 id="生成n位全部二进制数数组形式蚂蚁爬杆问题">生成n位全部二进制数，数组形式：蚂蚁爬杆问题</h1>
<blockquote>
<p>本文首发于<a href="https://blog.csdn.net/weixin_42553007/article/details/120447886?spm=1001.2014.3001.5502">CSDN</a><br />
发表日期：2021.9.24</p>
</blockquote>
<p>OOAD第一次项目，以OOAD思想实现蚂蚁爬杆问题解法。</p>
<h2 id="问题">问题</h2>
<p>先重述一下蚂蚁爬杆问题：</p>
<blockquote>
<p>有一根300 厘米的细木杆，在第30厘米、80厘米、110厘米、160厘米、250厘米这五个位置上各有一只蚂蚁。木杆很细，不能同时通过两只蚂蚁。<br />
开始时，蚂蚁的头朝左还是朝右是任意的，它们只会朝前走或调头，但不会后退。 当任意两只蚂蚁碰头时，两只蚂蚁会同时调头朝相反方向走。假设蚂蚁们每秒钟可以走5厘米的距离。<br />
<strong>注：不允许穿越对方身体继续直行。</strong><br />
请编写一个程序，计算各种可能情形下所有蚂蚁都离开木杆的最小时间和最大时间。</p>
</blockquote>
<h2 id="思路">思路</h2>
<p>在编写过程中设置了一个<code>GameRoom</code>类用于模拟运行全部蚂蚁的爬行情况，其中需要一个函数来生成所有可能的方向组合。</p>
<p>我在写几个类的头文件最开始定义了一个游戏数据结构体，用于存放每一种方向组合的具体蚂蚁初试方向与游戏的结束时间：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">struct</span> GameData</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>{</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>    <span class="dt">bool</span> antDirection[DefaultAnt.antcnt];</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>    <span class="dt">int</span> gameTime;</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>};</span></code></pre></div>
<p>同时在蚂蚁类中以<code>bool</code>值定义了蚂蚁行进的方向，以右为正：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="co">/*</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="co"> The Ant class.</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a><span class="co"> */</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="kw">class</span> Ant</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>{</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a><span class="kw">private</span>:</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a>    <span class="dt">int</span> antId;</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a>    <span class="dt">double</span> velocity;</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a>    <span class="dt">bool</span> direction;     <span class="co">// True stands for right.</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a>    <span class="dt">double</span> location;</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a>    <span class="dt">bool</span> isAlive;       <span class="co">// True stands for alive.</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true"></a>    </span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true"></a><span class="kw">public</span>:</span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true"></a>    </span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true"></a>};</span></code></pre></div>
<p><code>GameRoom</code>类如下构造：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="co">/*</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="co"> The GameRoom class.</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a><span class="co"> */</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a><span class="kw">class</span> GameRoom</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a>{</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a><span class="kw">private</span>:</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a>    <span class="dt">int</span> incTime;</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a>    GameData stGameData[DefaultAnt.GroupCnt];</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true"></a>    </span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true"></a><span class="kw">public</span>:</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true"></a>    GameRoom ();</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true"></a>    </span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true"></a>    <span class="dt">void</span> buildDirections ();</span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true"></a>    <span class="dt">void</span> playGames ();</span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true"></a>    <span class="dt">void</span> start ();</span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true"></a>    </span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true"></a>};</span></code></pre></div>
<p>初步思想如下：</p>
<p>将结构体数组中按用于存放方向的数组展开，组合成<span class="math inline">2<sup><em>n</em></sup></span>行，<span class="math inline"><em>n</em></span>列的矩阵，其中第<span class="math inline"><em>i</em></span>行<span class="math inline"><em>j</em></span>列的项为<code>stGameData[i].antDirection[j]</code>。</p>
<p>第一列自上而下依次赋值<span class="math inline">0, 1, 0, 1, 0, 1,  ·  · ·</span>。</p>
<p>第二列自上而下依次赋值<span class="math inline">0, 0, 1, 1, 0, 0, 1, 1,  ·  · ·</span>。</p>
<p>第三列自上而下依次赋值<span class="math inline">0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1,  ·  · ·</span>。</p>
<p>即<code>stGameData[i].antDirection[j] = (i &gt;&gt; j) % 2</code>。</p>
<p>因而如下构造生产函数：</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="co">/*</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a><span class="co"> Post: Every situation is generalized.</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a><span class="co"> */</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a><span class="dt">void</span> GameRoom::buildDirections ()</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a>{</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a>    <span class="cf">for</span> (<span class="dt">int</span> divis = <span class="dv">0</span>; divis &lt; DefaultAnt.antcnt; divis ++)</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a>    {</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a>        <span class="dt">int</span> tmpdivi = pow (<span class="dv">2</span>, divis);</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a>        <span class="cf">for</span> (<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; DefaultAnt.GroupCnt; i += <span class="dv">2</span> * tmpdivi)</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true"></a>        {</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true"></a>            <span class="cf">for</span> (<span class="dt">int</span> j = i; j &lt; tmpdivi; j ++)</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true"></a>                stGameData[j].antDirection[divis] = <span class="kw">true</span>;</span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true"></a>            <span class="cf">for</span> (<span class="dt">int</span> p = i + tmpdivi; p &lt; i + <span class="dv">2</span> * tmpdivi; p ++)</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true"></a>                stGameData[p].antDirection[divis] = <span class="kw">false</span>;</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true"></a>        }</span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true"></a>    }</span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true"></a>}</span></code></pre></div>
<p>第一层<code>for</code>循环用于设置计算<span class="math inline"><em>n</em></span>次，第二层<code>for</code>循环用于计算每一个结构题内方向数组应从第几位开始赋值<span class="math inline">0</span>，最内层的两个<code>for</code>循环用于赋值<span class="math inline">0</span>和<span class="math inline">1</span></p>
<p>算法时间复杂度可能稍高······</p>
<h2 id="完整代码">完整代码</h2>
<p>最后贴上OOAD思想写的爬杆问题解法：</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="co">//</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a><span class="co">//  Ant.h</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a><span class="co">//  Ant</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a><span class="co">//</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a><span class="co">//</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a> </span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a><span class="pp">#ifndef Ant_h</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true"></a><span class="pp">#define Ant_h</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true"></a> </span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true"></a><span class="pp">#include </span><span class="im">&lt;math.h&gt;</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true"></a> </span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true"></a><span class="kw">struct</span> DefaultStickData</span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true"></a>{</span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true"></a>    <span class="at">const</span> <span class="dt">double</span> leftEnd = <span class="dv">0</span>;</span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true"></a>    <span class="at">const</span> <span class="dt">double</span> rightEnd = <span class="dv">300</span>;</span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true"></a>};</span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true"></a> </span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true"></a><span class="kw">struct</span> DefaultAntData</span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true"></a>{</span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true"></a>    <span class="at">const</span> <span class="dt">int</span> antcnt = <span class="dv">5</span>;</span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true"></a>    <span class="at">const</span> <span class="dt">int</span> GroupCnt = <span class="dv">32</span>;</span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true"></a>    <span class="at">const</span> <span class="dt">double</span> speed = <span class="dv">5</span>;</span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true"></a>    <span class="at">const</span> <span class="dt">bool</span> direct = <span class="kw">true</span>;</span>
<span id="cb5-24"><a href="#cb5-24" aria-hidden="true"></a>    <span class="at">const</span> <span class="dt">double</span> loc[<span class="dv">5</span>] = {<span class="dv">30</span>, <span class="dv">80</span>, <span class="dv">110</span>, <span class="dv">160</span>, <span class="dv">250</span>};</span>
<span id="cb5-25"><a href="#cb5-25" aria-hidden="true"></a>};</span>
<span id="cb5-26"><a href="#cb5-26" aria-hidden="true"></a> </span>
<span id="cb5-27"><a href="#cb5-27" aria-hidden="true"></a><span class="at">const</span> DefaultStickData DefaultStick;</span>
<span id="cb5-28"><a href="#cb5-28" aria-hidden="true"></a><span class="at">const</span> DefaultAntData DefaultAnt;</span>
<span id="cb5-29"><a href="#cb5-29" aria-hidden="true"></a> </span>
<span id="cb5-30"><a href="#cb5-30" aria-hidden="true"></a> </span>
<span id="cb5-31"><a href="#cb5-31" aria-hidden="true"></a> </span>
<span id="cb5-32"><a href="#cb5-32" aria-hidden="true"></a><span class="kw">struct</span> GameData</span>
<span id="cb5-33"><a href="#cb5-33" aria-hidden="true"></a>{</span>
<span id="cb5-34"><a href="#cb5-34" aria-hidden="true"></a>    <span class="dt">bool</span> antDirection[DefaultAnt.antcnt];</span>
<span id="cb5-35"><a href="#cb5-35" aria-hidden="true"></a>    <span class="dt">int</span> gameTime;</span>
<span id="cb5-36"><a href="#cb5-36" aria-hidden="true"></a>};</span>
<span id="cb5-37"><a href="#cb5-37" aria-hidden="true"></a> </span>
<span id="cb5-38"><a href="#cb5-38" aria-hidden="true"></a> </span>
<span id="cb5-39"><a href="#cb5-39" aria-hidden="true"></a><span class="co">/*</span></span>
<span id="cb5-40"><a href="#cb5-40" aria-hidden="true"></a><span class="co"> The Ant class.</span></span>
<span id="cb5-41"><a href="#cb5-41" aria-hidden="true"></a><span class="co"> */</span></span>
<span id="cb5-42"><a href="#cb5-42" aria-hidden="true"></a><span class="kw">class</span> Ant</span>
<span id="cb5-43"><a href="#cb5-43" aria-hidden="true"></a>{</span>
<span id="cb5-44"><a href="#cb5-44" aria-hidden="true"></a><span class="kw">private</span>:</span>
<span id="cb5-45"><a href="#cb5-45" aria-hidden="true"></a>    <span class="dt">int</span> antId;</span>
<span id="cb5-46"><a href="#cb5-46" aria-hidden="true"></a>    <span class="dt">double</span> velocity;</span>
<span id="cb5-47"><a href="#cb5-47" aria-hidden="true"></a>    <span class="dt">bool</span> direction;     <span class="co">// True stands for right.</span></span>
<span id="cb5-48"><a href="#cb5-48" aria-hidden="true"></a>    <span class="dt">double</span> location;</span>
<span id="cb5-49"><a href="#cb5-49" aria-hidden="true"></a>    <span class="dt">bool</span> isAlive;       <span class="co">// True stands for alive.</span></span>
<span id="cb5-50"><a href="#cb5-50" aria-hidden="true"></a>    </span>
<span id="cb5-51"><a href="#cb5-51" aria-hidden="true"></a><span class="kw">public</span>:</span>
<span id="cb5-52"><a href="#cb5-52" aria-hidden="true"></a>    Ant ();</span>
<span id="cb5-53"><a href="#cb5-53" aria-hidden="true"></a>    <span class="dt">void</span> setAnt (<span class="dt">int</span> antID, <span class="dt">double</span> vel, <span class="dt">bool</span> dir, <span class="dt">double</span> loc);</span>
<span id="cb5-54"><a href="#cb5-54" aria-hidden="true"></a>    </span>
<span id="cb5-55"><a href="#cb5-55" aria-hidden="true"></a>    <span class="dt">void</span> changeDirection ();</span>
<span id="cb5-56"><a href="#cb5-56" aria-hidden="true"></a>    <span class="dt">void</span> creeping ();</span>
<span id="cb5-57"><a href="#cb5-57" aria-hidden="true"></a>    <span class="dt">bool</span> isColllision (<span class="dt">bool</span> isCol);</span>
<span id="cb5-58"><a href="#cb5-58" aria-hidden="true"></a>    <span class="dt">bool</span> isLive ();</span>
<span id="cb5-59"><a href="#cb5-59" aria-hidden="true"></a>    <span class="dt">void</span> changeLive ();</span>
<span id="cb5-60"><a href="#cb5-60" aria-hidden="true"></a>    </span>
<span id="cb5-61"><a href="#cb5-61" aria-hidden="true"></a>    <span class="dt">double</span> getLocation ();</span>
<span id="cb5-62"><a href="#cb5-62" aria-hidden="true"></a>    <span class="dt">double</span> getVelocity ();</span>
<span id="cb5-63"><a href="#cb5-63" aria-hidden="true"></a>    <span class="dt">bool</span> getDirection ();</span>
<span id="cb5-64"><a href="#cb5-64" aria-hidden="true"></a>    </span>
<span id="cb5-65"><a href="#cb5-65" aria-hidden="true"></a>};</span>
<span id="cb5-66"><a href="#cb5-66" aria-hidden="true"></a> </span>
<span id="cb5-67"><a href="#cb5-67" aria-hidden="true"></a><span class="co">/*</span></span>
<span id="cb5-68"><a href="#cb5-68" aria-hidden="true"></a><span class="co"> Post: Ant class is initialized.</span></span>
<span id="cb5-69"><a href="#cb5-69" aria-hidden="true"></a><span class="co"> */</span></span>
<span id="cb5-70"><a href="#cb5-70" aria-hidden="true"></a>Ant::Ant ()</span>
<span id="cb5-71"><a href="#cb5-71" aria-hidden="true"></a>{</span>
<span id="cb5-72"><a href="#cb5-72" aria-hidden="true"></a>    </span>
<span id="cb5-73"><a href="#cb5-73" aria-hidden="true"></a>}</span>
<span id="cb5-74"><a href="#cb5-74" aria-hidden="true"></a> </span>
<span id="cb5-75"><a href="#cb5-75" aria-hidden="true"></a><span class="dt">void</span> Ant::setAnt (<span class="dt">int</span> antID, <span class="dt">double</span> vel, <span class="dt">bool</span> dir, <span class="dt">double</span> loc)</span>
<span id="cb5-76"><a href="#cb5-76" aria-hidden="true"></a>{</span>
<span id="cb5-77"><a href="#cb5-77" aria-hidden="true"></a>    antId = antID;</span>
<span id="cb5-78"><a href="#cb5-78" aria-hidden="true"></a>    velocity = vel;</span>
<span id="cb5-79"><a href="#cb5-79" aria-hidden="true"></a>    direction = dir;</span>
<span id="cb5-80"><a href="#cb5-80" aria-hidden="true"></a>    location = loc;</span>
<span id="cb5-81"><a href="#cb5-81" aria-hidden="true"></a>    isAlive = <span class="kw">true</span>;</span>
<span id="cb5-82"><a href="#cb5-82" aria-hidden="true"></a>}</span>
<span id="cb5-83"><a href="#cb5-83" aria-hidden="true"></a> </span>
<span id="cb5-84"><a href="#cb5-84" aria-hidden="true"></a><span class="co">/*</span></span>
<span id="cb5-85"><a href="#cb5-85" aria-hidden="true"></a><span class="co"> Post: The ant&#39;s direction is changed.</span></span>
<span id="cb5-86"><a href="#cb5-86" aria-hidden="true"></a><span class="co"> */</span></span>
<span id="cb5-87"><a href="#cb5-87" aria-hidden="true"></a><span class="dt">void</span> Ant::changeDirection ()</span>
<span id="cb5-88"><a href="#cb5-88" aria-hidden="true"></a>{</span>
<span id="cb5-89"><a href="#cb5-89" aria-hidden="true"></a>    <span class="cf">if</span> (isAlive)</span>
<span id="cb5-90"><a href="#cb5-90" aria-hidden="true"></a>        direction = !direction;</span>
<span id="cb5-91"><a href="#cb5-91" aria-hidden="true"></a>}</span>
<span id="cb5-92"><a href="#cb5-92" aria-hidden="true"></a> </span>
<span id="cb5-93"><a href="#cb5-93" aria-hidden="true"></a><span class="co">/*</span></span>
<span id="cb5-94"><a href="#cb5-94" aria-hidden="true"></a><span class="co"> Post: The function keeps the ant creeping by 1 second.</span></span>
<span id="cb5-95"><a href="#cb5-95" aria-hidden="true"></a><span class="co"> */</span></span>
<span id="cb5-96"><a href="#cb5-96" aria-hidden="true"></a><span class="dt">void</span> Ant::creeping ()</span>
<span id="cb5-97"><a href="#cb5-97" aria-hidden="true"></a>{</span>
<span id="cb5-98"><a href="#cb5-98" aria-hidden="true"></a>    <span class="cf">if</span> (isAlive)</span>
<span id="cb5-99"><a href="#cb5-99" aria-hidden="true"></a>        <span class="cf">if</span> (direction == <span class="kw">true</span>)</span>
<span id="cb5-100"><a href="#cb5-100" aria-hidden="true"></a>            location += velocity;</span>
<span id="cb5-101"><a href="#cb5-101" aria-hidden="true"></a>        <span class="cf">else</span></span>
<span id="cb5-102"><a href="#cb5-102" aria-hidden="true"></a>            location -= velocity;</span>
<span id="cb5-103"><a href="#cb5-103" aria-hidden="true"></a>}</span>
<span id="cb5-104"><a href="#cb5-104" aria-hidden="true"></a> </span>
<span id="cb5-105"><a href="#cb5-105" aria-hidden="true"></a><span class="co">/*</span></span>
<span id="cb5-106"><a href="#cb5-106" aria-hidden="true"></a><span class="co"> Post: This function returns a bool value on the basis of isCol given by the detectCollision function in CreepingGame.</span></span>
<span id="cb5-107"><a href="#cb5-107" aria-hidden="true"></a><span class="co"> */</span></span>
<span id="cb5-108"><a href="#cb5-108" aria-hidden="true"></a><span class="dt">bool</span> Ant::isColllision (<span class="dt">bool</span> isCol)</span>
<span id="cb5-109"><a href="#cb5-109" aria-hidden="true"></a>{</span>
<span id="cb5-110"><a href="#cb5-110" aria-hidden="true"></a>    <span class="cf">return</span> isCol;</span>
<span id="cb5-111"><a href="#cb5-111" aria-hidden="true"></a>}</span>
<span id="cb5-112"><a href="#cb5-112" aria-hidden="true"></a> </span>
<span id="cb5-113"><a href="#cb5-113" aria-hidden="true"></a><span class="co">/*</span></span>
<span id="cb5-114"><a href="#cb5-114" aria-hidden="true"></a><span class="co"> Post: The status of the ant is retuned.</span></span>
<span id="cb5-115"><a href="#cb5-115" aria-hidden="true"></a><span class="co"> */</span></span>
<span id="cb5-116"><a href="#cb5-116" aria-hidden="true"></a><span class="dt">bool</span> Ant::isLive ()</span>
<span id="cb5-117"><a href="#cb5-117" aria-hidden="true"></a>{</span>
<span id="cb5-118"><a href="#cb5-118" aria-hidden="true"></a>    <span class="cf">return</span> isAlive;</span>
<span id="cb5-119"><a href="#cb5-119" aria-hidden="true"></a>}</span>
<span id="cb5-120"><a href="#cb5-120" aria-hidden="true"></a> </span>
<span id="cb5-121"><a href="#cb5-121" aria-hidden="true"></a><span class="co">/*</span></span>
<span id="cb5-122"><a href="#cb5-122" aria-hidden="true"></a><span class="co"> Post: The status of the ant is changed.</span></span>
<span id="cb5-123"><a href="#cb5-123" aria-hidden="true"></a><span class="co"> */</span></span>
<span id="cb5-124"><a href="#cb5-124" aria-hidden="true"></a><span class="dt">void</span> Ant::changeLive ()</span>
<span id="cb5-125"><a href="#cb5-125" aria-hidden="true"></a>{ </span>
<span id="cb5-126"><a href="#cb5-126" aria-hidden="true"></a>    <span class="cf">if</span> (isAlive)</span>
<span id="cb5-127"><a href="#cb5-127" aria-hidden="true"></a>        isAlive = !isAlive;</span>
<span id="cb5-128"><a href="#cb5-128" aria-hidden="true"></a>}</span>
<span id="cb5-129"><a href="#cb5-129" aria-hidden="true"></a> </span>
<span id="cb5-130"><a href="#cb5-130" aria-hidden="true"></a><span class="co">/*</span></span>
<span id="cb5-131"><a href="#cb5-131" aria-hidden="true"></a><span class="co"> Post: The function prints the ant&#39;s location.</span></span>
<span id="cb5-132"><a href="#cb5-132" aria-hidden="true"></a><span class="co"> */</span></span>
<span id="cb5-133"><a href="#cb5-133" aria-hidden="true"></a><span class="dt">double</span> Ant::getLocation ()</span>
<span id="cb5-134"><a href="#cb5-134" aria-hidden="true"></a>{</span>
<span id="cb5-135"><a href="#cb5-135" aria-hidden="true"></a>    <span class="cf">return</span> location;</span>
<span id="cb5-136"><a href="#cb5-136" aria-hidden="true"></a>}</span>
<span id="cb5-137"><a href="#cb5-137" aria-hidden="true"></a> </span>
<span id="cb5-138"><a href="#cb5-138" aria-hidden="true"></a><span class="co">/*</span></span>
<span id="cb5-139"><a href="#cb5-139" aria-hidden="true"></a><span class="co"> Post: The function prints the ant&#39;s velocity.</span></span>
<span id="cb5-140"><a href="#cb5-140" aria-hidden="true"></a><span class="co"> */</span></span>
<span id="cb5-141"><a href="#cb5-141" aria-hidden="true"></a><span class="dt">double</span> Ant::getVelocity ()</span>
<span id="cb5-142"><a href="#cb5-142" aria-hidden="true"></a>{</span>
<span id="cb5-143"><a href="#cb5-143" aria-hidden="true"></a>    <span class="cf">return</span> velocity;</span>
<span id="cb5-144"><a href="#cb5-144" aria-hidden="true"></a>}</span>
<span id="cb5-145"><a href="#cb5-145" aria-hidden="true"></a> </span>
<span id="cb5-146"><a href="#cb5-146" aria-hidden="true"></a><span class="co">/*</span></span>
<span id="cb5-147"><a href="#cb5-147" aria-hidden="true"></a><span class="co"> Post: The function prints the ant&#39;s direction.</span></span>
<span id="cb5-148"><a href="#cb5-148" aria-hidden="true"></a><span class="co"> */</span></span>
<span id="cb5-149"><a href="#cb5-149" aria-hidden="true"></a><span class="dt">bool</span> Ant::getDirection()</span>
<span id="cb5-150"><a href="#cb5-150" aria-hidden="true"></a>{</span>
<span id="cb5-151"><a href="#cb5-151" aria-hidden="true"></a>    <span class="cf">return</span> direction;</span>
<span id="cb5-152"><a href="#cb5-152" aria-hidden="true"></a>}</span>
<span id="cb5-153"><a href="#cb5-153" aria-hidden="true"></a> </span>
<span id="cb5-154"><a href="#cb5-154" aria-hidden="true"></a> </span>
<span id="cb5-155"><a href="#cb5-155" aria-hidden="true"></a><span class="co">/*</span></span>
<span id="cb5-156"><a href="#cb5-156" aria-hidden="true"></a><span class="co"> The Stick class.</span></span>
<span id="cb5-157"><a href="#cb5-157" aria-hidden="true"></a><span class="co"> */</span></span>
<span id="cb5-158"><a href="#cb5-158" aria-hidden="true"></a><span class="kw">class</span> Stick</span>
<span id="cb5-159"><a href="#cb5-159" aria-hidden="true"></a>{</span>
<span id="cb5-160"><a href="#cb5-160" aria-hidden="true"></a><span class="kw">private</span>:</span>
<span id="cb5-161"><a href="#cb5-161" aria-hidden="true"></a>    <span class="dt">double</span> leftLocation;</span>
<span id="cb5-162"><a href="#cb5-162" aria-hidden="true"></a>    <span class="dt">double</span> rightLocation;</span>
<span id="cb5-163"><a href="#cb5-163" aria-hidden="true"></a>    <span class="dt">int</span> livingAnts;</span>
<span id="cb5-164"><a href="#cb5-164" aria-hidden="true"></a>    </span>
<span id="cb5-165"><a href="#cb5-165" aria-hidden="true"></a><span class="kw">public</span>:</span>
<span id="cb5-166"><a href="#cb5-166" aria-hidden="true"></a>    Stick ();</span>
<span id="cb5-167"><a href="#cb5-167" aria-hidden="true"></a>    <span class="dt">void</span> setStick (<span class="dt">double</span> leftLoc, <span class="dt">double</span> rightLoc);</span>
<span id="cb5-168"><a href="#cb5-168" aria-hidden="true"></a>    </span>
<span id="cb5-169"><a href="#cb5-169" aria-hidden="true"></a>    <span class="dt">bool</span> isOut (Ant tmpAnt);</span>
<span id="cb5-170"><a href="#cb5-170" aria-hidden="true"></a>    </span>
<span id="cb5-171"><a href="#cb5-171" aria-hidden="true"></a>    <span class="dt">void</span> killAnt ();</span>
<span id="cb5-172"><a href="#cb5-172" aria-hidden="true"></a>    <span class="dt">int</span> getLivAntCnt ();</span>
<span id="cb5-173"><a href="#cb5-173" aria-hidden="true"></a>    </span>
<span id="cb5-174"><a href="#cb5-174" aria-hidden="true"></a>};</span>
<span id="cb5-175"><a href="#cb5-175" aria-hidden="true"></a> </span>
<span id="cb5-176"><a href="#cb5-176" aria-hidden="true"></a><span class="co">/*</span></span>
<span id="cb5-177"><a href="#cb5-177" aria-hidden="true"></a><span class="co"> Post: The stick is initialized, giving the value of leftLocation is smaller than that of rightLocation.</span></span>
<span id="cb5-178"><a href="#cb5-178" aria-hidden="true"></a><span class="co"> */</span></span>
<span id="cb5-179"><a href="#cb5-179" aria-hidden="true"></a>Stick::Stick ()</span>
<span id="cb5-180"><a href="#cb5-180" aria-hidden="true"></a>{</span>
<span id="cb5-181"><a href="#cb5-181" aria-hidden="true"></a>    </span>
<span id="cb5-182"><a href="#cb5-182" aria-hidden="true"></a>}</span>
<span id="cb5-183"><a href="#cb5-183" aria-hidden="true"></a> </span>
<span id="cb5-184"><a href="#cb5-184" aria-hidden="true"></a><span class="dt">void</span> Stick::setStick (<span class="dt">double</span> leftLoc, <span class="dt">double</span> rightLoc)</span>
<span id="cb5-185"><a href="#cb5-185" aria-hidden="true"></a>{</span>
<span id="cb5-186"><a href="#cb5-186" aria-hidden="true"></a>    leftLocation = leftLoc;</span>
<span id="cb5-187"><a href="#cb5-187" aria-hidden="true"></a>    rightLocation = rightLoc;</span>
<span id="cb5-188"><a href="#cb5-188" aria-hidden="true"></a>    livingAnts = DefaultAnt.antcnt;</span>
<span id="cb5-189"><a href="#cb5-189" aria-hidden="true"></a>}</span>
<span id="cb5-190"><a href="#cb5-190" aria-hidden="true"></a> </span>
<span id="cb5-191"><a href="#cb5-191" aria-hidden="true"></a><span class="co">/*</span></span>
<span id="cb5-192"><a href="#cb5-192" aria-hidden="true"></a><span class="co"> Post: The function examines whether the given ant is out of the stick, true stands for out.</span></span>
<span id="cb5-193"><a href="#cb5-193" aria-hidden="true"></a><span class="co"> */</span></span>
<span id="cb5-194"><a href="#cb5-194" aria-hidden="true"></a><span class="dt">bool</span> Stick::isOut (Ant tmpAnt)</span>
<span id="cb5-195"><a href="#cb5-195" aria-hidden="true"></a>{</span>
<span id="cb5-196"><a href="#cb5-196" aria-hidden="true"></a>    <span class="cf">if</span> (tmpAnt.getLocation () &lt;= leftLocation || tmpAnt.getLocation () &gt;= rightLocation)</span>
<span id="cb5-197"><a href="#cb5-197" aria-hidden="true"></a>        <span class="cf">return</span> <span class="kw">true</span>;</span>
<span id="cb5-198"><a href="#cb5-198" aria-hidden="true"></a>    <span class="cf">return</span> <span class="kw">false</span>;</span>
<span id="cb5-199"><a href="#cb5-199" aria-hidden="true"></a>}</span>
<span id="cb5-200"><a href="#cb5-200" aria-hidden="true"></a> </span>
<span id="cb5-201"><a href="#cb5-201" aria-hidden="true"></a><span class="co">/*</span></span>
<span id="cb5-202"><a href="#cb5-202" aria-hidden="true"></a><span class="co"> Post: The amount of ants decreases by 1.</span></span>
<span id="cb5-203"><a href="#cb5-203" aria-hidden="true"></a><span class="co"> */</span></span>
<span id="cb5-204"><a href="#cb5-204" aria-hidden="true"></a><span class="dt">void</span> Stick::killAnt ()</span>
<span id="cb5-205"><a href="#cb5-205" aria-hidden="true"></a>{</span>
<span id="cb5-206"><a href="#cb5-206" aria-hidden="true"></a>    livingAnts --;</span>
<span id="cb5-207"><a href="#cb5-207" aria-hidden="true"></a>}</span>
<span id="cb5-208"><a href="#cb5-208" aria-hidden="true"></a> </span>
<span id="cb5-209"><a href="#cb5-209" aria-hidden="true"></a><span class="co">/*</span></span>
<span id="cb5-210"><a href="#cb5-210" aria-hidden="true"></a><span class="co"> Post: The amount of living ants is returned.</span></span>
<span id="cb5-211"><a href="#cb5-211" aria-hidden="true"></a><span class="co"> */</span></span>
<span id="cb5-212"><a href="#cb5-212" aria-hidden="true"></a><span class="dt">int</span> Stick::getLivAntCnt ()</span>
<span id="cb5-213"><a href="#cb5-213" aria-hidden="true"></a>{</span>
<span id="cb5-214"><a href="#cb5-214" aria-hidden="true"></a>    <span class="cf">return</span> livingAnts;</span>
<span id="cb5-215"><a href="#cb5-215" aria-hidden="true"></a>}</span>
<span id="cb5-216"><a href="#cb5-216" aria-hidden="true"></a> </span>
<span id="cb5-217"><a href="#cb5-217" aria-hidden="true"></a> </span>
<span id="cb5-218"><a href="#cb5-218" aria-hidden="true"></a><span class="co">/*</span></span>
<span id="cb5-219"><a href="#cb5-219" aria-hidden="true"></a><span class="co"> The CreepingGame class.</span></span>
<span id="cb5-220"><a href="#cb5-220" aria-hidden="true"></a><span class="co"> */</span></span>
<span id="cb5-221"><a href="#cb5-221" aria-hidden="true"></a><span class="kw">class</span> CreepingGame</span>
<span id="cb5-222"><a href="#cb5-222" aria-hidden="true"></a>{</span>
<span id="cb5-223"><a href="#cb5-223" aria-hidden="true"></a><span class="kw">private</span>:</span>
<span id="cb5-224"><a href="#cb5-224" aria-hidden="true"></a>    <span class="dt">int</span> gameTime;</span>
<span id="cb5-225"><a href="#cb5-225" aria-hidden="true"></a>    <span class="dt">bool</span> isGameOver;       <span class="co">// True stands for not over.</span></span>
<span id="cb5-226"><a href="#cb5-226" aria-hidden="true"></a>    <span class="dt">double</span> incTim;</span>
<span id="cb5-227"><a href="#cb5-227" aria-hidden="true"></a>    Ant livant[DefaultAnt.antcnt];</span>
<span id="cb5-228"><a href="#cb5-228" aria-hidden="true"></a>    Stick curstick;</span>
<span id="cb5-229"><a href="#cb5-229" aria-hidden="true"></a>    </span>
<span id="cb5-230"><a href="#cb5-230" aria-hidden="true"></a><span class="kw">public</span>:</span>
<span id="cb5-231"><a href="#cb5-231" aria-hidden="true"></a>    CreepingGame (<span class="dt">int</span> gameTim = <span class="dv">0</span>, <span class="dt">bool</span> isGameOve = <span class="kw">false</span>, <span class="dt">double</span> incT = <span class="dv">1</span>);</span>
<span id="cb5-232"><a href="#cb5-232" aria-hidden="true"></a>    </span>
<span id="cb5-233"><a href="#cb5-233" aria-hidden="true"></a>    <span class="dt">void</span> drivingGame ();</span>
<span id="cb5-234"><a href="#cb5-234" aria-hidden="true"></a>    <span class="dt">void</span> startGame (GameData gData);</span>
<span id="cb5-235"><a href="#cb5-235" aria-hidden="true"></a>    <span class="dt">void</span> detectCollision ();</span>
<span id="cb5-236"><a href="#cb5-236" aria-hidden="true"></a>    <span class="dt">bool</span> isAllDead ();</span>
<span id="cb5-237"><a href="#cb5-237" aria-hidden="true"></a>    </span>
<span id="cb5-238"><a href="#cb5-238" aria-hidden="true"></a>    <span class="dt">bool</span> getGameStatus ();</span>
<span id="cb5-239"><a href="#cb5-239" aria-hidden="true"></a>    <span class="dt">int</span> getGameTime ();</span>
<span id="cb5-240"><a href="#cb5-240" aria-hidden="true"></a>};</span>
<span id="cb5-241"><a href="#cb5-241" aria-hidden="true"></a> </span>
<span id="cb5-242"><a href="#cb5-242" aria-hidden="true"></a><span class="co">/*</span></span>
<span id="cb5-243"><a href="#cb5-243" aria-hidden="true"></a><span class="co"> Post: The Game is initialized.</span></span>
<span id="cb5-244"><a href="#cb5-244" aria-hidden="true"></a><span class="co"> */</span></span>
<span id="cb5-245"><a href="#cb5-245" aria-hidden="true"></a>CreepingGame::CreepingGame (<span class="dt">int</span> gameTim, <span class="dt">bool</span> isGameOve, <span class="dt">double</span> incT)</span>
<span id="cb5-246"><a href="#cb5-246" aria-hidden="true"></a>{</span>
<span id="cb5-247"><a href="#cb5-247" aria-hidden="true"></a>    gameTime = gameTim;</span>
<span id="cb5-248"><a href="#cb5-248" aria-hidden="true"></a>    isGameOver = isGameOve;</span>
<span id="cb5-249"><a href="#cb5-249" aria-hidden="true"></a>    incTim = incT;</span>
<span id="cb5-250"><a href="#cb5-250" aria-hidden="true"></a>}</span>
<span id="cb5-251"><a href="#cb5-251" aria-hidden="true"></a> </span>
<span id="cb5-252"><a href="#cb5-252" aria-hidden="true"></a><span class="co">/*</span></span>
<span id="cb5-253"><a href="#cb5-253" aria-hidden="true"></a><span class="co"> Post: The game&#39;s time is increased by 1 second;</span></span>
<span id="cb5-254"><a href="#cb5-254" aria-hidden="true"></a><span class="co"> */</span></span>
<span id="cb5-255"><a href="#cb5-255" aria-hidden="true"></a><span class="dt">void</span> CreepingGame::drivingGame ()</span>
<span id="cb5-256"><a href="#cb5-256" aria-hidden="true"></a>{</span>
<span id="cb5-257"><a href="#cb5-257" aria-hidden="true"></a>    <span class="cf">while</span> (<span class="dv">1</span>)</span>
<span id="cb5-258"><a href="#cb5-258" aria-hidden="true"></a>    {</span>
<span id="cb5-259"><a href="#cb5-259" aria-hidden="true"></a>        gameTime += incTim;</span>
<span id="cb5-260"><a href="#cb5-260" aria-hidden="true"></a>        </span>
<span id="cb5-261"><a href="#cb5-261" aria-hidden="true"></a>        detectCollision ();</span>
<span id="cb5-262"><a href="#cb5-262" aria-hidden="true"></a>        </span>
<span id="cb5-263"><a href="#cb5-263" aria-hidden="true"></a>        <span class="cf">for</span> (<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; DefaultAnt.antcnt; i++)</span>
<span id="cb5-264"><a href="#cb5-264" aria-hidden="true"></a>            <span class="cf">if</span> (livant[i].isLive ())</span>
<span id="cb5-265"><a href="#cb5-265" aria-hidden="true"></a>                livant[i].creeping ();</span>
<span id="cb5-266"><a href="#cb5-266" aria-hidden="true"></a>        </span>
<span id="cb5-267"><a href="#cb5-267" aria-hidden="true"></a>        <span class="cf">for</span> (<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; DefaultAnt.antcnt; i++)</span>
<span id="cb5-268"><a href="#cb5-268" aria-hidden="true"></a>        {</span>
<span id="cb5-269"><a href="#cb5-269" aria-hidden="true"></a>            <span class="cf">if</span> (livant[i].isLive ())</span>
<span id="cb5-270"><a href="#cb5-270" aria-hidden="true"></a>                <span class="cf">if</span> (curstick.isOut (livant[i]))</span>
<span id="cb5-271"><a href="#cb5-271" aria-hidden="true"></a>                {</span>
<span id="cb5-272"><a href="#cb5-272" aria-hidden="true"></a>                    livant[i].changeLive ();</span>
<span id="cb5-273"><a href="#cb5-273" aria-hidden="true"></a>                    curstick.killAnt ();</span>
<span id="cb5-274"><a href="#cb5-274" aria-hidden="true"></a>                }</span>
<span id="cb5-275"><a href="#cb5-275" aria-hidden="true"></a>        }</span>
<span id="cb5-276"><a href="#cb5-276" aria-hidden="true"></a>        </span>
<span id="cb5-277"><a href="#cb5-277" aria-hidden="true"></a>        <span class="cf">if</span> (isAllDead () == <span class="kw">true</span>)</span>
<span id="cb5-278"><a href="#cb5-278" aria-hidden="true"></a>            <span class="cf">break</span>;</span>
<span id="cb5-279"><a href="#cb5-279" aria-hidden="true"></a>    }</span>
<span id="cb5-280"><a href="#cb5-280" aria-hidden="true"></a>    </span>
<span id="cb5-281"><a href="#cb5-281" aria-hidden="true"></a>    isGameOver = <span class="kw">true</span>;</span>
<span id="cb5-282"><a href="#cb5-282" aria-hidden="true"></a>}</span>
<span id="cb5-283"><a href="#cb5-283" aria-hidden="true"></a> </span>
<span id="cb5-284"><a href="#cb5-284" aria-hidden="true"></a><span class="co">/*</span></span>
<span id="cb5-285"><a href="#cb5-285" aria-hidden="true"></a><span class="co"> Post: The game is started and the stick and ants are initialized.</span></span>
<span id="cb5-286"><a href="#cb5-286" aria-hidden="true"></a><span class="co"> */</span></span>
<span id="cb5-287"><a href="#cb5-287" aria-hidden="true"></a><span class="dt">void</span> CreepingGame::startGame (GameData gData)</span>
<span id="cb5-288"><a href="#cb5-288" aria-hidden="true"></a>{</span>
<span id="cb5-289"><a href="#cb5-289" aria-hidden="true"></a>    curstick.setStick (DefaultStick.leftEnd, DefaultStick.rightEnd);</span>
<span id="cb5-290"><a href="#cb5-290" aria-hidden="true"></a>    </span>
<span id="cb5-291"><a href="#cb5-291" aria-hidden="true"></a>    <span class="cf">for</span> (<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; DefaultAnt.antcnt; i ++)</span>
<span id="cb5-292"><a href="#cb5-292" aria-hidden="true"></a>        livant[i].setAnt (i, DefaultAnt.speed, gData.antDirection[i], DefaultAnt.loc[i]);</span>
<span id="cb5-293"><a href="#cb5-293" aria-hidden="true"></a>    </span>
<span id="cb5-294"><a href="#cb5-294" aria-hidden="true"></a>}</span>
<span id="cb5-295"><a href="#cb5-295" aria-hidden="true"></a> </span>
<span id="cb5-296"><a href="#cb5-296" aria-hidden="true"></a><span class="co">/*</span></span>
<span id="cb5-297"><a href="#cb5-297" aria-hidden="true"></a><span class="co"> Post: Collision are detected and ants&#39; directions are changed.</span></span>
<span id="cb5-298"><a href="#cb5-298" aria-hidden="true"></a><span class="co"> */</span></span>
<span id="cb5-299"><a href="#cb5-299" aria-hidden="true"></a><span class="dt">void</span> CreepingGame::detectCollision ()</span>
<span id="cb5-300"><a href="#cb5-300" aria-hidden="true"></a>{</span>
<span id="cb5-301"><a href="#cb5-301" aria-hidden="true"></a>    <span class="dt">int</span> tmpantid = -<span class="dv">1</span>;</span>
<span id="cb5-302"><a href="#cb5-302" aria-hidden="true"></a>    <span class="cf">for</span> (<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; DefaultAnt.antcnt; i ++)</span>
<span id="cb5-303"><a href="#cb5-303" aria-hidden="true"></a>    {</span>
<span id="cb5-304"><a href="#cb5-304" aria-hidden="true"></a>        tmpantid = -<span class="dv">1</span>;</span>
<span id="cb5-305"><a href="#cb5-305" aria-hidden="true"></a>        <span class="cf">if</span> (livant[i].isLive ())</span>
<span id="cb5-306"><a href="#cb5-306" aria-hidden="true"></a>        {</span>
<span id="cb5-307"><a href="#cb5-307" aria-hidden="true"></a>            <span class="cf">if</span> (livant[i].getDirection () == <span class="kw">true</span>)</span>
<span id="cb5-308"><a href="#cb5-308" aria-hidden="true"></a>            {</span>
<span id="cb5-309"><a href="#cb5-309" aria-hidden="true"></a>                <span class="cf">for</span> (<span class="dt">int</span> j = <span class="dv">0</span>; j &lt; DefaultAnt.antcnt; j ++)</span>
<span id="cb5-310"><a href="#cb5-310" aria-hidden="true"></a>                    <span class="cf">if</span> (livant[j].isLive ())</span>
<span id="cb5-311"><a href="#cb5-311" aria-hidden="true"></a>                    {</span>
<span id="cb5-312"><a href="#cb5-312" aria-hidden="true"></a>                        <span class="cf">if</span> (tmpantid == -<span class="dv">1</span>)</span>
<span id="cb5-313"><a href="#cb5-313" aria-hidden="true"></a>                        {</span>
<span id="cb5-314"><a href="#cb5-314" aria-hidden="true"></a>                            <span class="cf">if</span> (livant[j].getLocation () &gt; livant[i].getLocation ())</span>
<span id="cb5-315"><a href="#cb5-315" aria-hidden="true"></a>                                tmpantid = j;</span>
<span id="cb5-316"><a href="#cb5-316" aria-hidden="true"></a>                        }</span>
<span id="cb5-317"><a href="#cb5-317" aria-hidden="true"></a>                        <span class="cf">else</span></span>
<span id="cb5-318"><a href="#cb5-318" aria-hidden="true"></a>                        {</span>
<span id="cb5-319"><a href="#cb5-319" aria-hidden="true"></a>                            <span class="cf">if</span> (livant[j].getLocation () &gt; livant[i].getLocation () &amp;&amp; livant[j].getLocation () &lt; livant[tmpantid].getLocation ())</span>
<span id="cb5-320"><a href="#cb5-320" aria-hidden="true"></a>                                tmpantid = j;</span>
<span id="cb5-321"><a href="#cb5-321" aria-hidden="true"></a>                        }</span>
<span id="cb5-322"><a href="#cb5-322" aria-hidden="true"></a>                    }</span>
<span id="cb5-323"><a href="#cb5-323" aria-hidden="true"></a>                <span class="cf">if</span> (tmpantid != -<span class="dv">1</span>)</span>
<span id="cb5-324"><a href="#cb5-324" aria-hidden="true"></a>                    <span class="cf">if</span> (abs (livant[i].getLocation () - livant[tmpantid].getLocation ()) &lt;= (livant[i].getVelocity () + livant[tmpantid].getVelocity ()))</span>
<span id="cb5-325"><a href="#cb5-325" aria-hidden="true"></a>                    {</span>
<span id="cb5-326"><a href="#cb5-326" aria-hidden="true"></a>                        livant[i].changeDirection ();</span>
<span id="cb5-327"><a href="#cb5-327" aria-hidden="true"></a>                        livant[tmpantid].changeDirection ();</span>
<span id="cb5-328"><a href="#cb5-328" aria-hidden="true"></a>                    }</span>
<span id="cb5-329"><a href="#cb5-329" aria-hidden="true"></a>            }</span>
<span id="cb5-330"><a href="#cb5-330" aria-hidden="true"></a>            <span class="cf">else</span></span>
<span id="cb5-331"><a href="#cb5-331" aria-hidden="true"></a>            {</span>
<span id="cb5-332"><a href="#cb5-332" aria-hidden="true"></a>                <span class="cf">for</span> (<span class="dt">int</span> j = <span class="dv">0</span>; j &lt; DefaultAnt.antcnt; j ++)</span>
<span id="cb5-333"><a href="#cb5-333" aria-hidden="true"></a>                    <span class="cf">if</span> (livant[j].isLive ())</span>
<span id="cb5-334"><a href="#cb5-334" aria-hidden="true"></a>                    {</span>
<span id="cb5-335"><a href="#cb5-335" aria-hidden="true"></a>                        <span class="cf">if</span> (tmpantid == -<span class="dv">1</span>)</span>
<span id="cb5-336"><a href="#cb5-336" aria-hidden="true"></a>                        {</span>
<span id="cb5-337"><a href="#cb5-337" aria-hidden="true"></a>                            <span class="cf">if</span> (livant[j].getLocation () &lt; livant[i].getLocation ())</span>
<span id="cb5-338"><a href="#cb5-338" aria-hidden="true"></a>                                tmpantid = j;</span>
<span id="cb5-339"><a href="#cb5-339" aria-hidden="true"></a>                        }</span>
<span id="cb5-340"><a href="#cb5-340" aria-hidden="true"></a>                        <span class="cf">else</span></span>
<span id="cb5-341"><a href="#cb5-341" aria-hidden="true"></a>                        {</span>
<span id="cb5-342"><a href="#cb5-342" aria-hidden="true"></a>                            <span class="cf">if</span> (livant[j].getLocation () &lt; livant[i].getLocation () &amp;&amp; livant[j].getLocation () &gt; livant[tmpantid].getLocation ())</span>
<span id="cb5-343"><a href="#cb5-343" aria-hidden="true"></a>                                tmpantid = j;</span>
<span id="cb5-344"><a href="#cb5-344" aria-hidden="true"></a>                        }</span>
<span id="cb5-345"><a href="#cb5-345" aria-hidden="true"></a>                    }</span>
<span id="cb5-346"><a href="#cb5-346" aria-hidden="true"></a>                <span class="cf">if</span> (tmpantid != -<span class="dv">1</span>)</span>
<span id="cb5-347"><a href="#cb5-347" aria-hidden="true"></a>                    <span class="cf">if</span> (abs (livant[i].getLocation () - livant[tmpantid].getLocation ()) &lt;= (livant[i].getVelocity () + livant[tmpantid].getVelocity ()))</span>
<span id="cb5-348"><a href="#cb5-348" aria-hidden="true"></a>                    {</span>
<span id="cb5-349"><a href="#cb5-349" aria-hidden="true"></a>                        livant[i].changeDirection ();</span>
<span id="cb5-350"><a href="#cb5-350" aria-hidden="true"></a>                        livant[tmpantid].changeDirection ();</span>
<span id="cb5-351"><a href="#cb5-351" aria-hidden="true"></a>                    }</span>
<span id="cb5-352"><a href="#cb5-352" aria-hidden="true"></a>            }</span>
<span id="cb5-353"><a href="#cb5-353" aria-hidden="true"></a>        }</span>
<span id="cb5-354"><a href="#cb5-354" aria-hidden="true"></a>    }</span>
<span id="cb5-355"><a href="#cb5-355" aria-hidden="true"></a>}</span>
<span id="cb5-356"><a href="#cb5-356" aria-hidden="true"></a> </span>
<span id="cb5-357"><a href="#cb5-357" aria-hidden="true"></a><span class="co">/*</span></span>
<span id="cb5-358"><a href="#cb5-358" aria-hidden="true"></a><span class="co"> Post: The function judges whether all the ants are dead.</span></span>
<span id="cb5-359"><a href="#cb5-359" aria-hidden="true"></a><span class="co"> */</span></span>
<span id="cb5-360"><a href="#cb5-360" aria-hidden="true"></a><span class="dt">bool</span> CreepingGame::isAllDead ()</span>
<span id="cb5-361"><a href="#cb5-361" aria-hidden="true"></a>{</span>
<span id="cb5-362"><a href="#cb5-362" aria-hidden="true"></a>    <span class="cf">if</span> (curstick.getLivAntCnt () &lt;= <span class="dv">0</span>)</span>
<span id="cb5-363"><a href="#cb5-363" aria-hidden="true"></a>        <span class="cf">return</span> <span class="kw">true</span>;</span>
<span id="cb5-364"><a href="#cb5-364" aria-hidden="true"></a>    <span class="cf">return</span> <span class="kw">false</span>;</span>
<span id="cb5-365"><a href="#cb5-365" aria-hidden="true"></a>}</span>
<span id="cb5-366"><a href="#cb5-366" aria-hidden="true"></a> </span>
<span id="cb5-367"><a href="#cb5-367" aria-hidden="true"></a><span class="co">/*</span></span>
<span id="cb5-368"><a href="#cb5-368" aria-hidden="true"></a><span class="co"> Post: The status of the game is returned.</span></span>
<span id="cb5-369"><a href="#cb5-369" aria-hidden="true"></a><span class="co"> */</span></span>
<span id="cb5-370"><a href="#cb5-370" aria-hidden="true"></a><span class="dt">bool</span> CreepingGame::getGameStatus ()</span>
<span id="cb5-371"><a href="#cb5-371" aria-hidden="true"></a>{</span>
<span id="cb5-372"><a href="#cb5-372" aria-hidden="true"></a>    <span class="cf">return</span> isGameOver;</span>
<span id="cb5-373"><a href="#cb5-373" aria-hidden="true"></a>}</span>
<span id="cb5-374"><a href="#cb5-374" aria-hidden="true"></a> </span>
<span id="cb5-375"><a href="#cb5-375" aria-hidden="true"></a><span class="co">/*</span></span>
<span id="cb5-376"><a href="#cb5-376" aria-hidden="true"></a><span class="co"> Post: The time of the game is returned.</span></span>
<span id="cb5-377"><a href="#cb5-377" aria-hidden="true"></a><span class="co"> */</span></span>
<span id="cb5-378"><a href="#cb5-378" aria-hidden="true"></a><span class="dt">int</span> CreepingGame::getGameTime ()</span>
<span id="cb5-379"><a href="#cb5-379" aria-hidden="true"></a>{</span>
<span id="cb5-380"><a href="#cb5-380" aria-hidden="true"></a>    <span class="cf">return</span> gameTime;</span>
<span id="cb5-381"><a href="#cb5-381" aria-hidden="true"></a>}</span>
<span id="cb5-382"><a href="#cb5-382" aria-hidden="true"></a> </span>
<span id="cb5-383"><a href="#cb5-383" aria-hidden="true"></a> </span>
<span id="cb5-384"><a href="#cb5-384" aria-hidden="true"></a><span class="co">/*</span></span>
<span id="cb5-385"><a href="#cb5-385" aria-hidden="true"></a><span class="co"> The GameRoom class.</span></span>
<span id="cb5-386"><a href="#cb5-386" aria-hidden="true"></a><span class="co"> */</span></span>
<span id="cb5-387"><a href="#cb5-387" aria-hidden="true"></a><span class="kw">class</span> GameRoom</span>
<span id="cb5-388"><a href="#cb5-388" aria-hidden="true"></a>{</span>
<span id="cb5-389"><a href="#cb5-389" aria-hidden="true"></a><span class="kw">private</span>:</span>
<span id="cb5-390"><a href="#cb5-390" aria-hidden="true"></a>    <span class="dt">int</span> incTime;</span>
<span id="cb5-391"><a href="#cb5-391" aria-hidden="true"></a>    GameData stGameData[DefaultAnt.GroupCnt];</span>
<span id="cb5-392"><a href="#cb5-392" aria-hidden="true"></a>    </span>
<span id="cb5-393"><a href="#cb5-393" aria-hidden="true"></a><span class="kw">public</span>:</span>
<span id="cb5-394"><a href="#cb5-394" aria-hidden="true"></a>    GameRoom ();</span>
<span id="cb5-395"><a href="#cb5-395" aria-hidden="true"></a>    </span>
<span id="cb5-396"><a href="#cb5-396" aria-hidden="true"></a>    <span class="dt">void</span> buildDirections ();</span>
<span id="cb5-397"><a href="#cb5-397" aria-hidden="true"></a>    <span class="dt">void</span> playGames ();</span>
<span id="cb5-398"><a href="#cb5-398" aria-hidden="true"></a>    <span class="dt">void</span> start ();</span>
<span id="cb5-399"><a href="#cb5-399" aria-hidden="true"></a>    </span>
<span id="cb5-400"><a href="#cb5-400" aria-hidden="true"></a>};</span>
<span id="cb5-401"><a href="#cb5-401" aria-hidden="true"></a> </span>
<span id="cb5-402"><a href="#cb5-402" aria-hidden="true"></a><span class="co">/*</span></span>
<span id="cb5-403"><a href="#cb5-403" aria-hidden="true"></a><span class="co"> Post: The function initializes the class.</span></span>
<span id="cb5-404"><a href="#cb5-404" aria-hidden="true"></a><span class="co"> */</span></span>
<span id="cb5-405"><a href="#cb5-405" aria-hidden="true"></a>GameRoom::GameRoom ()</span>
<span id="cb5-406"><a href="#cb5-406" aria-hidden="true"></a>{</span>
<span id="cb5-407"><a href="#cb5-407" aria-hidden="true"></a>    incTime = <span class="dv">1</span>;</span>
<span id="cb5-408"><a href="#cb5-408" aria-hidden="true"></a>    </span>
<span id="cb5-409"><a href="#cb5-409" aria-hidden="true"></a>    <span class="cf">for</span> (<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; DefaultAnt.GroupCnt; i ++)</span>
<span id="cb5-410"><a href="#cb5-410" aria-hidden="true"></a>        stGameData[i].gameTime = <span class="dv">0</span>;</span>
<span id="cb5-411"><a href="#cb5-411" aria-hidden="true"></a>}</span>
<span id="cb5-412"><a href="#cb5-412" aria-hidden="true"></a> </span>
<span id="cb5-413"><a href="#cb5-413" aria-hidden="true"></a><span class="co">/*</span></span>
<span id="cb5-414"><a href="#cb5-414" aria-hidden="true"></a><span class="co"> Post: Every situation is generalized.</span></span>
<span id="cb5-415"><a href="#cb5-415" aria-hidden="true"></a><span class="co"> */</span></span>
<span id="cb5-416"><a href="#cb5-416" aria-hidden="true"></a><span class="dt">void</span> GameRoom::buildDirections ()</span>
<span id="cb5-417"><a href="#cb5-417" aria-hidden="true"></a>{</span>
<span id="cb5-418"><a href="#cb5-418" aria-hidden="true"></a>    <span class="cf">for</span> (<span class="dt">int</span> divis = <span class="dv">0</span>; divis &lt; DefaultAnt.antcnt; divis ++)</span>
<span id="cb5-419"><a href="#cb5-419" aria-hidden="true"></a>    {</span>
<span id="cb5-420"><a href="#cb5-420" aria-hidden="true"></a>        <span class="dt">int</span> tmpdivi = pow (<span class="dv">2</span>, divis);</span>
<span id="cb5-421"><a href="#cb5-421" aria-hidden="true"></a>        <span class="cf">for</span> (<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; DefaultAnt.GroupCnt; i += <span class="dv">2</span> * tmpdivi)</span>
<span id="cb5-422"><a href="#cb5-422" aria-hidden="true"></a>        {</span>
<span id="cb5-423"><a href="#cb5-423" aria-hidden="true"></a>            <span class="cf">for</span> (<span class="dt">int</span> j = i; j &lt; tmpdivi; j ++)</span>
<span id="cb5-424"><a href="#cb5-424" aria-hidden="true"></a>                stGameData[j].antDirection[divis] = <span class="kw">true</span>;</span>
<span id="cb5-425"><a href="#cb5-425" aria-hidden="true"></a>            <span class="cf">for</span> (<span class="dt">int</span> p = i + tmpdivi; p &lt; i + <span class="dv">2</span> * tmpdivi; p ++)</span>
<span id="cb5-426"><a href="#cb5-426" aria-hidden="true"></a>                stGameData[p].antDirection[divis] = <span class="kw">false</span>;</span>
<span id="cb5-427"><a href="#cb5-427" aria-hidden="true"></a>        }</span>
<span id="cb5-428"><a href="#cb5-428" aria-hidden="true"></a>    }</span>
<span id="cb5-429"><a href="#cb5-429" aria-hidden="true"></a>}</span>
<span id="cb5-430"><a href="#cb5-430" aria-hidden="true"></a> </span>
<span id="cb5-431"><a href="#cb5-431" aria-hidden="true"></a><span class="co">/*</span></span>
<span id="cb5-432"><a href="#cb5-432" aria-hidden="true"></a><span class="co"> Post: Games are played.</span></span>
<span id="cb5-433"><a href="#cb5-433" aria-hidden="true"></a><span class="co"> */</span></span>
<span id="cb5-434"><a href="#cb5-434" aria-hidden="true"></a><span class="dt">void</span> GameRoom::playGames ()</span>
<span id="cb5-435"><a href="#cb5-435" aria-hidden="true"></a>{</span>
<span id="cb5-436"><a href="#cb5-436" aria-hidden="true"></a>    CreepingGame creep[DefaultAnt.GroupCnt];</span>
<span id="cb5-437"><a href="#cb5-437" aria-hidden="true"></a>    <span class="cf">for</span> (<span class="dt">int</span> i = <span class="dv">0</span>; i &lt; DefaultAnt.GroupCnt; i ++)</span>
<span id="cb5-438"><a href="#cb5-438" aria-hidden="true"></a>    {</span>
<span id="cb5-439"><a href="#cb5-439" aria-hidden="true"></a>        creep[i].startGame (stGameData[i]);</span>
<span id="cb5-440"><a href="#cb5-440" aria-hidden="true"></a>        creep[i].drivingGame();</span>
<span id="cb5-441"><a href="#cb5-441" aria-hidden="true"></a>        stGameData[i].gameTime = creep[i].getGameTime ();</span>
<span id="cb5-442"><a href="#cb5-442" aria-hidden="true"></a>    }</span>
<span id="cb5-443"><a href="#cb5-443" aria-hidden="true"></a>    </span>
<span id="cb5-444"><a href="#cb5-444" aria-hidden="true"></a>    <span class="dt">int</span> maxtime = <span class="dv">0</span>;</span>
<span id="cb5-445"><a href="#cb5-445" aria-hidden="true"></a>    <span class="dt">int</span> mintime = stGameData[<span class="dv">0</span>].gameTime;</span>
<span id="cb5-446"><a href="#cb5-446" aria-hidden="true"></a>    </span>
<span id="cb5-447"><a href="#cb5-447" aria-hidden="true"></a>    <span class="cf">for</span> (<span class="dt">int</span> j = <span class="dv">0</span>; j &lt; DefaultAnt.GroupCnt; j ++)</span>
<span id="cb5-448"><a href="#cb5-448" aria-hidden="true"></a>    {</span>
<span id="cb5-449"><a href="#cb5-449" aria-hidden="true"></a>        <span class="cf">if</span> (stGameData[j].gameTime &gt; maxtime)</span>
<span id="cb5-450"><a href="#cb5-450" aria-hidden="true"></a>            maxtime = stGameData[j].gameTime;</span>
<span id="cb5-451"><a href="#cb5-451" aria-hidden="true"></a>        <span class="cf">if</span> (stGameData[j].gameTime &lt; mintime)</span>
<span id="cb5-452"><a href="#cb5-452" aria-hidden="true"></a>            mintime = stGameData[j].gameTime;</span>
<span id="cb5-453"><a href="#cb5-453" aria-hidden="true"></a>    }</span>
<span id="cb5-454"><a href="#cb5-454" aria-hidden="true"></a>    </span>
<span id="cb5-455"><a href="#cb5-455" aria-hidden="true"></a>    <span class="bu">std::</span>cout &lt;&lt; <span class="st">&quot;Max Time is &quot;</span> &lt;&lt; maxtime &lt;&lt; <span class="bu">std::</span>endl;</span>
<span id="cb5-456"><a href="#cb5-456" aria-hidden="true"></a>    <span class="bu">std::</span>cout &lt;&lt; <span class="st">&quot;Min Time is &quot;</span> &lt;&lt; mintime &lt;&lt; <span class="bu">std::</span>endl;</span>
<span id="cb5-457"><a href="#cb5-457" aria-hidden="true"></a>}</span>
<span id="cb5-458"><a href="#cb5-458" aria-hidden="true"></a> </span>
<span id="cb5-459"><a href="#cb5-459" aria-hidden="true"></a><span class="co">/*</span></span>
<span id="cb5-460"><a href="#cb5-460" aria-hidden="true"></a><span class="co"> Post: Game starts.</span></span>
<span id="cb5-461"><a href="#cb5-461" aria-hidden="true"></a><span class="co"> */</span></span>
<span id="cb5-462"><a href="#cb5-462" aria-hidden="true"></a><span class="dt">void</span> GameRoom::start ()</span>
<span id="cb5-463"><a href="#cb5-463" aria-hidden="true"></a>{</span>
<span id="cb5-464"><a href="#cb5-464" aria-hidden="true"></a>    <span class="bu">std::</span>cout &lt;&lt; <span class="st">&quot;Game started.&quot;</span> &lt;&lt; <span class="bu">std::</span>endl;</span>
<span id="cb5-465"><a href="#cb5-465" aria-hidden="true"></a>    buildDirections ();</span>
<span id="cb5-466"><a href="#cb5-466" aria-hidden="true"></a>    playGames ();</span>
<span id="cb5-467"><a href="#cb5-467" aria-hidden="true"></a>}</span>
<span id="cb5-468"><a href="#cb5-468" aria-hidden="true"></a> </span>
<span id="cb5-469"><a href="#cb5-469" aria-hidden="true"></a><span class="pp">#endif </span><span class="co">/* Ant_h */</span></span></code></pre></div>
<div class="sourceCode" id="cb6"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="co">//</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="co">//  main.cpp</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a><span class="co">//  Ant</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a><span class="co">//</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a><span class="co">//</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a> </span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true"></a><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true"></a><span class="pp">#include </span><span class="im">&quot;Ant.h&quot;</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true"></a> </span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true"></a><span class="dt">int</span> main() {</span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true"></a>    GameRoom room;</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true"></a>    room.start ();</span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true"></a>}</span></code></pre></div>]]></description>
    <pubDate>Tue, 2 May 2023 23:19:08 +0800</pubDate>
  </item>
   
  <item>
    <title><![CDATA[私について]]></title>
    <link>https://pikapikapikaori.github.io/pikapikapi-blog/#//#/jp/README</link>
    <guid isPermaLink="false">https://pikapikapikaori.github.io/pikapikapi-blog/#//#/jp/README</guid>
    <description><![CDATA[<h1 id="私について">私について</h1>
<!-- panels:start -->
<!-- div:left-panel -->
<blockquote>
<p>ひるもなほ<br />
星みるひとの<br />
目にも似る<br />
さびしきつかれ<br />
早春のたび</p>
</blockquote>
<p>私のブログへようこそ。フルスタックエンジニアを目指して勉強中です。</p>
<!-- div:right-panel -->
<div class="mainPageRightPanelContainer">
<pre><code>&lt;img src=&quot;./_media/kaori-logo.JPG&quot; class=&quot;mainPageAboutMeAvatar&quot; /&gt;
&lt;h4 class=&quot;mainPageAboutMeTitle&quot;&gt;リエキヨウ&lt;/h4&gt;
&lt;p class=&quot;mainPageAboutMeDescription&quot;&gt;李亦杨 / Jeff Li&lt;/p&gt;
&lt;div class=&quot;mainPageAboutMeLinks&quot;&gt;
    &lt;a href=&quot;https://github.com/pikapikapikaori/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
        &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
        &lt;svg width=&quot;20px&quot; height=&quot;20px&quot; stroke-width=&quot;1.5&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; color=&quot;#000000&quot;&gt;
            &lt;path d=&quot;M16 22.027v-2.87a3.37 3.37 0 00-.94-2.61c3.14-.35 6.44-1.54 6.44-7a5.44 5.44 0 00-1.5-3.75 5.07 5.07 0 00-.09-3.77s-1.18-.35-3.91 1.48a13.38 13.38 0 00-7 0c-2.73-1.83-3.91-1.48-3.91-1.48A5.07 5.07 0 005 5.797a5.44 5.44 0 00-1.5 3.78c0 5.42 3.3 6.61 6.44 7a3.37 3.37 0 00-.94 2.58v2.87M9 20.027c-3 .973-5.5 0-7-3&quot; stroke=&quot;#000000&quot; stroke-width=&quot;1.5&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;&gt;&lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    &lt;a href=&quot;mailto:Lyy8759@outlook.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
        &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
        &lt;svg width=&quot;20px&quot; height=&quot;20px&quot; stroke-width=&quot;1.5&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; color=&quot;#000000&quot;&gt;
            &lt;path d=&quot;M7 9l5 3.5L17 9&quot; stroke=&quot;#000000&quot; stroke-width=&quot;1.5&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;&gt;&lt;/path&gt;
            &lt;path d=&quot;M2 17V7a2 2 0 012-2h16a2 2 0 012 2v10a2 2 0 01-2 2H4a2 2 0 01-2-2z&quot; stroke=&quot;#000000&quot; stroke-width=&quot;1.5&quot;&gt;&lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    &lt;/a&gt;
    &lt;a href=&quot;https://pikapikapikaori.github.io/pikapikapi-blog/pikapikapi-blog-rss.xml&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
        &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
        &lt;svg width=&quot;20px&quot; height=&quot;20px&quot; stroke-width=&quot;1.5&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; color=&quot;#000000&quot;&gt;
            &lt;path d=&quot;M12 19c0-4.2-2.8-7-7-7M19 19c0-8.4-5.6-14-14-14M5 19.01l.01-.011&quot; stroke=&quot;#000000&quot; stroke-width=&quot;1.5&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;&gt;&lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
&lt;/div&gt;</code></pre>
</div>
<div class="mainPageRightPanelContainer">
<pre><code>&lt;h4 class=&quot;mainPageAboutMeTitle&quot;&gt;サイト情報&lt;/h4&gt;
&lt;p class=&quot;mainPageAboutMeBadges&quot;&gt;
    &lt;img src=&quot;https://img.shields.io/github/license/pikapikapikaori/pikapikapi-blog&quot; alt=&quot;license&quot; height=&quot;17px&quot;&gt;
    &lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/pikapikapikaori/pikapikapi-blog/rss.yml?label=rss%20build&quot; alt=&quot;rss build&quot; height=&quot;17px&quot;&gt;
    &lt;img src=&quot;https://img.shields.io/github/last-commit/pikapikapikaori/pikapikapi-blog?label=last%20updated&quot; alt=&quot;last updated&quot; height=&quot;17px&quot;&gt;
&lt;/p&gt;
&lt;div class=&quot;mainPageAboutMeImageLinks&quot;&gt;
    &lt;a href=&quot;https://github.com/pikapikapikaori/pikapikapi-blog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
        &lt;img src=&quot;https://github-readme-stats.vercel.app/api/pin/?username=pikapikapikaori&amp;repo=pikapikapi-blog&amp;show_owner=true&amp;border_color=00000000&amp;bg_color=00000000&amp;theme=buefy&quot; alt=&quot;picture&quot; class=&quot;dynamicPictureAccordingToThemeMode&quot;&gt;
    &lt;/a&gt;
&lt;/div&gt;</code></pre>
</div>
<!-- panels:end -->]]></description>
    <pubDate>Tue, 2 May 2023 21:04:07 +0800</pubDate>
  </item>
   
  <item>
    <title><![CDATA[About Me]]></title>
    <link>https://pikapikapikaori.github.io/pikapikapi-blog/#//#/en-us/README</link>
    <guid isPermaLink="false">https://pikapikapikaori.github.io/pikapikapi-blog/#//#/en-us/README</guid>
    <description><![CDATA[<h1 id="about-me">About Me</h1>
<!-- panels:start -->
<!-- div:left-panel -->
<blockquote>
<p>Darkling I listen; and for many a time<br />
I have been half in love with easeful Death,<br />
Called him soft names in many a mused rhyme,<br />
To take into the air my quiet breath;<br />
Now more than ever seems it rich to die,<br />
To cease upon the midnight with no pain,<br />
While thou art pouring forth thy soul abroad<br />
In such an ecstasy!<br />
Still wouldst thou sing, and I have ears in vain –<br />
To thy high requiem become a sod.</p>
</blockquote>
<p>Welcome to my blog. I am currently studying to become a good full-stack engineer.</p>
<!-- div:right-panel -->
<div class="mainPageRightPanelContainer">
<pre><code>&lt;img src=&quot;./_media/kaori-logo.JPG&quot; class=&quot;mainPageAboutMeAvatar&quot; /&gt;
&lt;h4 class=&quot;mainPageAboutMeTitle&quot;&gt;Jeff Li&lt;/h4&gt;
&lt;p class=&quot;mainPageAboutMeDescription&quot;&gt;李亦杨 / リエキヨウ&lt;/p&gt;
&lt;div class=&quot;mainPageAboutMeLinks&quot;&gt;
    &lt;a href=&quot;https://github.com/pikapikapikaori/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
        &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
        &lt;svg width=&quot;20px&quot; height=&quot;20px&quot; stroke-width=&quot;1.5&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; color=&quot;#000000&quot;&gt;
            &lt;path d=&quot;M16 22.027v-2.87a3.37 3.37 0 00-.94-2.61c3.14-.35 6.44-1.54 6.44-7a5.44 5.44 0 00-1.5-3.75 5.07 5.07 0 00-.09-3.77s-1.18-.35-3.91 1.48a13.38 13.38 0 00-7 0c-2.73-1.83-3.91-1.48-3.91-1.48A5.07 5.07 0 005 5.797a5.44 5.44 0 00-1.5 3.78c0 5.42 3.3 6.61 6.44 7a3.37 3.37 0 00-.94 2.58v2.87M9 20.027c-3 .973-5.5 0-7-3&quot; stroke=&quot;#000000&quot; stroke-width=&quot;1.5&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;&gt;&lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    &lt;a href=&quot;mailto:Lyy8759@outlook.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
        &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
        &lt;svg width=&quot;20px&quot; height=&quot;20px&quot; stroke-width=&quot;1.5&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; color=&quot;#000000&quot;&gt;
            &lt;path d=&quot;M7 9l5 3.5L17 9&quot; stroke=&quot;#000000&quot; stroke-width=&quot;1.5&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;&gt;&lt;/path&gt;
            &lt;path d=&quot;M2 17V7a2 2 0 012-2h16a2 2 0 012 2v10a2 2 0 01-2 2H4a2 2 0 01-2-2z&quot; stroke=&quot;#000000&quot; stroke-width=&quot;1.5&quot;&gt;&lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    &lt;/a&gt;
    &lt;a href=&quot;https://pikapikapikaori.github.io/pikapikapi-blog/pikapikapi-blog-rss.xml&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
        &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
        &lt;svg width=&quot;20px&quot; height=&quot;20px&quot; stroke-width=&quot;1.5&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; color=&quot;#000000&quot;&gt;
            &lt;path d=&quot;M12 19c0-4.2-2.8-7-7-7M19 19c0-8.4-5.6-14-14-14M5 19.01l.01-.011&quot; stroke=&quot;#000000&quot; stroke-width=&quot;1.5&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;&gt;&lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
&lt;/div&gt;</code></pre>
</div>
<div class="mainPageRightPanelContainer">
<pre><code>&lt;h4 class=&quot;mainPageAboutMeTitle&quot;&gt;About This Site&lt;/h4&gt;
&lt;p class=&quot;mainPageAboutMeBadges&quot;&gt;
    &lt;img src=&quot;https://img.shields.io/github/license/pikapikapikaori/pikapikapi-blog&quot; alt=&quot;license&quot; height=&quot;17px&quot;&gt;
    &lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/pikapikapikaori/pikapikapi-blog/rss.yml?label=rss%20build&quot; alt=&quot;rss build&quot; height=&quot;17px&quot;&gt;
    &lt;img src=&quot;https://img.shields.io/github/last-commit/pikapikapikaori/pikapikapi-blog?label=last%20updated&quot; alt=&quot;last updated&quot; height=&quot;17px&quot;&gt;
&lt;/p&gt;
&lt;div class=&quot;mainPageAboutMeImageLinks&quot;&gt;
    &lt;a href=&quot;https://github.com/pikapikapikaori/pikapikapi-blog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
        &lt;img src=&quot;https://github-readme-stats.vercel.app/api/pin/?username=pikapikapikaori&amp;repo=pikapikapi-blog&amp;show_owner=true&amp;border_color=00000000&amp;bg_color=00000000&amp;theme=buefy&quot; alt=&quot;picture&quot; class=&quot;dynamicPictureAccordingToThemeMode&quot;&gt;
    &lt;/a&gt;
&lt;/div&gt;</code></pre>
</div>
<!-- panels:end -->]]></description>
    <pubDate>Tue, 2 May 2023 21:04:07 +0800</pubDate>
  </item>
   
  <item>
    <title><![CDATA[关于我]]></title>
    <link>https://pikapikapikaori.github.io/pikapikapi-blog/#//#/README</link>
    <guid isPermaLink="false">https://pikapikapikaori.github.io/pikapikapi-blog/#//#/README</guid>
    <description><![CDATA[<h1 id="关于我">关于我</h1>
<!-- panels:start -->
<!-- div:left-panel -->
<blockquote>
<p>式微，式微，胡不归？微君之故，胡为乎中露？<br />
式微，式微，胡不归？微君之躬，胡为乎泥中？</p>
</blockquote>
<p>欢迎访问我的博客。我目前大体上以全栈工程师为目标学习中。</p>
<!-- div:right-panel -->
<div class="mainPageRightPanelContainer">
<pre><code>&lt;img src=&quot;./_media/kaori-logo.JPG&quot; class=&quot;mainPageAboutMeAvatar&quot; /&gt;
&lt;h4 class=&quot;mainPageAboutMeTitle&quot;&gt;李亦杨&lt;/h4&gt;
&lt;p class=&quot;mainPageAboutMeDescription&quot;&gt;リエキヨウ / Jeff Li&lt;/p&gt;
&lt;div class=&quot;mainPageAboutMeLinks&quot;&gt;
    &lt;a href=&quot;https://github.com/pikapikapikaori/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
        &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
        &lt;svg width=&quot;20px&quot; height=&quot;20px&quot; stroke-width=&quot;1.5&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; color=&quot;#000000&quot;&gt;
            &lt;path d=&quot;M16 22.027v-2.87a3.37 3.37 0 00-.94-2.61c3.14-.35 6.44-1.54 6.44-7a5.44 5.44 0 00-1.5-3.75 5.07 5.07 0 00-.09-3.77s-1.18-.35-3.91 1.48a13.38 13.38 0 00-7 0c-2.73-1.83-3.91-1.48-3.91-1.48A5.07 5.07 0 005 5.797a5.44 5.44 0 00-1.5 3.78c0 5.42 3.3 6.61 6.44 7a3.37 3.37 0 00-.94 2.58v2.87M9 20.027c-3 .973-5.5 0-7-3&quot; stroke=&quot;#000000&quot; stroke-width=&quot;1.5&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;&gt;&lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    &lt;a href=&quot;mailto:Lyy8759@outlook.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
        &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
        &lt;svg width=&quot;20px&quot; height=&quot;20px&quot; stroke-width=&quot;1.5&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; color=&quot;#000000&quot;&gt;
            &lt;path d=&quot;M7 9l5 3.5L17 9&quot; stroke=&quot;#000000&quot; stroke-width=&quot;1.5&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;&gt;&lt;/path&gt;
            &lt;path d=&quot;M2 17V7a2 2 0 012-2h16a2 2 0 012 2v10a2 2 0 01-2 2H4a2 2 0 01-2-2z&quot; stroke=&quot;#000000&quot; stroke-width=&quot;1.5&quot;&gt;&lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
    &lt;/a&gt;
    &lt;a href=&quot;https://pikapikapikaori.github.io/pikapikapi-blog/pikapikapi-blog-rss.xml&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
        &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
        &lt;svg width=&quot;20px&quot; height=&quot;20px&quot; stroke-width=&quot;1.5&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; color=&quot;#000000&quot;&gt;
            &lt;path d=&quot;M12 19c0-4.2-2.8-7-7-7M19 19c0-8.4-5.6-14-14-14M5 19.01l.01-.011&quot; stroke=&quot;#000000&quot; stroke-width=&quot;1.5&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;&gt;&lt;/path&gt;
        &lt;/svg&gt;
    &lt;/a&gt;
&lt;/div&gt;</code></pre>
</div>
<div class="mainPageRightPanelContainer">
<pre><code>&lt;h4 class=&quot;mainPageAboutMeTitle&quot;&gt;本站信息&lt;/h4&gt;
&lt;p class=&quot;mainPageAboutMeBadges&quot;&gt;
    &lt;img src=&quot;https://img.shields.io/github/license/pikapikapikaori/pikapikapi-blog&quot; alt=&quot;license&quot; height=&quot;17px&quot;&gt;
    &lt;img src=&quot;https://img.shields.io/github/actions/workflow/status/pikapikapikaori/pikapikapi-blog/rss.yml?label=rss%20build&quot; alt=&quot;rss build&quot; height=&quot;17px&quot;&gt;
    &lt;img src=&quot;https://img.shields.io/github/last-commit/pikapikapikaori/pikapikapi-blog?label=last%20updated&quot; alt=&quot;last updated&quot; height=&quot;17px&quot;&gt;
&lt;/p&gt;
&lt;div class=&quot;mainPageAboutMeImageLinks&quot;&gt;
    &lt;a href=&quot;https://github.com/pikapikapikaori/pikapikapi-blog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
        &lt;img src=&quot;https://github-readme-stats.vercel.app/api/pin/?username=pikapikapikaori&amp;repo=pikapikapi-blog&amp;show_owner=true&amp;border_color=00000000&amp;bg_color=00000000&amp;theme=buefy&quot; alt=&quot;picture&quot; class=&quot;dynamicPictureAccordingToThemeMode&quot;&gt;
    &lt;/a&gt;
&lt;/div&gt;</code></pre>
</div>
<!-- panels:end -->]]></description>
    <pubDate>Tue, 2 May 2023 21:04:07 +0800</pubDate>
  </item>
  
</channel>
</rss>
