<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
<channel>
  <title>Pikapikapi Blog</title>
  <atom:link href="https://pikapikapikaori.github.io/pikapikapi-blog/pikapikapi-blog-rss.xml" rel="self" type="application/rss+xml" />
  <link>https://pikapikapikaori.github.io/pikapikapi-blog</link>
  <description>Pikapikapi Blog</description>
   
  <entry>
    <title><![CDATA[ノート：アルバム　令和5年12月2日]]></title>
    <link>https://pikapikapikaori.github.io/pikapikapi-blog/#/jp/writings/Notes-20231202</link>
    <guid isPermaLink="false">https://pikapikapikaori.github.io/pikapikapi-blog/#/jp/writings/Notes-20231202</guid>
    <content type="html"><![CDATA[<h1 id="ノートアルバム-令和5年12月2日">ノート：アルバム　令和5年12月2日</h1><figure><img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20231202/cover-picture.gif" alt="" /><figcaption>picture</figcaption></figure><blockquote><p>この文章は、私の個人ブログで最初に公開されました<br />公開日：2023.12.02<br />最終編集日：{docsify-last-updated}</p></blockquote><p>令和5年12月2日、上海。</p><p>Phatのアイドルマスター本家シリーズが全部手に入れたけど、みき以外の方はまだ箱を開けていません。15周年記念の三人組、e8のみき SLEEPING BEAUTY、そしていくつかの楓と凛のフィギュアの箱も開けていません。</p><p>アイドルマスターシリーズのフィギュアの値段は大体安くなったと見ると、中国にアイドルマスターシリーズの人気が低すぎると感じました。</p><section class="multiImagesContainerSection"><p><img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20231202/picture-4.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20231202/picture-6.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20231202/picture-7.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20231202/picture-1.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20231202/picture-8.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20231202/picture-5.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20231202/picture-3.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20231202/picture-2.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20231202/picture-9.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20231202/picture-10.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20231202/picture-11.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20231202/picture-12.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20231202/picture-13.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20231202/picture-14.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20231202/picture-15.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20231202/picture-16.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20231202/picture-17.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20231202/picture-18.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20231202/picture-19.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20231202/picture-20.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20231202/picture-21.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20231202/picture-22.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20231202/picture-23.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20231202/picture-24.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20231202/picture-25.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20231202/picture-26.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20231202/picture-27.jpeg" alt="picture" /></p></section>]]></content>
    <pubDate>Sun, 14 Apr 2024 02:15:40 +0800</pubDate>
  </entry>
   
  <entry>
    <title><![CDATA[ノート：アルバム　令和5年8月5日]]></title>
    <link>https://pikapikapikaori.github.io/pikapikapi-blog/#/jp/writings/Notes-20230805</link>
    <guid isPermaLink="false">https://pikapikapikaori.github.io/pikapikapi-blog/#/jp/writings/Notes-20230805</guid>
    <content type="html"><![CDATA[<h1 id="ノートアルバム-令和5年8月5日">ノート：アルバム　令和5年8月5日</h1><figure><img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20230805/cover-picture.jpeg" alt="" /><figcaption>picture</figcaption></figure><blockquote><p>この文章は、私の個人ブログで最初に公開されました<br />公開日：2023.08.05<br />最終編集日：{docsify-last-updated}</p></blockquote><p>令和5年8月5日、上海。</p><p>GSC ニア &amp; ヒカリとホムラのamiiboが受け取ったので、GSC ヒカリとホムラとまとめて撮りました。</p><section class="multiImagesContainerSection"><p><img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20230805/picture-4.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20230805/picture-6.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20230805/picture-7.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20230805/picture-1.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20230805/picture-8.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20230805/picture-5.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20230805/picture-3.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20230805/picture-2.jpeg" alt="picture" /></p></section>]]></content>
    <pubDate>Sun, 14 Apr 2024 02:15:40 +0800</pubDate>
  </entry>
   
  <entry>
    <title><![CDATA[ノート：アルバム　令和5年5月8日]]></title>
    <link>https://pikapikapikaori.github.io/pikapikapi-blog/#/jp/writings/Notes-20230508</link>
    <guid isPermaLink="false">https://pikapikapikaori.github.io/pikapikapi-blog/#/jp/writings/Notes-20230508</guid>
    <content type="html"><![CDATA[<h1 id="ノートアルバム-令和5年5月8日">ノート：アルバム　令和5年5月8日</h1><figure><img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20230508/cover-picture.JPG" alt="" /><figcaption>cover</figcaption></figure><blockquote><p>この文章は、私の個人ブログで最初に公開されました<br />公開日：2023.05.08<br />最終編集日：{docsify-last-updated}</p></blockquote><p>令和5年5月6日、上海。</p><section class="multiImagesContainerSection"><p><img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20230508/picture-1.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20230508/picture-3.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20230508/picture-2.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20230508/picture-4.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20230508/picture-5.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20230508/picture-6.jpeg" alt="picture" /></p></section>]]></content>
    <pubDate>Sun, 14 Apr 2024 02:15:40 +0800</pubDate>
  </entry>
   
  <entry>
    <title><![CDATA[ノート：アルバム　令和2年4月21日]]></title>
    <link>https://pikapikapikaori.github.io/pikapikapi-blog/#/jp/writings/Notes-20200421</link>
    <guid isPermaLink="false">https://pikapikapikaori.github.io/pikapikapi-blog/#/jp/writings/Notes-20200421</guid>
    <content type="html"><![CDATA[<h1 id="ノートアルバム-令和2年4月21日">ノート：アルバム　令和2年4月21日</h1><figure><img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20200421/cover-picture.jpeg" alt="" /><figcaption>cover</figcaption></figure><blockquote><p>この文章は、私の個人ブログで最初に公開されました<br />公開日：2020.04.21<br />最終編集日：{docsify-last-updated}</p></blockquote><p>令和元年8月6日から8月13日まで、東京。</p><section class="multiImagesContainerSection"><p><img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20200421/picture-1.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20200421/picture-2.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20200421/picture-3.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20200421/picture-4.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20200421/picture-5.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20200421/picture-6.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20200421/picture-7.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20200421/picture-8.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20200421/picture-9.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20200421/picture-10.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20200421/picture-11.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20200421/picture-12.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/Notes-20200421/picture-13.jpeg" alt="picture" /></p></section>]]></content>
    <pubDate>Sun, 14 Apr 2024 02:15:40 +0800</pubDate>
  </entry>
   
  <entry>
    <title><![CDATA[日本旅行写真　令和6年3月]]></title>
    <link>https://pikapikapikaori.github.io/pikapikapi-blog/#/jp/writings/JPTra-20240328</link>
    <guid isPermaLink="false">https://pikapikapikaori.github.io/pikapikapi-blog/#/jp/writings/JPTra-20240328</guid>
    <content type="html"><![CDATA[<h1 id="日本旅行写真-令和6年3月">日本旅行写真　令和6年3月</h1><figure><img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240328/picture-8.jpg" alt="" /><figcaption>picture</figcaption></figure><blockquote><p>この文章は、私の個人ブログで最初に公開されました<br />公開日：2024.04.04<br />最終編集日：{docsify-last-updated}</p></blockquote><p>令和6年3月28日から、3月31日まで。大阪 &amp; 京都。</p><section class="multiImagesContainerSection"><p><img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240328/picture-1.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240328/picture-2.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240328/picture-3.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240328/picture-4.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240328/picture-5.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240328/picture-6.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240328/picture-7.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240328/picture-8.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240328/picture-9.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240328/picture-10.jpg" alt="picture" /></p></section>]]></content>
    <pubDate>Sun, 14 Apr 2024 02:15:40 +0800</pubDate>
  </entry>
   
  <entry>
    <title><![CDATA[日本旅行写真　令和6年2月]]></title>
    <link>https://pikapikapikaori.github.io/pikapikapi-blog/#/jp/writings/JPTra-20240217</link>
    <guid isPermaLink="false">https://pikapikapikaori.github.io/pikapikapi-blog/#/jp/writings/JPTra-20240217</guid>
    <content type="html"><![CDATA[<h1 id="日本旅行写真-令和6年2月">日本旅行写真　令和6年2月</h1><figure><img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-14.jpg" alt="" /><figcaption>picture</figcaption></figure><blockquote><p>この文章は、私の個人ブログで最初に公開されました<br />公開日：2024.03.01<br />最終編集日：{docsify-last-updated}</p></blockquote><p>令和6年2月17日から、2月24日まで。</p><h2 id="北海道札幌-小樽">北海道：札幌 &amp; 小樽</h2><section class="multiImagesContainerSection"><p><img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-2.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-3.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-4.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-5.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-6.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-7.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-8.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-9.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-10.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-1.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-11.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-12.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-13.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-14.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-15.jpg" alt="picture" /></p></section><h2 id="越後湯沢">越後湯沢</h2><section class="multiImagesContainerSection"><p><img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-17.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-18.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-19.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-16.jpg" alt="picture" /></p></section><h2 id="横浜-東京ロボット">横浜 &amp; 東京：ロボット</h2><section class="multiImagesContainerSection"><p><img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-21.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-22.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-23.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-24.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-25.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-26.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-27.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-28.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-29.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-30.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-31.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-32.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-33.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-34.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-35.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-36.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-37.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-38.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-39.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-40.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-41.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-42.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-20.jpg" alt="picture" /></p></section><h2 id="京都">京都</h2><section class="multiImagesContainerSection"><p><img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-44.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-45.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-46.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-47.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-48.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-49.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-50.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-51.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-52.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-53.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/jp/writings/_media/JPTra-20240217/picture-43.jpg" alt="picture" /></p></section>]]></content>
    <pubDate>Sun, 14 Apr 2024 02:15:40 +0800</pubDate>
  </entry>
   
  <entry>
    <title><![CDATA[IT技術に関する文章]]></title>
    <link>https://pikapikapikaori.github.io/pikapikapi-blog/#/jp/archive/ITtech</link>
    <guid isPermaLink="false">https://pikapikapikaori.github.io/pikapikapi-blog/#/jp/archive/ITtech</guid>
    <content type="html"><![CDATA[<h1 id="it技術に関する文章">IT技術に関する文章</h1><p>このカテゴリには主にコンピュータテクノロジに関する文章と、私が実装したツールやプロジェクトがあります。さらに、過去の論文の読書メモもいくつかあります。主な方向はゲーム理論とメカニズム設計です。</p><p>詳細は<a href="/jp/archive/ITtech/">こちら</a>でご覧ください。</p>]]></content>
    <pubDate>Sun, 14 Apr 2024 02:15:40 +0800</pubDate>
  </entry>
   
  <entry>
    <title><![CDATA[近期艺术展 甲辰年四月十三日]]></title>
    <link>https://pikapikapikaori.github.io/pikapikapi-blog/#/writings/ArtExibit-20240413</link>
    <guid isPermaLink="false">https://pikapikapikaori.github.io/pikapikapi-blog/#/writings/ArtExibit-20240413</guid>
    <content type="html"><![CDATA[<h1 id="近期艺术展-甲辰年四月十三日">近期艺术展 甲辰年四月十三日</h1><figure><img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExibit-20240413/cover-picture.JPG" alt="" /><figcaption>picture</figcaption></figure><blockquote><p>本文首发于个人博客<br />发表日期：2024.04.13<br />最后编辑于：{docsify-last-updated}</p></blockquote><h2 id="毕加索">毕加索</h2><blockquote><p>毕加索艺术中心<br />毕加索·马戏狂想</p></blockquote><p>相对来说比较著名的画少一些，不过我本身也欣赏不来立体主义。</p><section class="multiImagesContainerSection"><p><img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExibit-20240413/picture-4.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExibit-20240413/picture-5.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExibit-20240413/picture-6.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExibit-20240413/picture-7.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExibit-20240413/picture-8.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExibit-20240413/picture-9.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExibit-20240413/picture-10.jpeg" alt="picture" /></p></section><h2 id="文艺复兴的威尼斯画派">文艺复兴的威尼斯画派</h2><blockquote><p>遇见博物馆<br />遇见提香与文艺复兴</p></blockquote><p>威尼斯画派对色彩的运用其实并不很吸引我，尽管不得不承认到了后来的早期印象派的作品都很美。这个展出的意外之喜是看到了几幅伦勃朗与鲁本斯的画作，尽管数量不多。</p><section class="multiImagesContainerSection"><p><img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExibit-20240413/picture-12.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExibit-20240413/picture-13.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExibit-20240413/picture-14.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExibit-20240413/picture-15.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExibit-20240413/picture-16.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExibit-20240413/picture-11.jpeg" alt="picture" /></p></section><h2 id="巴洛克美术">巴洛克美术</h2><blockquote><p>浦东美术馆<br />卡拉瓦乔与巴洛克奇迹</p></blockquote><p>冲着卡拉瓦乔和他最出名的影响即暗色调画法去看的，最符合预期的一次。不过没有维米尔的作品有点遗憾。</p><section class="multiImagesContainerSection"><p><img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExibit-20240413/picture-17.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExibit-20240413/picture-18.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExibit-20240413/picture-19.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExibit-20240413/picture-20.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExibit-20240413/picture-21.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExibit-20240413/picture-22.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExibit-20240413/picture-23.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExibit-20240413/picture-24.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExibit-20240413/picture-25.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExibit-20240413/picture-26.jpeg" alt="picture" /></p></section><h2 id="威尼斯画派">威尼斯画派</h2><blockquote><p>东一美术馆<br />提香·花神——乌菲齐美术馆威尼斯画派珍藏展</p></blockquote><p>不知道为什么近期上海威尼斯画派的展出特别多。这次主要看提香。不愧是近两百的票价无论是作品数量还是质量都远远超过上面几个展览。</p><section class="multiImagesContainerSection"><p><img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExibit-20240413/picture-1.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExibit-20240413/picture-3.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExibit-20240413/picture-2.jpeg" alt="picture" /></p></section>]]></content>
    <pubDate>Sat, 13 Apr 2024 15:43:29 +0800</pubDate>
  </entry>
   
  <entry>
    <title><![CDATA[软件项目实践的一些思索与后期优化方向：设计、开发以及其他]]></title>
    <link>https://pikapikapikaori.github.io/pikapikapi-blog/#/archive/ITtech/SoftwareInsights-20230428</link>
    <guid isPermaLink="false">https://pikapikapikaori.github.io/pikapikapi-blog/#/archive/ITtech/SoftwareInsights-20230428</guid>
    <content type="html"><![CDATA[<h1 id="软件项目实践的一些思索与后期优化方向设计开发以及其他">软件项目实践的一些思索与后期优化方向：设计、开发以及其他</h1><blockquote><p>本文首发于个人博客<br />发表日期：2023.04.28<br />最后编辑于：{docsify-last-updated}</p></blockquote><p>大四下最后的一门课也结束了。这门课大体是由数个人组成一个小小团体进行一个小小项目从零到一的完整开发过程，不同于其他课程，这个项目要求以类似于实际开发的模式，让所有参与者都经历由需求确定、初期架构设计到中期开发、版本发布甚至于是需求变更以及迭代的完整软件开发的整个生命周期。当然其中也包括不同团队间的沟通协商。</p><p>大体而言我在其中以项目经理、架构设计、团队Leader等各种身份参与了后端的完整开发，并也作为开发者参与到了前端部分的开发任务中。个人从中确实有不少感悟，故而写此文记录。在这里主要想谈谈设计、开发的一些感想，诸如进度管理、质量把控等等可能也略有涉及。</p><h2 id="项目背景">项目背景</h2><p>大体而言这个课程项目要求做一个宠物医院的线上学习平台，主要受众大概就是即将毕业或是正在大学学习的兽医相关专业的学生。其功能简要来讲大概有这么几类：</p><ul><li>用户管理与鉴权：常规的大系统都有的功能，这里大体上就分为管理员、出题的老师和进行学习的学生三类用户。</li><li>一个完整医院的3D全景地图与导览模型：前端开发为主的功能，本文不涉及。</li><li>系统管理：要求对这个宠物医院内诸如药物、档案、收费项目、各类检查项目、住院者的信息等等各类内容进行管理，不过这个东西似乎没有在需求文档中体现出实际的意义与用处。</li><li>病例管理：大体上是需要把来医院就诊过的各类病例收集起来存储，其包括从入院诊断、具体检查到诊断结果与治疗方案等全过程的文字图片视频信息，当然也包括得的病的信息。</li><li>测试管理：由病例管理上游的疾病部分内容衍生而来。老师根据疾病生成题库，并从中选题整理为试卷。学生则参加考试进行答题。不过这部分内容似乎与虚拟宠物医院没有太大关系。</li><li>职能学习：一方面是让学生去学习疾病的相关知识（当然要看文字图片视频），一方面学生也可以通过看文字图片视频学习医院内各类角色（医生、医助等等）的具体操作内容。</li><li>数据管理：和上面提到的图片视频的存储有关。需求上还挺麻烦的，视频格式支持太多还需要进行视频的格式转换，反应到和用户的交互上来说还需要实现分块上传等功能等。</li></ul><p>尽管后文对具体业务尽量不会涉及，但姑且将背景记于这里。不难看出这个项目还是一个比较传统的要用到数据库后端前端三个维度的项目，因而后文也主要想从这三个维度的设计与开发两方面来聊聊。</p><p>项目可以参考：</p><ul><li><a href="https://github.com/SoftwareDevelopmentPractice6/virtualPetHospital-backend">后端</a></li><li><a href="https://github.com/SoftwareDevelopmentPractice6/virtualPetHospital-frontend">前端</a></li></ul><p>本博客的仓库中也保存了相关的源码，可以参考<a href="https://github.com/pikapikapikaori/pikapikapi-blog/tree/master/resource/ITtech/SoftwareInsights-20230428">这里</a>。</p><h2 id="设计">设计</h2><p>由于课程要求重各类文档，因而并没有采取如今主流的敏捷开发模式，而是采取的<a href="#RAD">RAD</a>模型。个人来讲其实并不是很习惯这个模型，一方面其由瀑布式改进而来，从某种角度上还是非常重文档和前期的设计的，对需求的变更与过程中的变化并不敏感，另一方面也是因此在开发过程中的抗风险能力也非常依赖于前期的设计以及开发过程中的质量，由此带来的风险是非常恐怖的。</p><p>总之也是因此在进行前期设计时就花了相当多的时间。然而尽管如此，初期的设计还是有着比较大的漏洞，因而也给后期开发带来了一些麻烦。这些问题大多集中在数据库设计上。</p><h3 id="数据库设计">数据库设计</h3><p>由于项目较为庞大因而一些细节的设计我也没有来得及能够去亲自把控，而是交给了同组的其他人。在这里就出了问题。上文所述的测试管理中，题库中的问题需要记录与其相关的问题类别（属于哪种病）、问题类型（单选多选）、问题内容等等。针对此负责这块内容的组员A给出了这样的设计：</p><pre class="mermaid"><code>erDiagramExam {int exam_id PKstring exam_name}Paper {int paper_id PKstring paper_nameint exam_id FKstring durationstring total_score}Question {int question_id PKstring question_contentstring question_typeint category_id FK}Category {int category_id PKstring category_name}ExamSession {int session_id PKint paper_id FKtime start_timetime end_time}StudentResult {int result_id PKint session_id FKint student_idint score}Exam ||--|| Paper : relatePaper ||--|| ExamSession : relateQuestion }o--|| Category : containsExamSession ||--o{ StudentResult : relate</code></pre><p>且不谈同学A遗漏了需要对每张卷子上包含的题目、以及每位学生在试卷上答题所做出的回答进行存储的功能，单看<code>Question</code>与<code>Category</code>两张表。乍一看虽然是挺合理的设计，然而后者的实际有效字段只有<code>category_name</code>一栏。我不否认在大型项目中这样设计的合理性，但是考虑到这个项目的规模、以及后续可能会进行的功能上的拓展，我个人看来<code>Category</code>这张表完全冗余的。</p><p>另一方面，<code>Exam</code>、<code>Paper</code>、<code>ExamSession</code>这三张一对一的表虽然也是很符合设计原则的设计，但是同样考虑到项目规模与未来可能的拓展，这三张表就算合在一起也不会对性能与吞吐量带来很大的负担。一般来讲，只有在表中有一栏以上可能包含大量空值的情况下，或是某一些栏可能被频繁更新时，一对一关系的设计才相对合理。而在当前的情形中，这样的设计则是给后期撰写<code>SQL</code>与开发上带来了巨大的麻烦。且不谈数据的整合与处理，仅仅是外键的存在就已经带来了巨大的麻烦。这也直接导致了在后期初始化数据<code>SQL</code>撰写上耗费了大量Debug的时间，在开发的编码中也需要增加大量检测外键存在性的不必要代码。</p><h3 id="后端架构设计">后端架构设计</h3><p>初期设计时我就已经敲定了<a href="#微服务">微服务</a>的架构。通常，微服务确实不适合于本项目这样的小型项目：配置麻烦、DevOps麻烦，等等。此外，大型项目中服务间数据一致性以及安全性都是非常棘手且关键的问题。</p><p>不过事实上，我其实很看重松散耦合这一点。其给后期开发与迭代过程中带来的自由度是相当大的。前述的问题，如配置、DevOps的确相对棘手，不过包含公用模块、各类插件的配置在初期完成后便一了百了，运维上利用Docker与统一的脚本进行自动化管理也是一经配置后就极易使用的，并没有给开发人员带来很高的成本。倘若有购买服务器配置Jenkins进行更多的自动化的话，相关成本应该还能进一步降低。</p><p>实践中，jacoco、spotless、公共模块的配置实质上也仅仅耗费了我半天的时间，而后期部署时自动化测试脚本的编写仅仅耗费了我两个小时不到的时间。接口测试上所花费的时间略多一点，不过由于接口测试脚本基本是直接由swagger生成的，因而也没有耗费太多的成本。</p><p>相较于这些仅局限于初期和末期的麻烦而言，微服务架构带来的好处是实打实巨大的。数据库与模块的分离带来的是各模块开发的高独立性以及运行时的高可用性。前文所提到的数据库尽管经常会碰到组员产生的Bug，但分离的数据库使得其余的几个模块并没有受到影响从而能够很顺利的进行开发。另一方面，后端模块的分离使得几个模块都能够被快速地开发出来，也因此能够较早地将接口给到前端，从而留出了大量可用于迭代的时间。产生缺陷时查找定位的范围仅仅在自身的子系统内，因而定位缺陷的成本也略有降低。而最最重要的，由于模块间的松散耦合，即使一个服务失败其他服务也能够继续工作，这给开发与测试都带来了相当程度上的便捷。</p><p>更具体的，微服务给实践中的开发带来了巨大的便捷性。我在项目中大概采取了下图的架构：</p><pre class="mermaid"><code>flowchart LR    subgraph backend        subgraph modules            direction TB            subgraph module 1                direction LR                entity1 --&gt; dao1 --&gt; service1 --&gt; controller1            end            subgraph module 2                direction LR                entity2 --&gt; dao2 --&gt; service2 --&gt; controller2            end            subgraph module 3                direction LR                entity3 --&gt; dao3 --&gt; service3 --&gt; controller3            end            subgraph module 4                direction LR                entity4 --&gt; dao4 --&gt; service4 --&gt; controller4            end        end        subgraph intermediator            direction LR            servicei --&gt; controlleri        end        controller1 --&gt; servicei        controller2 --&gt; servicei        controller3 --&gt; servicei        controller4 --&gt; servicei    end    subgraph database        databse1 --&gt; entity1        databse2 --&gt; entity2        databse3 --&gt; entity3        databse4 --&gt; entity4    end    controlleri --&gt; frontend</code></pre><p>作为微服务而言其实也是非常常见与合理的架构。中间层充当网关的角色被外部服务（前端）统一调用，其内部则再根据具体的调用请求来选择合适的服务进行通信，并将数据进行处理后转发给外部服务。在实践中，前端组与后端组同时开发，需求细节与开发细节还不明了的情况下，接口的内容与种类尽管可以大体确定，但具体的数据内容与种类等都是难以确定的。因而，利用中间层也即网关这一角色，接口确定的难题得以被解决。前后端可以先按照自己的想法对接口进行设计与模拟，当有一定的进度、对接口需求更加明确时再利用中间层进行数据的整合与处理，从而节约了大量沟通与修改的时间。</p><pre class="mermaid"><code>sequenceDiagram    Frontend-&gt;&gt;+Intermediator: Request    Intermediator-&gt;&gt;+Module: Processed Request    Module--&gt;&gt;-Intermediator: Response    Intermediator--&gt;&gt;-Frontend: Processed Response</code></pre><p>实践上，数据的转发与整合可以由后端的网关接管，也可以由前端利用nodejs来开发，无论哪种都是非常灵活的。事实上，nodejs构建的中间层或称node层的出现，就是为了让前后端都更关注于业务本身。尽管层数的增加可能会给性能带来一些影响，然而这与开发效率所节省的成本相比是微乎其微的。由过去后端渲染html发送给浏览器的前后端不分离，到前后端分离开发再到中间层的进化，我想这是一个相当自然的过程，也非常值得去学习与应用。</p><p>此外，采取微服务架构，后期的扩展性也是相当高的。一方面，需要增加新业务时可以直接以模块为单位进行添加，而不需要再去对原有代码进行改动。另一方面，甚至也可以将同一服务运行在多台服务器上，并利用Eureka、Ribbon等等组件进行负载均衡与健康检查的功能，从而能够进一步提升可用性与性能，这些都是单体应用难以带来的好处。</p><p>当然，微服务的思想也能直接应用到前端上，也就是前些年提出的<a href="#微前端">微前端</a>的思想。似乎前端组也有利用这一思想进行开发，不过本文就先不作赘述了。</p><h2 id="开发">开发</h2><h3 id="后端开发仍存在的问题">后端开发仍存在的问题</h3><p>开发上后端直接采用了SpringBoot的四层架构，基本上实现了增删改查四类功能。同时，调数据库方面使用了JPA。</p><p>需求上，为了满足全字段搜索、以及较简单的增删改功能，考虑到开发上的便捷性，查询相关的业务逻辑大体都是采取了下面的写法：</p><div class="sourceCode" id="cb4"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="kw">public</span> JSONObject <span class="fu">getFeature</span>(</span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>        <span class="bu">Integer</span> funcId,</span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>        <span class="bu">String</span> funcName,</span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>        <span class="bu">String</span> funcDescription,</span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a>        <span class="bu">String</span> funcFlow,</span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a>        <span class="bu">String</span> funcRole,</span><span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a>        <span class="bu">String</span> funcTool,</span><span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a>        <span class="bu">String</span> roomName) {</span><span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a>    JSONObject res = <span class="kw">new</span> <span class="fu">JSONObject</span>();</span><span id="cb4-10"><a href="#cb4-10" aria-hidden="true"></a>    res.<span class="fu">put</span>(</span><span id="cb4-11"><a href="#cb4-11" aria-hidden="true"></a>            Constants.<span class="fu">featureList</span>,</span><span id="cb4-12"><a href="#cb4-12" aria-hidden="true"></a>            JSONObject.<span class="fu">parseArray</span>(JSON.<span class="fu">toJSONString</span>(featureRepository.<span class="fu">findAll</span>().<span class="fu">stream</span>()</span><span id="cb4-13"><a href="#cb4-13" aria-hidden="true"></a>                    .<span class="fu">filter</span>(feature -&gt; SearchJudgeHelper.<span class="fu">softEquals</span>(funcName, feature.<span class="fu">getFuncName</span>())</span><span id="cb4-14"><a href="#cb4-14" aria-hidden="true"></a>                            &amp;&amp; SearchJudgeHelper.<span class="fu">softIncludes</span>(funcDescription, feature.<span class="fu">getFuncDescription</span>())</span><span id="cb4-15"><a href="#cb4-15" aria-hidden="true"></a>                            &amp;&amp; SearchJudgeHelper.<span class="fu">softIncludes</span>(funcFlow, feature.<span class="fu">getFuncFlow</span>())</span><span id="cb4-16"><a href="#cb4-16" aria-hidden="true"></a>                            &amp;&amp; SearchJudgeHelper.<span class="fu">softIncludes</span>(funcRole, feature.<span class="fu">getFuncRole</span>())</span><span id="cb4-17"><a href="#cb4-17" aria-hidden="true"></a>                            &amp;&amp; SearchJudgeHelper.<span class="fu">softEquals</span>(funcTool, feature.<span class="fu">getFuncTool</span>())</span><span id="cb4-18"><a href="#cb4-18" aria-hidden="true"></a>                            &amp;&amp; SearchJudgeHelper.<span class="fu">softEquals</span>(</span><span id="cb4-19"><a href="#cb4-19" aria-hidden="true"></a>                                    roomName, feature.<span class="fu">getFeatureRoom</span>().<span class="fu">getRoomName</span>())</span><span id="cb4-20"><a href="#cb4-20" aria-hidden="true"></a>                            &amp;&amp; SearchJudgeHelper.<span class="fu">softEquals</span>(funcId, feature.<span class="fu">getFuncId</span>()))</span><span id="cb4-21"><a href="#cb4-21" aria-hidden="true"></a>                    .<span class="fu">collect</span>(Collectors.<span class="fu">toList</span>()))));</span><span id="cb4-22"><a href="#cb4-22" aria-hidden="true"></a>    <span class="kw">return</span> ResponseHelper.<span class="fu">constructSuccessResponse</span>(res);</span><span id="cb4-23"><a href="#cb4-23" aria-hidden="true"></a>}</span></code></pre></div><p>先说查询逻辑。为了少写<code>SQL</code>因而这里是直接调用了JPA的<code>findAll</code>方法，随后利用<code>Java</code>的流函数对其进行遍历筛选，由此得到目标结果以返回。判断相等或包含的方法由自建类进行处理，以满足空数值的比较操作，例如：</p><div class="sourceCode" id="cb5"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="kw">public</span> <span class="dt">static</span> <span class="bu">Boolean</span> <span class="fu">softEquals</span>(<span class="bu">String</span> toBeJudged, <span class="bu">String</span> referencedValue) {</span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>    <span class="kw">try</span> {</span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>        <span class="kw">return</span> (Objects.<span class="fu">equals</span>(toBeJudged, <span class="kw">null</span>) || Objects.<span class="fu">equals</span>(toBeJudged, <span class="st">&quot;&quot;</span>))</span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>                ? <span class="kw">true</span></span><span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>                : Objects.<span class="fu">equals</span>(referencedValue, <span class="bu">URLDecoder</span>.<span class="fu">decode</span>(toBeJudged, Constants.<span class="fu">UTF8</span>));</span><span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a>    } <span class="kw">catch</span> (<span class="bu">UnsupportedEncodingException</span> e) {</span><span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a>        <span class="kw">return</span> <span class="kw">false</span>;</span><span id="cb5-8"><a href="#cb5-8" aria-hidden="true"></a>    }</span><span id="cb5-9"><a href="#cb5-9" aria-hidden="true"></a>}</span></code></pre></div><p>小型项目中这样的写法大体上是没什么问题的，但如果遇上较大的项目这样的写法绝对会出很大的问题。一来，论谁都能看出的遍历查询的性能问题，在十万级别数据量下大概就能有很直观的感受了，这一工作本来应该在数据库中利用索引来优化解决。二来，大量的吞吐量给服务器带来了IO上巨大负担。其潜在的风险是难以估量的。</p><p>为了在满足需求的基础上尽可能简化开发上的工作量（即少写<code>SQL</code>与对应的函数），我目前的想法是利用正则表达式（例如MySQL中的<code>REGEXP</code>关键字）进行查询，由此将查询的相关工作返还给数据库。利用数据库内部的索引等机制对查询进行优化（MySQL内部索引的B+树能带来数倍的性能），借此来消除服务器的负担。借由这一方法全字段搜索可以通过唯一的一条<code>SQL</code>来实现，也符合尽量不写<code>SQL</code>的原则。</p><div class="sourceCode" id="cb6"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="co">// Dao层</span></span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="at">@Query</span>(value = <span class="st">&quot;SELECT f.* FROM Feature f WHERE (f.name REGEXP :funcNameRegExp) AND (f.description REGEXP :funcDescriptionRegExp)&quot;</span>, nativeQuery = <span class="kw">true</span>)</span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a><span class="bu">ArrayList</span>&lt;Feature&gt; <span class="fu">findFeatureByRegExp</span>(<span class="at">@Param</span>(<span class="st">&quot;funcNameRegExp&quot;</span>) <span class="bu">String</span> funcNameRegExp, <span class="at">@Param</span>(<span class="st">&quot;funcDescriptionRegExp&quot;</span>) <span class="bu">String</span> funcDescriptionRegExp);</span><span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a></span><span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a><span class="co">// Service层</span></span><span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a><span class="kw">public</span> JSONObject <span class="fu">getFeature</span>(</span><span id="cb6-7"><a href="#cb6-7" aria-hidden="true"></a>        <span class="bu">String</span> funcName,</span><span id="cb6-8"><a href="#cb6-8" aria-hidden="true"></a>        <span class="bu">String</span> funcDescription) {</span><span id="cb6-9"><a href="#cb6-9" aria-hidden="true"></a>    <span class="bu">String</span> funcNameRegExp = funcName;</span><span id="cb6-10"><a href="#cb6-10" aria-hidden="true"></a>    <span class="bu">String</span> funcDescriptionRegExp =  <span class="st">&quot;^&quot;</span> + funcName + <span class="st">&quot;$&quot;</span>;</span><span id="cb6-11"><a href="#cb6-11" aria-hidden="true"></a>    JSONObject res = <span class="kw">new</span> <span class="fu">JSONObject</span>();</span><span id="cb6-12"><a href="#cb6-12" aria-hidden="true"></a>    res.<span class="fu">put</span>(</span><span id="cb6-13"><a href="#cb6-13" aria-hidden="true"></a>            Constants.<span class="fu">featureList</span>,</span><span id="cb6-14"><a href="#cb6-14" aria-hidden="true"></a>            JSONObject.<span class="fu">parseArray</span>(JSON.<span class="fu">toJSONString</span>(featureRepository.<span class="fu">findFeatureByRegExp</span>(funcNameRegExp, funcDescriptionRegExp))));</span><span id="cb6-15"><a href="#cb6-15" aria-hidden="true"></a>    <span class="kw">return</span> ResponseHelper.<span class="fu">constructSuccessResponse</span>(res);</span><span id="cb6-16"><a href="#cb6-16" aria-hidden="true"></a>}</span></code></pre></div><p>再说增删改。项目中这些功能的实现大体如下：</p><div class="sourceCode" id="cb7"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a>\\ 增</span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a><span class="kw">public</span> JSONObject <span class="fu">addExamine</span>(<span class="bu">String</span> examineName, <span class="dt">double</span> examinePrice, <span class="bu">String</span> roomName) {</span><span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a>    <span class="bu">List</span>&lt;Examine&gt; targetExamineList = examineRepository.<span class="fu">findAll</span>().<span class="fu">stream</span>()</span><span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a>            .<span class="fu">filter</span>(examine -&gt; Objects.<span class="fu">equals</span>(examine.<span class="fu">getExamineName</span>(), examineName))</span><span id="cb7-5"><a href="#cb7-5" aria-hidden="true"></a>            .<span class="fu">collect</span>(Collectors.<span class="fu">toList</span>());</span><span id="cb7-6"><a href="#cb7-6" aria-hidden="true"></a></span><span id="cb7-7"><a href="#cb7-7" aria-hidden="true"></a>    <span class="kw">if</span> (Objects.<span class="fu">equals</span>(targetExamineList.<span class="fu">size</span>(), <span class="dv">0</span>)) {</span><span id="cb7-8"><a href="#cb7-8" aria-hidden="true"></a>        Optional&lt;Room&gt; targetRoomOptional = roomRepository.<span class="fu">findById</span>(roomName);</span><span id="cb7-9"><a href="#cb7-9" aria-hidden="true"></a></span><span id="cb7-10"><a href="#cb7-10" aria-hidden="true"></a>        <span class="kw">if</span> (targetRoomOptional.<span class="fu">isEmpty</span>()) {</span><span id="cb7-11"><a href="#cb7-11" aria-hidden="true"></a>            <span class="kw">return</span> ResponseHelper.<span class="fu">constructFailedResponse</span>(ResponseHelper.<span class="fu">requestErrorCode</span>);</span><span id="cb7-12"><a href="#cb7-12" aria-hidden="true"></a>        } <span class="kw">else</span> {</span><span id="cb7-13"><a href="#cb7-13" aria-hidden="true"></a>            Examine newExamine = <span class="kw">new</span> <span class="fu">Examine</span>();</span><span id="cb7-14"><a href="#cb7-14" aria-hidden="true"></a>            newExamine.<span class="fu">setExamineName</span>(examineName);</span><span id="cb7-15"><a href="#cb7-15" aria-hidden="true"></a>            newExamine.<span class="fu">setExaminePrice</span>(examinePrice);</span><span id="cb7-16"><a href="#cb7-16" aria-hidden="true"></a>            newExamine.<span class="fu">setExamineRoom</span>(targetRoomOptional.<span class="fu">get</span>());</span><span id="cb7-17"><a href="#cb7-17" aria-hidden="true"></a></span><span id="cb7-18"><a href="#cb7-18" aria-hidden="true"></a>            Examine addedExamine = examineRepository.<span class="fu">saveAndFlush</span>(newExamine);</span><span id="cb7-19"><a href="#cb7-19" aria-hidden="true"></a></span><span id="cb7-20"><a href="#cb7-20" aria-hidden="true"></a>            <span class="kw">return</span> ResponseHelper.<span class="fu">constructSuccessResponse</span>(addedExamine);</span><span id="cb7-21"><a href="#cb7-21" aria-hidden="true"></a>        }</span><span id="cb7-22"><a href="#cb7-22" aria-hidden="true"></a>    } <span class="kw">else</span> {</span><span id="cb7-23"><a href="#cb7-23" aria-hidden="true"></a>        <span class="kw">return</span> ResponseHelper.<span class="fu">constructFailedResponse</span>(ResponseHelper.<span class="fu">requestErrorCode</span>);</span><span id="cb7-24"><a href="#cb7-24" aria-hidden="true"></a>    }</span><span id="cb7-25"><a href="#cb7-25" aria-hidden="true"></a>}</span><span id="cb7-26"><a href="#cb7-26" aria-hidden="true"></a></span><span id="cb7-27"><a href="#cb7-27" aria-hidden="true"></a>\\ 改</span><span id="cb7-28"><a href="#cb7-28" aria-hidden="true"></a><span class="kw">public</span> JSONObject <span class="fu">updateExamine</span>(<span class="dt">int</span> examineId, <span class="bu">String</span> examineName, <span class="dt">double</span> examinePrice, <span class="bu">String</span> roomName) {</span><span id="cb7-29"><a href="#cb7-29" aria-hidden="true"></a>    Optional&lt;Examine&gt; targetExamineOptional = examineRepository.<span class="fu">findById</span>(examineId);</span><span id="cb7-30"><a href="#cb7-30" aria-hidden="true"></a></span><span id="cb7-31"><a href="#cb7-31" aria-hidden="true"></a>    <span class="kw">if</span> (targetExamineOptional.<span class="fu">isEmpty</span>()) {</span><span id="cb7-32"><a href="#cb7-32" aria-hidden="true"></a>        <span class="kw">return</span> ResponseHelper.<span class="fu">constructFailedResponse</span>(ResponseHelper.<span class="fu">requestErrorCode</span>);</span><span id="cb7-33"><a href="#cb7-33" aria-hidden="true"></a>    } <span class="kw">else</span> {</span><span id="cb7-34"><a href="#cb7-34" aria-hidden="true"></a></span><span id="cb7-35"><a href="#cb7-35" aria-hidden="true"></a>        <span class="bu">List</span>&lt;Examine&gt; targetExamineList = examineRepository.<span class="fu">findAll</span>().<span class="fu">stream</span>()</span><span id="cb7-36"><a href="#cb7-36" aria-hidden="true"></a>                .<span class="fu">filter</span>(examine -&gt; Objects.<span class="fu">equals</span>(examine.<span class="fu">getExamineName</span>(), examineName)</span><span id="cb7-37"><a href="#cb7-37" aria-hidden="true"></a>                        &amp;&amp; !Objects.<span class="fu">equals</span>(examine.<span class="fu">getExamineId</span>(), examineId))</span><span id="cb7-38"><a href="#cb7-38" aria-hidden="true"></a>                .<span class="fu">collect</span>(Collectors.<span class="fu">toList</span>());</span><span id="cb7-39"><a href="#cb7-39" aria-hidden="true"></a></span><span id="cb7-40"><a href="#cb7-40" aria-hidden="true"></a>        Optional&lt;Room&gt; targetRoomOptional = roomRepository.<span class="fu">findById</span>(roomName);</span><span id="cb7-41"><a href="#cb7-41" aria-hidden="true"></a></span><span id="cb7-42"><a href="#cb7-42" aria-hidden="true"></a>        <span class="kw">if</span> (targetRoomOptional.<span class="fu">isEmpty</span>() || !Objects.<span class="fu">equals</span>(targetExamineList.<span class="fu">size</span>(), <span class="dv">0</span>)) {</span><span id="cb7-43"><a href="#cb7-43" aria-hidden="true"></a>            <span class="kw">return</span> ResponseHelper.<span class="fu">constructFailedResponse</span>(ResponseHelper.<span class="fu">requestErrorCode</span>);</span><span id="cb7-44"><a href="#cb7-44" aria-hidden="true"></a>        } <span class="kw">else</span> {</span><span id="cb7-45"><a href="#cb7-45" aria-hidden="true"></a>            Examine targetExamine = targetExamineOptional.<span class="fu">get</span>();</span><span id="cb7-46"><a href="#cb7-46" aria-hidden="true"></a>            targetExamine.<span class="fu">setExamineName</span>(examineName);</span><span id="cb7-47"><a href="#cb7-47" aria-hidden="true"></a>            targetExamine.<span class="fu">setExaminePrice</span>(examinePrice);</span><span id="cb7-48"><a href="#cb7-48" aria-hidden="true"></a>            targetExamine.<span class="fu">setExamineRoom</span>(targetRoomOptional.<span class="fu">get</span>());</span><span id="cb7-49"><a href="#cb7-49" aria-hidden="true"></a></span><span id="cb7-50"><a href="#cb7-50" aria-hidden="true"></a>            Examine updatedExamine = examineRepository.<span class="fu">saveAndFlush</span>(targetExamine);</span><span id="cb7-51"><a href="#cb7-51" aria-hidden="true"></a></span><span id="cb7-52"><a href="#cb7-52" aria-hidden="true"></a>            <span class="kw">return</span> ResponseHelper.<span class="fu">constructSuccessResponse</span>(updatedExamine);</span><span id="cb7-53"><a href="#cb7-53" aria-hidden="true"></a>        }</span><span id="cb7-54"><a href="#cb7-54" aria-hidden="true"></a>    }</span><span id="cb7-55"><a href="#cb7-55" aria-hidden="true"></a>}</span><span id="cb7-56"><a href="#cb7-56" aria-hidden="true"></a></span><span id="cb7-57"><a href="#cb7-57" aria-hidden="true"></a>\\ 删</span><span id="cb7-58"><a href="#cb7-58" aria-hidden="true"></a><span class="kw">public</span> JSONObject <span class="fu">deleteExamine</span>(<span class="dt">int</span> examineId) {</span><span id="cb7-59"><a href="#cb7-59" aria-hidden="true"></a>    Optional&lt;Examine&gt; targetExamineOptional = examineRepository.<span class="fu">findById</span>(examineId);</span><span id="cb7-60"><a href="#cb7-60" aria-hidden="true"></a></span><span id="cb7-61"><a href="#cb7-61" aria-hidden="true"></a>    <span class="kw">if</span> (targetExamineOptional.<span class="fu">isEmpty</span>()) {</span><span id="cb7-62"><a href="#cb7-62" aria-hidden="true"></a>        <span class="kw">return</span> ResponseHelper.<span class="fu">constructFailedResponse</span>(ResponseHelper.<span class="fu">requestErrorCode</span>);</span><span id="cb7-63"><a href="#cb7-63" aria-hidden="true"></a>    } <span class="kw">else</span> {</span><span id="cb7-64"><a href="#cb7-64" aria-hidden="true"></a>        examineRepository.<span class="fu">deleteById</span>(examineId);</span><span id="cb7-65"><a href="#cb7-65" aria-hidden="true"></a></span><span id="cb7-66"><a href="#cb7-66" aria-hidden="true"></a>        <span class="kw">if</span> (examineRepository.<span class="fu">findById</span>(examineId).<span class="fu">isEmpty</span>()) {</span><span id="cb7-67"><a href="#cb7-67" aria-hidden="true"></a>            <span class="kw">return</span> ResponseHelper.<span class="fu">constructSuccessResponse</span>(targetExamineOptional.<span class="fu">get</span>());</span><span id="cb7-68"><a href="#cb7-68" aria-hidden="true"></a>        } <span class="kw">else</span> {</span><span id="cb7-69"><a href="#cb7-69" aria-hidden="true"></a>            <span class="kw">return</span> ResponseHelper.<span class="fu">constructFailedResponse</span>(ResponseHelper.<span class="fu">requestErrorCode</span>);</span><span id="cb7-70"><a href="#cb7-70" aria-hidden="true"></a>        }</span><span id="cb7-71"><a href="#cb7-71" aria-hidden="true"></a>    }</span><span id="cb7-72"><a href="#cb7-72" aria-hidden="true"></a>}</span></code></pre></div><p>说实话每个表增删改查写一遍还是挺繁琐的，毕竟业务逻辑上太过类似了。基本上都是这样的逻辑：</p><ul><li>增：查询重复数据存在情况<span class="math inline">→</span>查外键存在情况<span class="math inline">→</span>插入数据。</li><li>改：查自身数据存在情况<span class="math inline">→</span>查询重复数据存在情况<span class="math inline">→</span>查外键存在情况<span class="math inline">→</span>插入数据。</li><li>删：直接调用JPA的<code>deleteById</code>方法。</li></ul><p>这里的如果需要重构可以考虑利用<a href="#java反射机制"><code>Java</code>反射机制</a>。事实上，项目末期时根据前端需求增加的根据数据Id查询功能就是利用这一机制写的。</p><div class="sourceCode" id="cb8"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="kw">public</span> <span class="kw">class</span> GeneralService {</span><span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a>    <span class="at">@Autowired</span></span><span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a>    <span class="kw">private</span> RoomRepository roomRepository;</span><span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a></span><span id="cb8-5"><a href="#cb8-5" aria-hidden="true"></a>    <span class="at">@Autowired</span></span><span id="cb8-6"><a href="#cb8-6" aria-hidden="true"></a>    <span class="kw">private</span> FeatureRepository featureRepository;</span><span id="cb8-7"><a href="#cb8-7" aria-hidden="true"></a></span><span id="cb8-8"><a href="#cb8-8" aria-hidden="true"></a>    <span class="at">@Autowired</span></span><span id="cb8-9"><a href="#cb8-9" aria-hidden="true"></a>    <span class="kw">private</span> AdmissionRepository admissionRepository;</span><span id="cb8-10"><a href="#cb8-10" aria-hidden="true"></a></span><span id="cb8-11"><a href="#cb8-11" aria-hidden="true"></a>    <span class="at">@Autowired</span></span><span id="cb8-12"><a href="#cb8-12" aria-hidden="true"></a>    <span class="kw">private</span> ArchiveRepository archiveRepository;</span><span id="cb8-13"><a href="#cb8-13" aria-hidden="true"></a></span><span id="cb8-14"><a href="#cb8-14" aria-hidden="true"></a>    <span class="at">@Autowired</span></span><span id="cb8-15"><a href="#cb8-15" aria-hidden="true"></a>    <span class="kw">private</span> ChargeRepository chargeRepository;</span><span id="cb8-16"><a href="#cb8-16" aria-hidden="true"></a></span><span id="cb8-17"><a href="#cb8-17" aria-hidden="true"></a>    <span class="at">@Autowired</span></span><span id="cb8-18"><a href="#cb8-18" aria-hidden="true"></a>    <span class="kw">private</span> ExamineRepository examineRepository;</span><span id="cb8-19"><a href="#cb8-19" aria-hidden="true"></a></span><span id="cb8-20"><a href="#cb8-20" aria-hidden="true"></a>    <span class="at">@Autowired</span></span><span id="cb8-21"><a href="#cb8-21" aria-hidden="true"></a>    <span class="kw">private</span> MedicineRepository medicineRepository;</span><span id="cb8-22"><a href="#cb8-22" aria-hidden="true"></a></span><span id="cb8-23"><a href="#cb8-23" aria-hidden="true"></a>    <span class="kw">public</span> JSONObject <span class="fu">getDataById</span>(<span class="bu">String</span> tableName, <span class="dt">int</span> id) <span class="kw">throws</span> <span class="bu">Exception</span> {</span><span id="cb8-24"><a href="#cb8-24" aria-hidden="true"></a>        <span class="bu">Class</span>&lt;?&gt; dataDaoClass = <span class="bu">Class</span>.<span class="fu">forName</span>(</span><span id="cb8-25"><a href="#cb8-25" aria-hidden="true"></a>                Constants.<span class="fu">projectPackageName</span> + <span class="st">&quot;.&quot;</span> + Constants.<span class="fu">systemModulePackageName</span> + <span class="st">&quot;.&quot;</span></span><span id="cb8-26"><a href="#cb8-26" aria-hidden="true"></a>                        + Constants.<span class="fu">daoClassPackageName</span></span><span id="cb8-27"><a href="#cb8-27" aria-hidden="true"></a>                        + <span class="st">&quot;.&quot;</span> + tableName</span><span id="cb8-28"><a href="#cb8-28" aria-hidden="true"></a>                        + Constants.<span class="fu">daoClassSuffix</span>,</span><span id="cb8-29"><a href="#cb8-29" aria-hidden="true"></a>                <span class="kw">true</span>,</span><span id="cb8-30"><a href="#cb8-30" aria-hidden="true"></a>                <span class="bu">Thread</span>.<span class="fu">currentThread</span>().<span class="fu">getContextClassLoader</span>().<span class="fu">getParent</span>());</span><span id="cb8-31"><a href="#cb8-31" aria-hidden="true"></a></span><span id="cb8-32"><a href="#cb8-32" aria-hidden="true"></a>        <span class="bu">Method</span> getByIdMethod = <span class="kw">null</span>;</span><span id="cb8-33"><a href="#cb8-33" aria-hidden="true"></a></span><span id="cb8-34"><a href="#cb8-34" aria-hidden="true"></a>        <span class="kw">for</span> (<span class="bu">Method</span> classMethods : dataDaoClass.<span class="fu">getMethods</span>()) {</span><span id="cb8-35"><a href="#cb8-35" aria-hidden="true"></a>            <span class="kw">if</span> (Objects.<span class="fu">equals</span>(classMethods.<span class="fu">getName</span>(), Constants.<span class="fu">findByIdMethodName</span>)) {</span><span id="cb8-36"><a href="#cb8-36" aria-hidden="true"></a>                getByIdMethod = classMethods;</span><span id="cb8-37"><a href="#cb8-37" aria-hidden="true"></a>            }</span><span id="cb8-38"><a href="#cb8-38" aria-hidden="true"></a>        }</span><span id="cb8-39"><a href="#cb8-39" aria-hidden="true"></a></span><span id="cb8-40"><a href="#cb8-40" aria-hidden="true"></a>        <span class="kw">for</span> (<span class="bu">Field</span> selfField : <span class="kw">this</span>.<span class="fu">getClass</span>().<span class="fu">getDeclaredFields</span>()) {</span><span id="cb8-41"><a href="#cb8-41" aria-hidden="true"></a>            <span class="kw">if</span> (Objects.<span class="fu">equals</span>(selfField.<span class="fu">getType</span>().<span class="fu">getName</span>(), dataDaoClass.<span class="fu">getName</span>())) {</span><span id="cb8-42"><a href="#cb8-42" aria-hidden="true"></a>                Optional&lt;?&gt; getIdRes = (Optional&lt;?&gt;) getByIdMethod.<span class="fu">invoke</span>(selfField.<span class="fu">get</span>(<span class="kw">this</span>), id);</span><span id="cb8-43"><a href="#cb8-43" aria-hidden="true"></a></span><span id="cb8-44"><a href="#cb8-44" aria-hidden="true"></a>                <span class="kw">if</span> (getIdRes.<span class="fu">isEmpty</span>()) {</span><span id="cb8-45"><a href="#cb8-45" aria-hidden="true"></a>                    <span class="kw">return</span> ResponseHelper.<span class="fu">constructFailedResponse</span>(ResponseHelper.<span class="fu">requestErrorCode</span>);</span><span id="cb8-46"><a href="#cb8-46" aria-hidden="true"></a>                } <span class="kw">else</span> {</span><span id="cb8-47"><a href="#cb8-47" aria-hidden="true"></a>                    <span class="kw">return</span> ResponseHelper.<span class="fu">constructSuccessResponse</span>(getIdRes.<span class="fu">get</span>());</span><span id="cb8-48"><a href="#cb8-48" aria-hidden="true"></a>                }</span><span id="cb8-49"><a href="#cb8-49" aria-hidden="true"></a>            }</span><span id="cb8-50"><a href="#cb8-50" aria-hidden="true"></a>        }</span><span id="cb8-51"><a href="#cb8-51" aria-hidden="true"></a></span><span id="cb8-52"><a href="#cb8-52" aria-hidden="true"></a>        <span class="kw">return</span> ResponseHelper.<span class="fu">constructFailedResponse</span>(ResponseHelper.<span class="fu">requestErrorCode</span>);</span><span id="cb8-53"><a href="#cb8-53" aria-hidden="true"></a>    }</span><span id="cb8-54"><a href="#cb8-54" aria-hidden="true"></a>}</span></code></pre></div><p>事实上，删除功能可以直接套用这一写法。当然，在上面的<code>getDataById</code>方法中查找<code>Method</code>与<code>Field</code>的逻辑也可以进一步进行优化：</p><div class="sourceCode" id="cb9"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="kw">public</span> <span class="bu">Class</span>&lt;JPARepository&gt; <span class="fu">getDataDaoClassByTableName</span> (<span class="bu">String</span> tableName) <span class="kw">throws</span> <span class="bu">Exception</span> {</span><span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a>    <span class="kw">return</span> <span class="bu">Class</span>.<span class="fu">forName</span>(</span><span id="cb9-3"><a href="#cb9-3" aria-hidden="true"></a>            Constants.<span class="fu">projectPackageName</span> + <span class="st">&quot;.&quot;</span> + Constants.<span class="fu">systemModulePackageName</span> + <span class="st">&quot;.&quot;</span></span><span id="cb9-4"><a href="#cb9-4" aria-hidden="true"></a>                    + Constants.<span class="fu">daoClassPackageName</span></span><span id="cb9-5"><a href="#cb9-5" aria-hidden="true"></a>                    + <span class="st">&quot;.&quot;</span> + tableName</span><span id="cb9-6"><a href="#cb9-6" aria-hidden="true"></a>                    + Constants.<span class="fu">daoClassSuffix</span>,</span><span id="cb9-7"><a href="#cb9-7" aria-hidden="true"></a>            <span class="kw">true</span>,</span><span id="cb9-8"><a href="#cb9-8" aria-hidden="true"></a>            <span class="bu">Thread</span>.<span class="fu">currentThread</span>().<span class="fu">getContextClassLoader</span>().<span class="fu">getParent</span>());</span><span id="cb9-9"><a href="#cb9-9" aria-hidden="true"></a>}</span><span id="cb9-10"><a href="#cb9-10" aria-hidden="true"></a></span><span id="cb9-11"><a href="#cb9-11" aria-hidden="true"></a><span class="kw">public</span> JSONObject <span class="fu">getDataById</span>(<span class="bu">String</span> tableName, <span class="dt">int</span> id) <span class="kw">throws</span> <span class="bu">Exception</span> {</span><span id="cb9-12"><a href="#cb9-12" aria-hidden="true"></a>    <span class="bu">Class</span>&lt;?&gt; dataDaoClass = <span class="kw">this</span>.<span class="fu">getDataDaoClassByTableName</span>(tableName);</span><span id="cb9-13"><a href="#cb9-13" aria-hidden="true"></a>    <span class="bu">Method</span> getByIdMethod = dataDaoClass.<span class="fu">getMethod</span>(Constants.<span class="fu">findByIdMethodName</span>, <span class="bu">Integer</span>.<span class="fu">class</span>);</span><span id="cb9-14"><a href="#cb9-14" aria-hidden="true"></a>    <span class="bu">Field</span> selfField = <span class="kw">this</span>.<span class="fu">getClass</span>().<span class="fu">getDeclaredField</span>(tableName.<span class="fu">toFirstCharLowerCase</span>());</span><span id="cb9-15"><a href="#cb9-15" aria-hidden="true"></a></span><span id="cb9-16"><a href="#cb9-16" aria-hidden="true"></a>    Optional&lt;?&gt; getIdRes = (Optional&lt;?&gt;) getByIdMethod.<span class="fu">invoke</span>(selfField.<span class="fu">get</span>(<span class="kw">this</span>), id);</span><span id="cb9-17"><a href="#cb9-17" aria-hidden="true"></a></span><span id="cb9-18"><a href="#cb9-18" aria-hidden="true"></a>    <span class="kw">return</span> getIdRes.<span class="fu">isEmpty</span>() ? ResponseHelper.<span class="fu">constructFailedResponse</span>(ResponseHelper.<span class="fu">requestErrorCode</span>) : ResponseHelper.<span class="fu">constructSuccessResponse</span>(getIdRes.<span class="fu">get</span>());</span><span id="cb9-19"><a href="#cb9-19" aria-hidden="true"></a>}</span><span id="cb9-20"><a href="#cb9-20" aria-hidden="true"></a></span><span id="cb9-21"><a href="#cb9-21" aria-hidden="true"></a><span class="kw">public</span> JSONObject <span class="fu">deleteDataById</span>(<span class="bu">String</span> tableName, <span class="dt">int</span> id) <span class="kw">throws</span> <span class="bu">Exception</span> {</span><span id="cb9-22"><a href="#cb9-22" aria-hidden="true"></a>    JSONObject getDataByIdRes = <span class="kw">this</span>.<span class="fu">getDataById</span>(tableName, id);</span><span id="cb9-23"><a href="#cb9-23" aria-hidden="true"></a></span><span id="cb9-24"><a href="#cb9-24" aria-hidden="true"></a>    <span class="co">// 表内查询无数据</span></span><span id="cb9-25"><a href="#cb9-25" aria-hidden="true"></a>    <span class="kw">if</span> (<span class="bu">Object</span>.<span class="fu">equals</span>(getDataByIdRes.<span class="fu">data</span>, <span class="kw">null</span>)) {</span><span id="cb9-26"><a href="#cb9-26" aria-hidden="true"></a>        <span class="kw">return</span> getDataByIdRes;</span><span id="cb9-27"><a href="#cb9-27" aria-hidden="true"></a>    }</span><span id="cb9-28"><a href="#cb9-28" aria-hidden="true"></a></span><span id="cb9-29"><a href="#cb9-29" aria-hidden="true"></a>    <span class="bu">Class</span>&lt;?&gt; dataDaoClass = <span class="kw">this</span>.<span class="fu">getDataDaoClassByTableName</span>(tableName);</span><span id="cb9-30"><a href="#cb9-30" aria-hidden="true"></a>    <span class="bu">Method</span> deleteByIdMethod = dataDaoClass.<span class="fu">getMethod</span>(Constants.<span class="fu">deleteByIdMethodName</span>, <span class="bu">Integer</span>.<span class="fu">class</span>);</span><span id="cb9-31"><a href="#cb9-31" aria-hidden="true"></a>    <span class="bu">Field</span> selfField = <span class="kw">this</span>.<span class="fu">getClass</span>().<span class="fu">getDeclaredField</span>(tableName.<span class="fu">toFirstCharLowerCase</span>());</span><span id="cb9-32"><a href="#cb9-32" aria-hidden="true"></a></span><span id="cb9-33"><a href="#cb9-33" aria-hidden="true"></a>    deleteByIdMethod.<span class="fu">invoke</span>(selfField.<span class="fu">get</span>(<span class="kw">this</span>), id);</span><span id="cb9-34"><a href="#cb9-34" aria-hidden="true"></a></span><span id="cb9-35"><a href="#cb9-35" aria-hidden="true"></a>    <span class="kw">return</span> ResponseHelper.<span class="fu">constructSuccessResponse</span>(getDataByIdRes.<span class="fu">get</span>());</span><span id="cb9-36"><a href="#cb9-36" aria-hidden="true"></a>}</span></code></pre></div><p>为了进一步简化开发工作量与代码逻辑，可以考虑先创建公共类：<code>BaseEntity</code>与<code>BaseRepository</code>，使得实体类继承前者，对应的<code>dao</code>类继承后者。</p><p>对于增改功能而言，业务逻辑中唯二的区别在于判断重复条件与判断外键存在逻辑这两项。可以考虑抽象成统一的公共方法，通过接收可变个数个参数构成的List来进行判断。更具体的，其可能是下面的实现形式：</p><div class="sourceCode" id="cb10"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="kw">public</span> JSONObject <span class="fu">updateDataById</span>(</span><span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a>    <span class="bu">String</span> tableName, </span><span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a>    <span class="dt">int</span> id, </span><span id="cb10-4"><a href="#cb10-4" aria-hidden="true"></a>    <span class="bu">ArrayList</span>&lt;<span class="bu">String</span>&gt; duplicateConditionFields, </span><span id="cb10-5"><a href="#cb10-5" aria-hidden="true"></a>    <span class="bu">ArrayList</span>&lt;<span class="bu">String</span>&gt; foreignKeys,</span><span id="cb10-6"><a href="#cb10-6" aria-hidden="true"></a>    <span class="bu">Map</span>&lt;<span class="bu">String</span>, <span class="bu">String</span>&gt; newValues</span><span id="cb10-7"><a href="#cb10-7" aria-hidden="true"></a>) {</span><span id="cb10-8"><a href="#cb10-8" aria-hidden="true"></a>    <span class="bu">Class</span>&lt;?&gt; dataEntityClass = ...; <span class="co">// 查找对应的Entity层类</span></span><span id="cb10-9"><a href="#cb10-9" aria-hidden="true"></a>    <span class="bu">Class</span>&lt;?&gt; dataDaoClass = ...; <span class="co">// 查找对应的Dao层类</span></span><span id="cb10-10"><a href="#cb10-10" aria-hidden="true"></a>    <span class="bu">Method</span> updateByIdMethod = dataDaoClass.<span class="fu">getMethod</span>(<span class="st">&quot;saveAndFlush&quot;</span>); <span class="co">// 查找保存数据的方法</span></span><span id="cb10-11"><a href="#cb10-11" aria-hidden="true"></a>    <span class="bu">Method</span> findAllMethod = dataDaoClass.<span class="fu">getMethod</span>(<span class="st">&quot;findAll&quot;</span>); </span><span id="cb10-12"><a href="#cb10-12" aria-hidden="true"></a>    <span class="bu">Field</span> selfField = ...; <span class="co">// 找到自身类中对应的field</span></span><span id="cb10-13"><a href="#cb10-13" aria-hidden="true"></a></span><span id="cb10-14"><a href="#cb10-14" aria-hidden="true"></a>    <span class="bu">Object</span> targetData = dataEntityClass.<span class="fu">getConstructor</span>().<span class="fu">newInstance</span>(); <span class="co">//获取要更新数据</span></span><span id="cb10-15"><a href="#cb10-15" aria-hidden="true"></a></span><span id="cb10-16"><a href="#cb10-16" aria-hidden="true"></a>    <span class="bu">Boolean</span> isForeignKeyExist = <span class="kw">true</span>;</span><span id="cb10-17"><a href="#cb10-17" aria-hidden="true"></a></span><span id="cb10-18"><a href="#cb10-18" aria-hidden="true"></a>    <span class="co">// 如果满足重复条件或外键不存在则直接返回，这里可以进一步优化</span></span><span id="cb10-19"><a href="#cb10-19" aria-hidden="true"></a>    <span class="kw">for</span>(foreignKey : foreignKeys) {</span><span id="cb10-20"><a href="#cb10-20" aria-hidden="true"></a>        <span class="bu">Class</span>&lt;?&gt; foreignKeyDaoClass = <span class="bu">Class</span>.<span class="fu">forName</span>(targetData.<span class="fu">getDeclaredField</span>(foreignKey).<span class="fu">getType</span>().<span class="fu">getName</span>() + ...); <span class="co">//找到外键对应Dao层类</span></span><span id="cb10-21"><a href="#cb10-21" aria-hidden="true"></a>        <span class="bu">Method</span> findByIdMethod = foreignKeyDaoClass.<span class="fu">getMethod</span>(<span class="st">&quot;findById&quot;</span>); </span><span id="cb10-22"><a href="#cb10-22" aria-hidden="true"></a>        <span class="bu">Field</span> selfField = ...; <span class="co">// 找到自身类中对应的field</span></span><span id="cb10-23"><a href="#cb10-23" aria-hidden="true"></a>        Optional&lt;?&gt; getIdRes = (Optional&lt;?&gt;) findByIdMethod.<span class="fu">invoke</span>(selfField.<span class="fu">get</span>(<span class="kw">this</span>), <span class="bu">Integer</span>.<span class="fu">parseInt</span>(newValues.<span class="fu">get</span>(foreignKey).<span class="fu">getId</span>()));</span><span id="cb10-24"><a href="#cb10-24" aria-hidden="true"></a>        isForeignKeyExist &amp;= !getIdRes.<span class="fu">isEmpty</span>();</span><span id="cb10-25"><a href="#cb10-25" aria-hidden="true"></a>    }</span><span id="cb10-26"><a href="#cb10-26" aria-hidden="true"></a></span><span id="cb10-27"><a href="#cb10-27" aria-hidden="true"></a>    <span class="bu">List</span>&lt;?&gt; getAllRes = (<span class="bu">List</span>&lt;?&gt;) findAllMethod.<span class="fu">invoke</span>(selfField.<span class="fu">get</span>(<span class="kw">this</span>));</span><span id="cb10-28"><a href="#cb10-28" aria-hidden="true"></a></span><span id="cb10-29"><a href="#cb10-29" aria-hidden="true"></a>    <span class="kw">if</span> (<span class="bu">Object</span>.<span class="fu">equals</span>(getAllRes.<span class="fu">findAll</span>().<span class="fu">stream</span>().<span class="fu">filter</span>(data -&gt; {</span><span id="cb10-30"><a href="#cb10-30" aria-hidden="true"></a>        <span class="bu">Boolean</span> isExist = <span class="kw">true</span>;</span><span id="cb10-31"><a href="#cb10-31" aria-hidden="true"></a>        <span class="kw">for</span> (duplicateConditionField : duplicateConditionFields) {</span><span id="cb10-32"><a href="#cb10-32" aria-hidden="true"></a>            isExist &amp;= <span class="bu">Object</span>.<span class="fu">equals</span>(</span><span id="cb10-33"><a href="#cb10-33" aria-hidden="true"></a>                data.<span class="fu">getDeclaredField</span>(duplicateConditionField).<span class="fu">get</span>(data), </span><span id="cb10-34"><a href="#cb10-34" aria-hidden="true"></a>                targetData.<span class="fu">getDeclaredField</span>(duplicateConditionField).<span class="fu">get</span>(targetData)</span><span id="cb10-35"><a href="#cb10-35" aria-hidden="true"></a>            );</span><span id="cb10-36"><a href="#cb10-36" aria-hidden="true"></a>        }</span><span id="cb10-37"><a href="#cb10-37" aria-hidden="true"></a>        <span class="kw">return</span> isExist;</span><span id="cb10-38"><a href="#cb10-38" aria-hidden="true"></a>    }).<span class="fu">collect</span>(Collectors.<span class="fu">toList</span>()).<span class="fu">size</span>(), <span class="dv">0</span>) || !isForeignKeyExist) {</span><span id="cb10-39"><a href="#cb10-39" aria-hidden="true"></a>        <span class="kw">return</span>;</span><span id="cb10-40"><a href="#cb10-40" aria-hidden="true"></a>    }</span><span id="cb10-41"><a href="#cb10-41" aria-hidden="true"></a></span><span id="cb10-42"><a href="#cb10-42" aria-hidden="true"></a>    <span class="co">// 不满足重复条件且外键都存在时，进行数据更新</span></span><span id="cb10-43"><a href="#cb10-43" aria-hidden="true"></a>    <span class="kw">for</span> (field : targetData.<span class="fu">getDeclaredFields</span>()) {</span><span id="cb10-44"><a href="#cb10-44" aria-hidden="true"></a>        field.<span class="fu">set</span>(targetData, newValues.<span class="fu">get</span>(field.<span class="fu">getName</span>()).<span class="fu">toTargetType</span>());</span><span id="cb10-45"><a href="#cb10-45" aria-hidden="true"></a>    }</span><span id="cb10-46"><a href="#cb10-46" aria-hidden="true"></a></span><span id="cb10-47"><a href="#cb10-47" aria-hidden="true"></a>    updateByIdMethod.<span class="fu">invoke</span>(selfField.<span class="fu">get</span>(<span class="kw">this</span>), targetData);</span><span id="cb10-48"><a href="#cb10-48" aria-hidden="true"></a></span><span id="cb10-49"><a href="#cb10-49" aria-hidden="true"></a>    <span class="kw">return</span> ...; <span class="co">// 返回值</span></span><span id="cb10-50"><a href="#cb10-50" aria-hidden="true"></a>}</span></code></pre></div><p>考虑到增改功能逻辑也比较类似，因而增加功能的伪代码不再再次列出。</p><p>借此，大量类似的代码也可以被大幅省略，从而大幅减少工作量，同时也减少了冗余代码。</p><p>当然，这里也可以考虑使用拼接<code>SQL</code>的方法。不过考虑到后端开发上应该尽可能不写或少写原生的<code>SQL</code>，因而这一种写法更符合规范些。</p><p>通过利用上述的写法，项目中的代码可以精简许多，由此也可以使得所需要的测试代码大幅减少，从而使得项目整体的工作量大量降低。事实上，正是由于当前项目中有大量逻辑比较类似的代码，导致为满足覆盖率所需的测试代码非常庞大，从而难以完成自动化测试代码的编写。</p><p>除此之外，一些类内的方法也可以作出一些更改。考虑到方法链的写法更加符合直觉，且也在一定程度上能提升开发效率并使代码更加简洁（尽管在一定程度上破坏了<code>.</code>运算符的原有语义，且也不是很符合 <a href="CQRS">CQRS</a>），因而我个人更倾向于尽可能使用方法链的写法。</p><h3 id="前端">前端</h3><p>我个人而言也作为开发人员参与到了前端组的开发中。事实上最大的优化点在于接口调用的时机。当前，前端组在页面渲染时会请求一次后端接口，获取全部数据并渲染到页面上。之后，在进行关键词查找、数据插入、数据删除时各自会调用一次接口。至此为止都是比较合理的，当数据量庞大时前端不应该负责数据的查找工作，利用在服务器侧进行过优化的查询接口比较合理。然而，前端在进行数据编辑时，则是采用下面的流程：</p><pre class="mermaid"><code>flowchart TD    A[页面选中数据] --&gt; B[获取数据id]    B --&gt; C[根据id再次调用后端接口获取全部数据]    C --&gt; D[根据后端返回渲染页面]    D --&gt; E[用户输入完成后再次调取后端更新数据接口]</code></pre><p>由于在包含全部数据的页面进行初期渲染时每条数据的全部内容前端都已经获取到，因而选中数据进入编辑页面时完全可以直接利用前端已经拿到的数据进行渲染，不需要再次调用后端端口。且不谈在网络延迟较高的情况下，上面的做法会使得用户体验较差，在服务器有大量请求的情况下，前端冗余的调用会加重服务器的负担，从而影响性能。</p><p>另一方面我也注意到，前端由于没有将方法应用到了页面渲染的各个阶段，从而导致了某些请求会被重复多次执行，这也是影响性能的一大问题。当然，最好的解决方法应是前后端都做一下防抖处理。</p><h2 id="一些其他">一些其他</h2><p>开发上的问题大体如上，基本上都是后续项目中值得进行进一步更改的地方。除此以外，整个项目的生命周期中最最值得被后续继承的地方在于严格的PR-Code Review制度与文档的维护。其中前者保证了代码的质量与规范，后者则提高了有效沟通的效率。这两者才是在开发过程中降低工作量与各类成本的最关键因素。</p><h2 id="名词释义">名词释义</h2><h3 id="rad">RAD</h3><p>快速应用开发模型（Rapid Application Development），又称V模型。似乎是为了改进瀑布式模型而在上世纪70至80年代提出的。这一模型大体上遵循下图的几个阶段：</p><figure><img src="https://pikapikapikaori.github.io/pikapikapi-blog/archive/ITtech/_media/SoftwareInsights-20230428/RAD-model.webp" alt="" /><figcaption>picture</figcaption></figure><h3 id="微服务">微服务</h3><p>SOA（面向服务架构）的一种变体，提倡将单一应用程序划分为松耦合的服务组，每个服务可独立部署。其概念最早于2005年提出。</p><figure><img src="https://pikapikapikaori.github.io/pikapikapi-blog/archive/ITtech/_media/SoftwareInsights-20230428/microservice.png" alt="" /><figcaption>picture</figcaption></figure><h3 id="微前端">微前端</h3><p>2016年被正式提出，是微服务这一概念被扩展到前端的一种应用形式，便于新老项目的共存与过渡，以及项目独立开发等。</p><figure><img src="https://pikapikapikaori.github.io/pikapikapi-blog/archive/ITtech/_media/SoftwareInsights-20230428/mircro-frontend.png" alt="" /><figcaption>picture</figcaption></figure><h3 id="java反射机制"><code>Java</code>反射机制</h3><p><code>Java</code>先编译后运行，对象类型在编译期确定。在程序运行时类被动态加载，当类没被用到时没有被加载到JVM，因而利用反射，可以在运行时获得类的各种内容。通过利用反射，可以动态地创建对象，更加灵活，但是会消耗系统资源。</p><h3 id="cqrs">CQRS</h3><p>Command Query Responsibility Segregation，即命令查询职责分离模式，要求一个方法更改对象的状态或返回一个结果，但是不能同时包含这两个行为。从某种角度来说算是继承了从前将系统交互视为CRUD的思想。相较之下，方法链（Method Chaining）语法中由于对象被引用一次即可被多次调用，从某种意义上违反了这一原则。</p><p>更具体的，符合CQRS与<code>.</code>运算符原有语义（<code>调用者.操作名</code>）的写法形如下面的形式：</p><div class="sourceCode" id="cb12"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a>Person p = <span class="kw">new</span> <span class="fu">Person</span>();</span><span id="cb12-2"><a href="#cb12-2" aria-hidden="true"></a>p.<span class="fu">getWater</span>();</span><span id="cb12-3"><a href="#cb12-3" aria-hidden="true"></a>p.<span class="fu">drinkWater</span>();</span><span id="cb12-4"><a href="#cb12-4" aria-hidden="true"></a>p.<span class="fu">getThirsty</span>();</span></code></pre></div><p>而方法链则形如下面的形式：</p><div class="sourceCode" id="cb13"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a><span class="kw">new</span> <span class="fu">Person</span>().<span class="fu">getWater</span>().<span class="fu">drinkWater</span>().<span class="fu">getThirsty</span>();</span></code></pre></div><p>这种写法更符合直觉，同时可以节省临时变量、简化代码。</p><h2 id="参考资料">参考资料</h2><ol type="1"><li>When I should use one to one relationship? (2012, September 7). Stack Overflow. https://stackoverflow.com/questions/12318870/when-i-should-use-one-to-one-relationship</li><li>search using regex in JPA. (2020, June 15). Stack Overflow. https://stackoverflow.com/questions/62379559/search-using-regex-in-jpa</li><li>Using Java Reflection. (n.d.). Using Java Reflection. https://www.oracle.com/technical-resources/articles/java/javareflection.html</li><li>Rapid application development - Wikipedia. (2014, July 2). Rapid Application Development - Wikipedia. https://en.wikipedia.org/wiki/Rapid_application_development</li><li>Jackson, C. (2019, June 19). Micro Frontends. martinfowler.com. https://martinfowler.com/articles/micro-frontends.html</li><li>M. (n.d.). CQRS pattern - Azure Architecture Center. CQRS Pattern - Azure Architecture Center | Microsoft Learn. https://learn.microsoft.com/en-us/azure/architecture/patterns/cqrs</li><li>Method chaining - why is it a good practice, or not? (2009, July 9). Stack Overflow. https://stackoverflow.com/questions/1103985/method-chaining-why-is-it-a-good-practice-or-not</li></ol>]]></content>
    <pubDate>Sat, 13 Apr 2024 14:51:20 +0800</pubDate>
  </entry>
   
  <entry>
    <title><![CDATA[个人博客搭建心得（壹）：以CSS 3为代表的一些前端开发感悟]]></title>
    <link>https://pikapikapikaori.github.io/pikapikapi-blog/#/archive/ITtech/BlogBuildingNotesOne-20230508</link>
    <guid isPermaLink="false">https://pikapikapikaori.github.io/pikapikapi-blog/#/archive/ITtech/BlogBuildingNotesOne-20230508</guid>
    <content type="html"><![CDATA[<h1 id="个人博客搭建心得壹以css-3为代表的一些前端开发感悟">个人博客搭建心得（壹）：以CSS 3为代表的一些前端开发感悟</h1><blockquote><p>本文首发于个人博客<br />发表日期：2023.05.08<br />最后编辑于：{docsify-last-updated}</p></blockquote><h2 id="前期考虑">前期考虑</h2><p>最近搭个人博客，最终选择了利用Docsify这个框架，主要原因有这么几点；</p><h3 id="经济成本">经济成本</h3><p>尽管家里有两台有公网的服务器，但考虑到备案的时间长短、以及一些其他的隐性成本，因而使用家里服务器甚至于国内可购买的服务器都不是一个很好的选择。相应的，如果在国外购买服务器一是支付方式不便捷，二来需要较高的成本。</p><p>相较之下由于我的个人博客不会有超大量的文章以及评论等，因而可以直接部署的静态网页成了一个相当好的选择。以GitHub Pages和Vercel为代表的一众平台都给个人用户提供了较多的资源用于前端搭建，使得搭建博客的成本可以大大降低。同时，这些平台都支持https协议，并且生成的域名也不是很难看。即使实在不喜欢也可以很容易的自己购买域名进行配置，非常简便。</p><h3 id="开发成本">开发成本</h3><p>由于我更希望我的博客注重于转写文章本身而非锻炼开发能力之类的，因而使用现成的博客框架是第一考虑。</p><p>看了很久博客框架发现Docsify算是一个比较轻量级的框架。首先Docsify本身的快速搭建是极方便的，宣扬的十分钟还是半小时搭一个简单网页确实不是吹的。更重要的是，动态渲染这一特性不像Hexo为代表的其他框架一样需要编译甚至部署后才能查看，相反本地起个server就能即使看到效果，这对博客定制化开发与博客内容的撰写都是相当方便的一大特性。由动态渲染这一特性延伸出来的便是二次开发的高度灵活性。借用Docsify自身提供的几个钩子，甚至不用也行，可以直接以UMD方式挂在其他前端轮子，或者自己写好css和js后直接挂载进来，而无需其他的一系列操作。相较之下Hexo、Vuepress为代表的其他框架可能开发上就相对死板一些，不是很符合我个人喜好。</p><h3 id="docsify总结">Docsify总结</h3><p>总体来看Docsify现成轮子会相对少一点，不过这些东西可以自己随便写写玩反倒更灵活自由，不过动态渲染这一点使得撰写与开发都相当便捷这是我很喜欢的一点。当然SEO可能会相对差一点，不过这一点一来可以考虑利用v4提供的SSR来解决，相反即使不解决我都部署在GitHub Pages上了我显然是不需要也不想要做这个的。</p><p>总之再用上这么个框架后，为了满足自己喜好加点自己想要的花里胡哨的界面啊功能啊之类的东西，最近写了不少原生的html 5 + css 3 + js代码，确实是有不少感悟。</p><h2 id="css">CSS</h2><!-- panels:start --><!-- div:left-panel --><p>感悟最深的大概就是css的使用了。说实话一直以来我其实在服务端做的东西比较多，前端基本上就是用用组件库应付应付课设，也不会特别关注美观度啊动画啊之类的东西。写博客为了想要点好看的东西不得不好好看看css写法，发现原来css还能玩的这么花里胡哨。比如在我博客的<a href="/writings/BriefComments">随笔下的短评部分</a>，我想要以年为单位记录短评，每个年份类似一个details标签的行为，但是默认的details标签样式实在太丑了，我也不想为了这么个简单的小功能写一大段js挂在到<code>index.html</code>，看了看stackoverflow上发现可以用伪元素来写：</p><p>当然这里用了<code>@media</code>来做响应式，这也是以前很少考虑的一点。一方面基本上不会怎么去做不同分辨率屏幕的适配，一方面就算做基本上也就是用个ElementUI的布局就算完事了。现在想想感觉其实是有点太依赖组件库了，不是一个很好的事。最近想试试用Swift写Web后端的时候第一反应也是看看Vapor怎么用，感觉确实是有点太思维定势了：后端用框架、前端用框架加组件库。工程上说挺合理的，节约成本。不过自己开发的时候一来是高度定制化的需求很难满足，二来确实会少很多乐趣。</p><!-- div:right-panel --><iframe width="100%" height="300px" src="//jsfiddle.net/pikapikapi/b9Lu37v6/embedded/html,css,result/?fontColor=c6a2eb&amp;accentColor=c6a2eb" allowfullscreen="allowfullscreen" allowpaymentrequest frameborder="0"></iframe><!-- div:left-panel --><p>说回css，这个伪元素确实是个很好用的东西。同样是这个界面，我想在标题之间加个分割线，希望这个分割线是中间有个小星星，然后左右有两条短线；而在短评内部最下方日期上希望有个动态的吃豆人分割线。同样是利用了伪元素就可以很简单的实现：</p><p>这里<code>animation</code>和<code>@keyframe</code>也是css 3新特性，可以很方便的去做动画效果。</p><!-- div:right-panel --><iframe width="100%" height="300px" src="//jsfiddle.net/pikapikapi/pyb42tus/10/embedded/html,css,result/?fontColor=c6a2eb&amp;accentColor=c6a2eb" allowfullscreen="allowfullscreen" allowpaymentrequest frameborder="0"></iframe><!-- div:left-panel --><p>当然也可以利用<code>transform</code>这个新特性来做动画效果。这个博客上右侧的小组件显示隐藏逻辑就是这么做的：</p><!-- div:right-panel --><iframe width="100%" height="300px" src="//jsfiddle.net/pikapikapi/ft3kares/28/embedded/?fontColor=c6a2eb&amp;accentColor=c6a2eb" allowfullscreen="allowfullscreen" allowpaymentrequest frameborder="0"></iframe><!-- panels:end --><h2 id="js">js</h2><!-- panels:start --><!-- div:left-panel --><p>另外js上碰到的最大的麻烦是想做个查看大图的功能，看了看stackoverflow上比较高的做法是做一个宽<code>100vw</code>高<code>100vh</code>的整体span，点击图片把span的<code>display</code>设成<code>block</code>，再点span设成<code>none</code>，不过那个版本太粗糙还有很多问题，比如我要放按钮的话子元素点击也会触发父元素的。今天重构了一下大概变成现在的样子：</p><p>思路还是用span遮盖，同时设置<code>z-index</code>防其他事件的影响，在span里面放div来包裹组件，同时span的点击事件先去根据事件的<code>target.id</code>来判断触发者，从而来确保子元素点击事件不会总是触发父元素的点击事件。</p><p>js逻辑里拿元素根据类名做filter的步骤感觉可以用<code>querySelectorAll</code>来简化一下。</p><p>另外也用<code>backdrop-filter</code>和<code>-webkit-backdrop-filter</code>做了个毛玻璃的背景效果，更好看些。</p><!-- div:right-panel --><iframe width="100%" height="300" src="//jsfiddle.net/pikapikapi/fkt849L2/15/embedded/?fontColor=c6a2eb&amp;accentColor=c6a2eb" allowfullscreen="allowfullscreen" allowpaymentrequest frameborder="0"></iframe><!-- panels:end --><h2 id="参考资料">参考资料</h2><ol type="1"><li>How to position marker to come after. (2019, June 25). Stack Overflow. https://stackoverflow.com/questions/56758098/how-to-position-detail-marker-to-come-after-summary</li><li>How do I make an image full screen on click? (2021, June 3). Stack Overflow. https://stackoverflow.com/questions/67815853/how-do-i-make-an-image-full-screen-on-click</li></ol>]]></content>
    <pubDate>Sat, 13 Apr 2024 14:51:20 +0800</pubDate>
  </entry>
  
</channel>
</rss>
