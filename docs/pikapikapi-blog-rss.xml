<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
<channel>
  <title>Pikapikapi Blog</title>
  <atom:link href="https://pikapikapikaori.github.io/pikapikapi-blog/pikapikapi-blog-rss.xml" rel="self" type="application/rss+xml" />
  <link>https://pikapikapikaori.github.io/pikapikapi-blog</link>
  <description>Pikapikapi Blog</description>
   
  <entry>
    <title><![CDATA[近期艺术展 甲辰年七月十八日]]></title>
    <link>https://pikapikapikaori.github.io/pikapikapi-blog/#/writings/ArtExhibit-20240718</link>
    <guid isPermaLink="false">https://pikapikapikaori.github.io/pikapikapi-blog/#/writings/ArtExhibit-20240718</guid>
    <content type="html"><![CDATA[<h1 id="近期艺术展-甲辰年七月十八日">近期艺术展 甲辰年七月十八日</h1><figure><img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExhibit-20240718/cover-picture.jpg" alt="" /><figcaption>picture</figcaption></figure><blockquote><p>本文首发于个人博客<br />发表日期：2024.07.18<br />最后编辑于：{docsify-last-updated}</p></blockquote><h2 id="中法女性短片展">中法女性短片展</h2><blockquote><p>外滩源壹号<br />创造中的她 中法女性电影项目 欧洲国家珍藏展<br /><ruby class='minority-language-font-ruby'>Réponse De Femmes</ruby></p></blockquote><p>没有图。说是短片展倒确实是短片展，聚焦于女性本身的这种女性主义在如今已经被解构的不成样子了。从福柯到拉康到波伏娃，多年来的女性主义重复着父权压迫与女性受迫的二元对立范式而即使是这样的对立范式也早已经被拉康那句“根本不存在性关系”推向了消解的必然道路。</p><p>当然说回本展，取材多为 19 世纪 20 至 40 年代，少数取 70 或 80 年代的作品片段，注定着短片的主题都还聚焦于先天的女性性别本身。选片上都比较讲究，然而时长控制确实比较微妙了。本身观展时间其实应该被控制一下的，然而不说选取了数个四五十分钟长的片段，甚至在最后还要专门进行完整放映「人·鬼·情」其实比较冗长了。展厅设置上确实有注重多样性和观影舒适性，但是整体排布和轮播的影片就形式设置上感觉还是可以有更多的考量，毕竟影片作为有独特时间尺度的视觉艺术并不同于装置、绘画、建筑、摄影等视觉艺术。</p><h2 id="安藤忠雄展">安藤忠雄展</h2><blockquote><p>嘉源海美术馆<br />安藤忠雄建筑：对话</p></blockquote><p>郊区风景确实好，展出则有点不如预期了。大量的手稿、模型和设计图等都确实很有参考价值，本人参与设计的美术馆本身加之展厅排布也都挺值得好好品味倒是确实。不过一方面展出内容还是有些显少，另一方面半部还原的光之教堂光线上确实完全不同。我想建筑果然还是应当去实地考察吧。就美术馆本身而言其实倒和一贯的风格不太一致，不是那种后现代解构到最末的剥离人本元素的无机与自然感，反而是现代性和自然的融合。</p><p>遗憾的是过去才发现相机没电只能拿手机拍了，不过也没错过太多姑且将就看吧。</p><section class="multi-images-container-section"><p><img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExhibit-20240718/picture-1.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExhibit-20240718/picture-6.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExhibit-20240718/picture-2.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExhibit-20240718/picture-3.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExhibit-20240718/picture-4.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExhibit-20240718/picture-5.jpg" alt="picture" /></p></section><h2 id="附题图组图">附：题图组图</h2><section class="multi-images-container-section"><p><img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExhibit-20240718/picture-7.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExhibit-20240718/picture-8.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExhibit-20240718/picture-9.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ArtExhibit-20240718/picture-10.jpg" alt="picture" /></p></section>]]></content>
    <pubDate>Thu, 18 Jul 2024 03:38:26 +0800</pubDate>
  </entry>
   
  <entry>
    <title><![CDATA[软件项目实践的一些思索与后期优化方向：设计、开发以及其他]]></title>
    <link>https://pikapikapikaori.github.io/pikapikapi-blog/#/archive/ITtech/SoftwareInsights-20230428</link>
    <guid isPermaLink="false">https://pikapikapikaori.github.io/pikapikapi-blog/#/archive/ITtech/SoftwareInsights-20230428</guid>
    <content type="html"><![CDATA[<h1 id="软件项目实践的一些思索与后期优化方向设计开发以及其他">软件项目实践的一些思索与后期优化方向：设计、开发以及其他</h1><blockquote><p>本文首发于个人博客<br />发表日期：2023.04.28<br />最后编辑于：{docsify-last-updated}</p></blockquote><p>大四下最后的一门课也结束了。这门课大体是由数个人组成一个小小团体进行一个小小项目从零到一的完整开发过程，不同于其他课程，这个项目要求以类似于实际开发的模式，让所有参与者都经历由需求确定、初期架构设计到中期开发、版本发布甚至于是需求变更以及迭代的完整软件开发的整个生命周期。当然其中也包括不同团队间的沟通协商。</p><p>大体而言我在其中以项目经理、架构设计、团队 Leader 等各种身份参与了后端的完整开发，并也作为开发者参与到了前端部分的开发任务中。个人从中确实有不少感悟，故而写此文记录。在这里主要想谈谈设计、开发的一些感想，诸如进度管理、质量把控等等可能也略有涉及。</p><h2 id="项目背景">项目背景</h2><p>大体而言这个课程项目要求做一个宠物医院的线上学习平台，主要受众大概就是即将毕业或是正在大学学习的兽医相关专业的学生。其功能简要来讲大概有这么几类：</p><ul><li>用户管理与鉴权：常规的大系统都有的功能，这里大体上就分为管理员、出题的老师和进行学习的学生三类用户。</li><li>一个完整医院的 3D 全景地图与导览模型：前端开发为主的功能，本文不涉及。</li><li>系统管理：要求对这个宠物医院内诸如药物、档案、收费项目、各类检查项目、住院者的信息等等各类内容进行管理，不过这个东西似乎没有在需求文档中体现出实际的意义与用处。</li><li>病例管理：大体上是需要把来医院就诊过的各类病例收集起来存储，其包括从入院诊断、具体检查到诊断结果与治疗方案等全过程的文字图片视频信息，当然也包括得的病的信息。</li><li>测试管理：由病例管理上游的疾病部分内容衍生而来。老师根据疾病生成题库，并从中选题整理为试卷。学生则参加考试进行答题。不过这部分内容似乎与虚拟宠物医院没有太大关系。</li><li>职能学习：一方面是让学生去学习疾病的相关知识（当然要看文字图片视频），一方面学生也可以通过看文字图片视频学习医院内各类角色（医生、医助等等）的具体操作内容。</li><li>数据管理：和上面提到的图片视频的存储有关。需求上还挺麻烦的，视频格式支持太多还需要进行视频的格式转换，反应到和用户的交互上来说还需要实现分块上传等功能等。</li></ul><p>尽管后文对具体业务尽量不会涉及，但姑且将背景记于这里。不难看出这个项目还是一个比较传统的要用到数据库后端前端三个维度的项目，因而后文也主要想从这三个维度的设计与开发两方面来聊聊。</p><p>项目可以参考：</p><ul><li><a href="https://github.com/SoftwareDevelopmentPractice6/virtualPetHospital-backend">后端</a></li><li><a href="https://github.com/SoftwareDevelopmentPractice6/virtualPetHospital-frontend">前端</a></li></ul><p>本博客的仓库中也保存了相关的源码，可以参考<a href="https://github.com/pikapikapikaori/pikapikapi-blog/tree/master/resource/ITtech/SoftwareInsights-20230428">这里</a>。</p><h2 id="设计">设计</h2><p>由于课程要求重各类文档，因而并没有采取如今主流的敏捷开发模式，而是采取的 <a href="#RAD">RAD</a> 模型。个人来讲其实并不是很习惯这个模型，一方面其由瀑布式改进而来，从某种角度上还是非常重文档和前期的设计的，对需求的变更与过程中的变化并不敏感，另一方面也是因此在开发过程中的抗风险能力也非常依赖于前期的设计以及开发过程中的质量，由此带来的风险是非常恐怖的。</p><p>总之也是因此在进行前期设计时就花了相当多的时间。然而尽管如此，初期的设计还是有着比较大的漏洞，因而也给后期开发带来了一些麻烦。这些问题大多集中在数据库设计上。</p><h3 id="数据库设计">数据库设计</h3><p>由于项目较为庞大因而一些细节的设计我也没有来得及能够去亲自把控，而是交给了同组的其他人。在这里就出了问题。上文所述的测试管理中，题库中的问题需要记录与其相关的问题类别（属于哪种病）、问题类型（单选多选）、问题内容等等。针对此负责这块内容的组员 A 给出了这样的设计：</p><pre class="mermaid"><code>erDiagramExam {int exam_id PKstring exam_name}Paper {int paper_id PKstring paper_nameint exam_id FKstring durationstring total_score}Question {int question_id PKstring question_contentstring question_typeint category_id FK}Category {int category_id PKstring category_name}ExamSession {int session_id PKint paper_id FKtime start_timetime end_time}StudentResult {int result_id PKint session_id FKint student_idint score}Exam ||--|| Paper : relatePaper ||--|| ExamSession : relateQuestion }o--|| Category : containsExamSession ||--o{ StudentResult : relate</code></pre><p>且不谈同学A遗漏了需要对每张卷子上包含的题目、以及每位学生在试卷上答题所做出的回答进行存储的功能，单看 <code>Question</code> 与 <code>Category</code> 两张表。乍一看虽然是挺合理的设计，然而后者的实际有效字段只有 <code>category_name</code> 一栏。我不否认在大型项目中这样设计的合理性，但是考虑到这个项目的规模、以及后续可能会进行的功能上的拓展，我个人看来 <code>Category</code> 这张表完全冗余的。</p><p>另一方面，<code>Exam</code>、<code>Paper</code>、<code>ExamSession</code> 这三张一对一的表虽然也是很符合设计原则的设计，但是同样考虑到项目规模与未来可能的拓展，这三张表就算合在一起也不会对性能与吞吐量带来很大的负担。一般来讲，只有在表中有一栏以上可能包含大量空值的情况下，或是某一些栏可能被频繁更新时，一对一关系的设计才相对合理。而在当前的情形中，这样的设计则是给后期撰写 <code>SQL</code> 与开发上带来了巨大的麻烦。且不谈数据的整合与处理，仅仅是外键的存在就已经带来了巨大的麻烦。这也直接导致了在后期初始化数据 <code>SQL</code> 撰写上耗费了大量Debug的时间，在开发的编码中也需要增加大量检测外键存在性的不必要代码。</p><h3 id="后端架构设计">后端架构设计</h3><p>初期设计时我就已经敲定了<a href="#微服务">微服务</a>的架构。通常，微服务确实不适合于本项目这样的小型项目：配置麻烦、DevOps 麻烦，等等。此外，大型项目中服务间数据一致性以及安全性都是非常棘手且关键的问题。</p><p>不过事实上，我其实很看重松散耦合这一点。其给后期开发与迭代过程中带来的自由度是相当大的。前述的问题，如配置、DevOps 的确相对棘手，不过包含公用模块、各类插件的配置在初期完成后便一了百了，运维上利用 Docker 与统一的脚本进行自动化管理也是一经配置后就极易使用的，并没有给开发人员带来很高的成本。倘若有购买服务器配置 Jenkins 进行更多的自动化的话，相关成本应该还能进一步降低。</p><p>实践中，jacoco、spotless、公共模块的配置实质上也仅仅耗费了我半天的时间，而后期部署时自动化测试脚本的编写仅仅耗费了我两个小时不到的时间。接口测试上所花费的时间略多一点，不过由于接口测试脚本基本是直接由 swagger 生成的，因而也没有耗费太多的成本。</p><p>相较于这些仅局限于初期和末期的麻烦而言，微服务架构带来的好处是实打实巨大的。数据库与模块的分离带来的是各模块开发的高独立性以及运行时的高可用性。前文所提到的数据库尽管经常会碰到组员产生的 Bug，但分离的数据库使得其余的几个模块并没有受到影响从而能够很顺利的进行开发。另一方面，后端模块的分离使得几个模块都能够被快速地开发出来，也因此能够较早地将接口给到前端，从而留出了大量可用于迭代的时间。产生缺陷时查找定位的范围仅仅在自身的子系统内，因而定位缺陷的成本也略有降低。而最最重要的，由于模块间的松散耦合，即使一个服务失败其他服务也能够继续工作，这给开发与测试都带来了相当程度上的便捷。</p><p>更具体的，微服务给实践中的开发带来了巨大的便捷性。我在项目中大概采取了下图的架构：</p><pre class="mermaid"><code>flowchart LR    subgraph backend        subgraph modules            direction TB            subgraph module 1                direction LR                entity1 --&gt; dao1 --&gt; service1 --&gt; controller1            end            subgraph module 2                direction LR                entity2 --&gt; dao2 --&gt; service2 --&gt; controller2            end            subgraph module 3                direction LR                entity3 --&gt; dao3 --&gt; service3 --&gt; controller3            end            subgraph module 4                direction LR                entity4 --&gt; dao4 --&gt; service4 --&gt; controller4            end        end        subgraph intermediator            direction LR            servicei --&gt; controlleri        end        controller1 --&gt; servicei        controller2 --&gt; servicei        controller3 --&gt; servicei        controller4 --&gt; servicei    end    subgraph database        databse1 --&gt; entity1        databse2 --&gt; entity2        databse3 --&gt; entity3        databse4 --&gt; entity4    end    controlleri --&gt; frontend</code></pre><p>作为微服务而言其实也是非常常见与合理的架构。中间层充当网关的角色被外部服务（前端）统一调用，其内部则再根据具体的调用请求来选择合适的服务进行通信，并将数据进行处理后转发给外部服务。在实践中，前端组与后端组同时开发，需求细节与开发细节还不明了的情况下，接口的内容与种类尽管可以大体确定，但具体的数据内容与种类等都是难以确定的。因而，利用中间层也即网关这一角色，接口确定的难题得以被解决。前后端可以先按照自己的想法对接口进行设计与模拟，当有一定的进度、对接口需求更加明确时再利用中间层进行数据的整合与处理，从而节约了大量沟通与修改的时间。</p><pre class="mermaid"><code>sequenceDiagram    Frontend-&gt;&gt;+Intermediator: Request    Intermediator-&gt;&gt;+Module: Processed Request    Module--&gt;&gt;-Intermediator: Response    Intermediator--&gt;&gt;-Frontend: Processed Response</code></pre><p>实践上，数据的转发与整合可以由后端的网关接管，也可以由前端利用 nodejs 来开发，无论哪种都是非常灵活的。事实上，nodejs 构建的中间层或称 node 层的出现，就是为了让前后端都更关注于业务本身。尽管层数的增加可能会给性能带来一些影响，然而这与开发效率所节省的成本相比是微乎其微的。由过去后端渲染 html 发送给浏览器的前后端不分离，到前后端分离开发再到中间层的进化，我想这是一个相当自然的过程，也非常值得去学习与应用。</p><p>此外，采取微服务架构，后期的扩展性也是相当高的。一方面，需要增加新业务时可以直接以模块为单位进行添加，而不需要再去对原有代码进行改动。另一方面，甚至也可以将同一服务运行在多台服务器上，并利用 Eureka、Ribbon 等等组件进行负载均衡与健康检查的功能，从而能够进一步提升可用性与性能，这些都是单体应用难以带来的好处。</p><p>当然，微服务的思想也能直接应用到前端上，也就是前些年提出的<a href="#微前端">微前端</a>的思想。似乎前端组也有利用这一思想进行开发，不过本文就先不作赘述了。</p><h2 id="开发">开发</h2><h3 id="后端开发仍存在的问题">后端开发仍存在的问题</h3><p>开发上后端直接采用了 SpringBoot 的四层架构，基本上实现了增删改查四类功能。同时，调数据库方面使用了JPA。</p><p>需求上，为了满足全字段搜索、以及较简单的增删改功能，考虑到开发上的便捷性，查询相关的业务逻辑大体都是采取了下面的写法：</p><div class="sourceCode" id="cb4"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="kw">public</span> JSONObject <span class="fu">getFeature</span>(</span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>        <span class="bu">Integer</span> funcId,</span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>        <span class="bu">String</span> funcName,</span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>        <span class="bu">String</span> funcDescription,</span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a>        <span class="bu">String</span> funcFlow,</span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a>        <span class="bu">String</span> funcRole,</span><span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a>        <span class="bu">String</span> funcTool,</span><span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a>        <span class="bu">String</span> roomName) {</span><span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a>    JSONObject res = <span class="kw">new</span> <span class="fu">JSONObject</span>();</span><span id="cb4-10"><a href="#cb4-10" aria-hidden="true"></a>    res.<span class="fu">put</span>(</span><span id="cb4-11"><a href="#cb4-11" aria-hidden="true"></a>            Constants.<span class="fu">featureList</span>,</span><span id="cb4-12"><a href="#cb4-12" aria-hidden="true"></a>            JSONObject.<span class="fu">parseArray</span>(JSON.<span class="fu">toJSONString</span>(featureRepository.<span class="fu">findAll</span>().<span class="fu">stream</span>()</span><span id="cb4-13"><a href="#cb4-13" aria-hidden="true"></a>                    .<span class="fu">filter</span>(feature -&gt; SearchJudgeHelper.<span class="fu">softEquals</span>(funcName, feature.<span class="fu">getFuncName</span>())</span><span id="cb4-14"><a href="#cb4-14" aria-hidden="true"></a>                            &amp;&amp; SearchJudgeHelper.<span class="fu">softIncludes</span>(funcDescription, feature.<span class="fu">getFuncDescription</span>())</span><span id="cb4-15"><a href="#cb4-15" aria-hidden="true"></a>                            &amp;&amp; SearchJudgeHelper.<span class="fu">softIncludes</span>(funcFlow, feature.<span class="fu">getFuncFlow</span>())</span><span id="cb4-16"><a href="#cb4-16" aria-hidden="true"></a>                            &amp;&amp; SearchJudgeHelper.<span class="fu">softIncludes</span>(funcRole, feature.<span class="fu">getFuncRole</span>())</span><span id="cb4-17"><a href="#cb4-17" aria-hidden="true"></a>                            &amp;&amp; SearchJudgeHelper.<span class="fu">softEquals</span>(funcTool, feature.<span class="fu">getFuncTool</span>())</span><span id="cb4-18"><a href="#cb4-18" aria-hidden="true"></a>                            &amp;&amp; SearchJudgeHelper.<span class="fu">softEquals</span>(</span><span id="cb4-19"><a href="#cb4-19" aria-hidden="true"></a>                                    roomName, feature.<span class="fu">getFeatureRoom</span>().<span class="fu">getRoomName</span>())</span><span id="cb4-20"><a href="#cb4-20" aria-hidden="true"></a>                            &amp;&amp; SearchJudgeHelper.<span class="fu">softEquals</span>(funcId, feature.<span class="fu">getFuncId</span>()))</span><span id="cb4-21"><a href="#cb4-21" aria-hidden="true"></a>                    .<span class="fu">collect</span>(Collectors.<span class="fu">toList</span>()))));</span><span id="cb4-22"><a href="#cb4-22" aria-hidden="true"></a>    <span class="kw">return</span> ResponseHelper.<span class="fu">constructSuccessResponse</span>(res);</span><span id="cb4-23"><a href="#cb4-23" aria-hidden="true"></a>}</span></code></pre></div><p>先说查询逻辑。为了少写 <code>SQL</code> 因而这里是直接调用了 JPA 的 <code>findAll</code> 方法，随后利用 <code>Java</code> 的流函数对其进行遍历筛选，由此得到目标结果以返回。判断相等或包含的方法由自建类进行处理，以满足空数值的比较操作，例如：</p><div class="sourceCode" id="cb5"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="kw">public</span> <span class="dt">static</span> <span class="bu">Boolean</span> <span class="fu">softEquals</span>(<span class="bu">String</span> toBeJudged, <span class="bu">String</span> referencedValue) {</span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>    <span class="kw">try</span> {</span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>        <span class="kw">return</span> (Objects.<span class="fu">equals</span>(toBeJudged, <span class="kw">null</span>) || Objects.<span class="fu">equals</span>(toBeJudged, <span class="st">&quot;&quot;</span>))</span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>                ? <span class="kw">true</span></span><span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>                : Objects.<span class="fu">equals</span>(referencedValue, <span class="bu">URLDecoder</span>.<span class="fu">decode</span>(toBeJudged, Constants.<span class="fu">UTF8</span>));</span><span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a>    } <span class="kw">catch</span> (<span class="bu">UnsupportedEncodingException</span> e) {</span><span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a>        <span class="kw">return</span> <span class="kw">false</span>;</span><span id="cb5-8"><a href="#cb5-8" aria-hidden="true"></a>    }</span><span id="cb5-9"><a href="#cb5-9" aria-hidden="true"></a>}</span></code></pre></div><p>小型项目中这样的写法大体上是没什么问题的，但如果遇上较大的项目这样的写法绝对会出很大的问题。一来，论谁都能看出的遍历查询的性能问题，在十万级别数据量下大概就能有很直观的感受了，这一工作本来应该在数据库中利用索引来优化解决。二来，大量的吞吐量给服务器带来了IO上巨大负担。其潜在的风险是难以估量的。</p><p>为了在满足需求的基础上尽可能简化开发上的工作量（即少写 <code>SQL</code> 与对应的函数），我目前的想法是利用正则表达式（例如MySQL中的 <code>REGEXP</code> 关键字）进行查询，由此将查询的相关工作返还给数据库。利用数据库内部的索引等机制对查询进行优化（MySQL 内部索引的 B+ 树能带来数倍的性能），借此来消除服务器的负担。借由这一方法全字段搜索可以通过唯一的一条 <code>SQL</code> 来实现，也符合尽量不写 <code>SQL</code> 的原则。</p><div class="sourceCode" id="cb6"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="co">// Dao 层</span></span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="at">@Query</span>(value = <span class="st">&quot;SELECT f.* FROM Feature f WHERE (f.name REGEXP :funcNameRegExp) AND (f.description REGEXP :funcDescriptionRegExp)&quot;</span>, nativeQuery = <span class="kw">true</span>)</span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a><span class="bu">ArrayList</span>&lt;Feature&gt; <span class="fu">findFeatureByRegExp</span>(<span class="at">@Param</span>(<span class="st">&quot;funcNameRegExp&quot;</span>) <span class="bu">String</span> funcNameRegExp, <span class="at">@Param</span>(<span class="st">&quot;funcDescriptionRegExp&quot;</span>) <span class="bu">String</span> funcDescriptionRegExp);</span><span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a></span><span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a><span class="co">// Service 层</span></span><span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a><span class="kw">public</span> JSONObject <span class="fu">getFeature</span>(</span><span id="cb6-7"><a href="#cb6-7" aria-hidden="true"></a>        <span class="bu">String</span> funcName,</span><span id="cb6-8"><a href="#cb6-8" aria-hidden="true"></a>        <span class="bu">String</span> funcDescription) {</span><span id="cb6-9"><a href="#cb6-9" aria-hidden="true"></a>    <span class="bu">String</span> funcNameRegExp = funcName;</span><span id="cb6-10"><a href="#cb6-10" aria-hidden="true"></a>    <span class="bu">String</span> funcDescriptionRegExp =  <span class="st">&quot;^&quot;</span> + funcName + <span class="st">&quot;$&quot;</span>;</span><span id="cb6-11"><a href="#cb6-11" aria-hidden="true"></a>    JSONObject res = <span class="kw">new</span> <span class="fu">JSONObject</span>();</span><span id="cb6-12"><a href="#cb6-12" aria-hidden="true"></a>    res.<span class="fu">put</span>(</span><span id="cb6-13"><a href="#cb6-13" aria-hidden="true"></a>            Constants.<span class="fu">featureList</span>,</span><span id="cb6-14"><a href="#cb6-14" aria-hidden="true"></a>            JSONObject.<span class="fu">parseArray</span>(JSON.<span class="fu">toJSONString</span>(featureRepository.<span class="fu">findFeatureByRegExp</span>(funcNameRegExp, funcDescriptionRegExp))));</span><span id="cb6-15"><a href="#cb6-15" aria-hidden="true"></a>    <span class="kw">return</span> ResponseHelper.<span class="fu">constructSuccessResponse</span>(res);</span><span id="cb6-16"><a href="#cb6-16" aria-hidden="true"></a>}</span></code></pre></div><p>再说增删改。项目中这些功能的实现大体如下：</p><div class="sourceCode" id="cb7"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="co">// 增</span></span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a><span class="kw">public</span> JSONObject <span class="fu">addExamine</span>(<span class="bu">String</span> examineName, <span class="dt">double</span> examinePrice, <span class="bu">String</span> roomName) {</span><span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a>    <span class="bu">List</span>&lt;Examine&gt; targetExamineList = examineRepository.<span class="fu">findAll</span>().<span class="fu">stream</span>()</span><span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a>            .<span class="fu">filter</span>(examine -&gt; Objects.<span class="fu">equals</span>(examine.<span class="fu">getExamineName</span>(), examineName))</span><span id="cb7-5"><a href="#cb7-5" aria-hidden="true"></a>            .<span class="fu">collect</span>(Collectors.<span class="fu">toList</span>());</span><span id="cb7-6"><a href="#cb7-6" aria-hidden="true"></a></span><span id="cb7-7"><a href="#cb7-7" aria-hidden="true"></a>    <span class="kw">if</span> (Objects.<span class="fu">equals</span>(targetExamineList.<span class="fu">size</span>(), <span class="dv">0</span>)) {</span><span id="cb7-8"><a href="#cb7-8" aria-hidden="true"></a>        Optional&lt;Room&gt; targetRoomOptional = roomRepository.<span class="fu">findById</span>(roomName);</span><span id="cb7-9"><a href="#cb7-9" aria-hidden="true"></a></span><span id="cb7-10"><a href="#cb7-10" aria-hidden="true"></a>        <span class="kw">if</span> (targetRoomOptional.<span class="fu">isEmpty</span>()) {</span><span id="cb7-11"><a href="#cb7-11" aria-hidden="true"></a>            <span class="kw">return</span> ResponseHelper.<span class="fu">constructFailedResponse</span>(ResponseHelper.<span class="fu">requestErrorCode</span>);</span><span id="cb7-12"><a href="#cb7-12" aria-hidden="true"></a>        } <span class="kw">else</span> {</span><span id="cb7-13"><a href="#cb7-13" aria-hidden="true"></a>            Examine newExamine = <span class="kw">new</span> <span class="fu">Examine</span>();</span><span id="cb7-14"><a href="#cb7-14" aria-hidden="true"></a>            newExamine.<span class="fu">setExamineName</span>(examineName);</span><span id="cb7-15"><a href="#cb7-15" aria-hidden="true"></a>            newExamine.<span class="fu">setExaminePrice</span>(examinePrice);</span><span id="cb7-16"><a href="#cb7-16" aria-hidden="true"></a>            newExamine.<span class="fu">setExamineRoom</span>(targetRoomOptional.<span class="fu">get</span>());</span><span id="cb7-17"><a href="#cb7-17" aria-hidden="true"></a></span><span id="cb7-18"><a href="#cb7-18" aria-hidden="true"></a>            Examine addedExamine = examineRepository.<span class="fu">saveAndFlush</span>(newExamine);</span><span id="cb7-19"><a href="#cb7-19" aria-hidden="true"></a></span><span id="cb7-20"><a href="#cb7-20" aria-hidden="true"></a>            <span class="kw">return</span> ResponseHelper.<span class="fu">constructSuccessResponse</span>(addedExamine);</span><span id="cb7-21"><a href="#cb7-21" aria-hidden="true"></a>        }</span><span id="cb7-22"><a href="#cb7-22" aria-hidden="true"></a>    } <span class="kw">else</span> {</span><span id="cb7-23"><a href="#cb7-23" aria-hidden="true"></a>        <span class="kw">return</span> ResponseHelper.<span class="fu">constructFailedResponse</span>(ResponseHelper.<span class="fu">requestErrorCode</span>);</span><span id="cb7-24"><a href="#cb7-24" aria-hidden="true"></a>    }</span><span id="cb7-25"><a href="#cb7-25" aria-hidden="true"></a>}</span><span id="cb7-26"><a href="#cb7-26" aria-hidden="true"></a></span><span id="cb7-27"><a href="#cb7-27" aria-hidden="true"></a><span class="co">// 改</span></span><span id="cb7-28"><a href="#cb7-28" aria-hidden="true"></a><span class="kw">public</span> JSONObject <span class="fu">updateExamine</span>(<span class="dt">int</span> examineId, <span class="bu">String</span> examineName, <span class="dt">double</span> examinePrice, <span class="bu">String</span> roomName) {</span><span id="cb7-29"><a href="#cb7-29" aria-hidden="true"></a>    Optional&lt;Examine&gt; targetExamineOptional = examineRepository.<span class="fu">findById</span>(examineId);</span><span id="cb7-30"><a href="#cb7-30" aria-hidden="true"></a></span><span id="cb7-31"><a href="#cb7-31" aria-hidden="true"></a>    <span class="kw">if</span> (targetExamineOptional.<span class="fu">isEmpty</span>()) {</span><span id="cb7-32"><a href="#cb7-32" aria-hidden="true"></a>        <span class="kw">return</span> ResponseHelper.<span class="fu">constructFailedResponse</span>(ResponseHelper.<span class="fu">requestErrorCode</span>);</span><span id="cb7-33"><a href="#cb7-33" aria-hidden="true"></a>    } <span class="kw">else</span> {</span><span id="cb7-34"><a href="#cb7-34" aria-hidden="true"></a></span><span id="cb7-35"><a href="#cb7-35" aria-hidden="true"></a>        <span class="bu">List</span>&lt;Examine&gt; targetExamineList = examineRepository.<span class="fu">findAll</span>().<span class="fu">stream</span>()</span><span id="cb7-36"><a href="#cb7-36" aria-hidden="true"></a>                .<span class="fu">filter</span>(examine -&gt; Objects.<span class="fu">equals</span>(examine.<span class="fu">getExamineName</span>(), examineName)</span><span id="cb7-37"><a href="#cb7-37" aria-hidden="true"></a>                        &amp;&amp; !Objects.<span class="fu">equals</span>(examine.<span class="fu">getExamineId</span>(), examineId))</span><span id="cb7-38"><a href="#cb7-38" aria-hidden="true"></a>                .<span class="fu">collect</span>(Collectors.<span class="fu">toList</span>());</span><span id="cb7-39"><a href="#cb7-39" aria-hidden="true"></a></span><span id="cb7-40"><a href="#cb7-40" aria-hidden="true"></a>        Optional&lt;Room&gt; targetRoomOptional = roomRepository.<span class="fu">findById</span>(roomName);</span><span id="cb7-41"><a href="#cb7-41" aria-hidden="true"></a></span><span id="cb7-42"><a href="#cb7-42" aria-hidden="true"></a>        <span class="kw">if</span> (targetRoomOptional.<span class="fu">isEmpty</span>() || !Objects.<span class="fu">equals</span>(targetExamineList.<span class="fu">size</span>(), <span class="dv">0</span>)) {</span><span id="cb7-43"><a href="#cb7-43" aria-hidden="true"></a>            <span class="kw">return</span> ResponseHelper.<span class="fu">constructFailedResponse</span>(ResponseHelper.<span class="fu">requestErrorCode</span>);</span><span id="cb7-44"><a href="#cb7-44" aria-hidden="true"></a>        } <span class="kw">else</span> {</span><span id="cb7-45"><a href="#cb7-45" aria-hidden="true"></a>            Examine targetExamine = targetExamineOptional.<span class="fu">get</span>();</span><span id="cb7-46"><a href="#cb7-46" aria-hidden="true"></a>            targetExamine.<span class="fu">setExamineName</span>(examineName);</span><span id="cb7-47"><a href="#cb7-47" aria-hidden="true"></a>            targetExamine.<span class="fu">setExaminePrice</span>(examinePrice);</span><span id="cb7-48"><a href="#cb7-48" aria-hidden="true"></a>            targetExamine.<span class="fu">setExamineRoom</span>(targetRoomOptional.<span class="fu">get</span>());</span><span id="cb7-49"><a href="#cb7-49" aria-hidden="true"></a></span><span id="cb7-50"><a href="#cb7-50" aria-hidden="true"></a>            Examine updatedExamine = examineRepository.<span class="fu">saveAndFlush</span>(targetExamine);</span><span id="cb7-51"><a href="#cb7-51" aria-hidden="true"></a></span><span id="cb7-52"><a href="#cb7-52" aria-hidden="true"></a>            <span class="kw">return</span> ResponseHelper.<span class="fu">constructSuccessResponse</span>(updatedExamine);</span><span id="cb7-53"><a href="#cb7-53" aria-hidden="true"></a>        }</span><span id="cb7-54"><a href="#cb7-54" aria-hidden="true"></a>    }</span><span id="cb7-55"><a href="#cb7-55" aria-hidden="true"></a>}</span><span id="cb7-56"><a href="#cb7-56" aria-hidden="true"></a></span><span id="cb7-57"><a href="#cb7-57" aria-hidden="true"></a><span class="co">// 删</span></span><span id="cb7-58"><a href="#cb7-58" aria-hidden="true"></a><span class="kw">public</span> JSONObject <span class="fu">deleteExamine</span>(<span class="dt">int</span> examineId) {</span><span id="cb7-59"><a href="#cb7-59" aria-hidden="true"></a>    Optional&lt;Examine&gt; targetExamineOptional = examineRepository.<span class="fu">findById</span>(examineId);</span><span id="cb7-60"><a href="#cb7-60" aria-hidden="true"></a></span><span id="cb7-61"><a href="#cb7-61" aria-hidden="true"></a>    <span class="kw">if</span> (targetExamineOptional.<span class="fu">isEmpty</span>()) {</span><span id="cb7-62"><a href="#cb7-62" aria-hidden="true"></a>        <span class="kw">return</span> ResponseHelper.<span class="fu">constructFailedResponse</span>(ResponseHelper.<span class="fu">requestErrorCode</span>);</span><span id="cb7-63"><a href="#cb7-63" aria-hidden="true"></a>    } <span class="kw">else</span> {</span><span id="cb7-64"><a href="#cb7-64" aria-hidden="true"></a>        examineRepository.<span class="fu">deleteById</span>(examineId);</span><span id="cb7-65"><a href="#cb7-65" aria-hidden="true"></a></span><span id="cb7-66"><a href="#cb7-66" aria-hidden="true"></a>        <span class="kw">if</span> (examineRepository.<span class="fu">findById</span>(examineId).<span class="fu">isEmpty</span>()) {</span><span id="cb7-67"><a href="#cb7-67" aria-hidden="true"></a>            <span class="kw">return</span> ResponseHelper.<span class="fu">constructSuccessResponse</span>(targetExamineOptional.<span class="fu">get</span>());</span><span id="cb7-68"><a href="#cb7-68" aria-hidden="true"></a>        } <span class="kw">else</span> {</span><span id="cb7-69"><a href="#cb7-69" aria-hidden="true"></a>            <span class="kw">return</span> ResponseHelper.<span class="fu">constructFailedResponse</span>(ResponseHelper.<span class="fu">requestErrorCode</span>);</span><span id="cb7-70"><a href="#cb7-70" aria-hidden="true"></a>        }</span><span id="cb7-71"><a href="#cb7-71" aria-hidden="true"></a>    }</span><span id="cb7-72"><a href="#cb7-72" aria-hidden="true"></a>}</span></code></pre></div><p>说实话每个表增删改查写一遍还是挺繁琐的，毕竟业务逻辑上太过类似了。基本上都是这样的逻辑：</p><ul><li>增：查询重复数据存在情况 <span class="math inline">→</span> 查外键存在情况 <span class="math inline">→</span> 插入数据。</li><li>改：查自身数据存在情况 <span class="math inline">→</span> 查询重复数据存在情况 <span class="math inline">→</span> 查外键存在情况 <span class="math inline">→</span> 插入数据。</li><li>删：直接调用JPA的 <code>deleteById</code> 方法。</li></ul><p>这里的如果需要重构可以考虑利用 <a href="#java-反射机制"><code>Java</code> 反射机制</a>。事实上，项目末期时根据前端需求增加的根据数据Id查询功能就是利用这一机制写的。</p><div class="sourceCode" id="cb8"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="kw">public</span> <span class="kw">class</span> GeneralService {</span><span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a>    <span class="at">@Autowired</span></span><span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a>    <span class="kw">private</span> RoomRepository roomRepository;</span><span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a></span><span id="cb8-5"><a href="#cb8-5" aria-hidden="true"></a>    <span class="at">@Autowired</span></span><span id="cb8-6"><a href="#cb8-6" aria-hidden="true"></a>    <span class="kw">private</span> FeatureRepository featureRepository;</span><span id="cb8-7"><a href="#cb8-7" aria-hidden="true"></a></span><span id="cb8-8"><a href="#cb8-8" aria-hidden="true"></a>    <span class="at">@Autowired</span></span><span id="cb8-9"><a href="#cb8-9" aria-hidden="true"></a>    <span class="kw">private</span> AdmissionRepository admissionRepository;</span><span id="cb8-10"><a href="#cb8-10" aria-hidden="true"></a></span><span id="cb8-11"><a href="#cb8-11" aria-hidden="true"></a>    <span class="at">@Autowired</span></span><span id="cb8-12"><a href="#cb8-12" aria-hidden="true"></a>    <span class="kw">private</span> ArchiveRepository archiveRepository;</span><span id="cb8-13"><a href="#cb8-13" aria-hidden="true"></a></span><span id="cb8-14"><a href="#cb8-14" aria-hidden="true"></a>    <span class="at">@Autowired</span></span><span id="cb8-15"><a href="#cb8-15" aria-hidden="true"></a>    <span class="kw">private</span> ChargeRepository chargeRepository;</span><span id="cb8-16"><a href="#cb8-16" aria-hidden="true"></a></span><span id="cb8-17"><a href="#cb8-17" aria-hidden="true"></a>    <span class="at">@Autowired</span></span><span id="cb8-18"><a href="#cb8-18" aria-hidden="true"></a>    <span class="kw">private</span> ExamineRepository examineRepository;</span><span id="cb8-19"><a href="#cb8-19" aria-hidden="true"></a></span><span id="cb8-20"><a href="#cb8-20" aria-hidden="true"></a>    <span class="at">@Autowired</span></span><span id="cb8-21"><a href="#cb8-21" aria-hidden="true"></a>    <span class="kw">private</span> MedicineRepository medicineRepository;</span><span id="cb8-22"><a href="#cb8-22" aria-hidden="true"></a></span><span id="cb8-23"><a href="#cb8-23" aria-hidden="true"></a>    <span class="kw">public</span> JSONObject <span class="fu">getDataById</span>(<span class="bu">String</span> tableName, <span class="dt">int</span> id) <span class="kw">throws</span> <span class="bu">Exception</span> {</span><span id="cb8-24"><a href="#cb8-24" aria-hidden="true"></a>        <span class="bu">Class</span>&lt;?&gt; dataDaoClass = <span class="bu">Class</span>.<span class="fu">forName</span>(</span><span id="cb8-25"><a href="#cb8-25" aria-hidden="true"></a>                Constants.<span class="fu">projectPackageName</span> + <span class="st">&quot;.&quot;</span> + Constants.<span class="fu">systemModulePackageName</span> + <span class="st">&quot;.&quot;</span></span><span id="cb8-26"><a href="#cb8-26" aria-hidden="true"></a>                        + Constants.<span class="fu">daoClassPackageName</span></span><span id="cb8-27"><a href="#cb8-27" aria-hidden="true"></a>                        + <span class="st">&quot;.&quot;</span> + tableName</span><span id="cb8-28"><a href="#cb8-28" aria-hidden="true"></a>                        + Constants.<span class="fu">daoClassSuffix</span>,</span><span id="cb8-29"><a href="#cb8-29" aria-hidden="true"></a>                <span class="kw">true</span>,</span><span id="cb8-30"><a href="#cb8-30" aria-hidden="true"></a>                <span class="bu">Thread</span>.<span class="fu">currentThread</span>().<span class="fu">getContextClassLoader</span>().<span class="fu">getParent</span>());</span><span id="cb8-31"><a href="#cb8-31" aria-hidden="true"></a></span><span id="cb8-32"><a href="#cb8-32" aria-hidden="true"></a>        <span class="bu">Method</span> getByIdMethod = <span class="kw">null</span>;</span><span id="cb8-33"><a href="#cb8-33" aria-hidden="true"></a></span><span id="cb8-34"><a href="#cb8-34" aria-hidden="true"></a>        <span class="kw">for</span> (<span class="bu">Method</span> classMethods : dataDaoClass.<span class="fu">getMethods</span>()) {</span><span id="cb8-35"><a href="#cb8-35" aria-hidden="true"></a>            <span class="kw">if</span> (Objects.<span class="fu">equals</span>(classMethods.<span class="fu">getName</span>(), Constants.<span class="fu">findByIdMethodName</span>)) {</span><span id="cb8-36"><a href="#cb8-36" aria-hidden="true"></a>                getByIdMethod = classMethods;</span><span id="cb8-37"><a href="#cb8-37" aria-hidden="true"></a>            }</span><span id="cb8-38"><a href="#cb8-38" aria-hidden="true"></a>        }</span><span id="cb8-39"><a href="#cb8-39" aria-hidden="true"></a></span><span id="cb8-40"><a href="#cb8-40" aria-hidden="true"></a>        <span class="kw">for</span> (<span class="bu">Field</span> selfField : <span class="kw">this</span>.<span class="fu">getClass</span>().<span class="fu">getDeclaredFields</span>()) {</span><span id="cb8-41"><a href="#cb8-41" aria-hidden="true"></a>            <span class="kw">if</span> (Objects.<span class="fu">equals</span>(selfField.<span class="fu">getType</span>().<span class="fu">getName</span>(), dataDaoClass.<span class="fu">getName</span>())) {</span><span id="cb8-42"><a href="#cb8-42" aria-hidden="true"></a>                Optional&lt;?&gt; getIdRes = (Optional&lt;?&gt;) getByIdMethod.<span class="fu">invoke</span>(selfField.<span class="fu">get</span>(<span class="kw">this</span>), id);</span><span id="cb8-43"><a href="#cb8-43" aria-hidden="true"></a></span><span id="cb8-44"><a href="#cb8-44" aria-hidden="true"></a>                <span class="kw">if</span> (getIdRes.<span class="fu">isEmpty</span>()) {</span><span id="cb8-45"><a href="#cb8-45" aria-hidden="true"></a>                    <span class="kw">return</span> ResponseHelper.<span class="fu">constructFailedResponse</span>(ResponseHelper.<span class="fu">requestErrorCode</span>);</span><span id="cb8-46"><a href="#cb8-46" aria-hidden="true"></a>                } <span class="kw">else</span> {</span><span id="cb8-47"><a href="#cb8-47" aria-hidden="true"></a>                    <span class="kw">return</span> ResponseHelper.<span class="fu">constructSuccessResponse</span>(getIdRes.<span class="fu">get</span>());</span><span id="cb8-48"><a href="#cb8-48" aria-hidden="true"></a>                }</span><span id="cb8-49"><a href="#cb8-49" aria-hidden="true"></a>            }</span><span id="cb8-50"><a href="#cb8-50" aria-hidden="true"></a>        }</span><span id="cb8-51"><a href="#cb8-51" aria-hidden="true"></a></span><span id="cb8-52"><a href="#cb8-52" aria-hidden="true"></a>        <span class="kw">return</span> ResponseHelper.<span class="fu">constructFailedResponse</span>(ResponseHelper.<span class="fu">requestErrorCode</span>);</span><span id="cb8-53"><a href="#cb8-53" aria-hidden="true"></a>    }</span><span id="cb8-54"><a href="#cb8-54" aria-hidden="true"></a>}</span></code></pre></div><p>事实上，删除功能可以直接套用这一写法。当然，在上面的 <code>getDataById</code> 方法中查找 <code>Method</code> 与 <code>Field</code> 的逻辑也可以进一步进行优化：</p><div class="sourceCode" id="cb9"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="kw">public</span> <span class="bu">Class</span>&lt;JPARepository&gt; <span class="fu">getDataDaoClassByTableName</span> (<span class="bu">String</span> tableName) <span class="kw">throws</span> <span class="bu">Exception</span> {</span><span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a>    <span class="kw">return</span> <span class="bu">Class</span>.<span class="fu">forName</span>(</span><span id="cb9-3"><a href="#cb9-3" aria-hidden="true"></a>            Constants.<span class="fu">projectPackageName</span> + <span class="st">&quot;.&quot;</span> + Constants.<span class="fu">systemModulePackageName</span> + <span class="st">&quot;.&quot;</span></span><span id="cb9-4"><a href="#cb9-4" aria-hidden="true"></a>                    + Constants.<span class="fu">daoClassPackageName</span></span><span id="cb9-5"><a href="#cb9-5" aria-hidden="true"></a>                    + <span class="st">&quot;.&quot;</span> + tableName</span><span id="cb9-6"><a href="#cb9-6" aria-hidden="true"></a>                    + Constants.<span class="fu">daoClassSuffix</span>,</span><span id="cb9-7"><a href="#cb9-7" aria-hidden="true"></a>            <span class="kw">true</span>,</span><span id="cb9-8"><a href="#cb9-8" aria-hidden="true"></a>            <span class="bu">Thread</span>.<span class="fu">currentThread</span>().<span class="fu">getContextClassLoader</span>().<span class="fu">getParent</span>());</span><span id="cb9-9"><a href="#cb9-9" aria-hidden="true"></a>}</span><span id="cb9-10"><a href="#cb9-10" aria-hidden="true"></a></span><span id="cb9-11"><a href="#cb9-11" aria-hidden="true"></a><span class="kw">public</span> JSONObject <span class="fu">getDataById</span>(<span class="bu">String</span> tableName, <span class="dt">int</span> id) <span class="kw">throws</span> <span class="bu">Exception</span> {</span><span id="cb9-12"><a href="#cb9-12" aria-hidden="true"></a>    <span class="bu">Class</span>&lt;?&gt; dataDaoClass = <span class="kw">this</span>.<span class="fu">getDataDaoClassByTableName</span>(tableName);</span><span id="cb9-13"><a href="#cb9-13" aria-hidden="true"></a>    <span class="bu">Method</span> getByIdMethod = dataDaoClass.<span class="fu">getMethod</span>(Constants.<span class="fu">findByIdMethodName</span>, <span class="bu">Integer</span>.<span class="fu">class</span>);</span><span id="cb9-14"><a href="#cb9-14" aria-hidden="true"></a>    <span class="bu">Field</span> selfField = <span class="kw">this</span>.<span class="fu">getClass</span>().<span class="fu">getDeclaredField</span>(tableName.<span class="fu">toFirstCharLowerCase</span>());</span><span id="cb9-15"><a href="#cb9-15" aria-hidden="true"></a></span><span id="cb9-16"><a href="#cb9-16" aria-hidden="true"></a>    Optional&lt;?&gt; getIdRes = (Optional&lt;?&gt;) getByIdMethod.<span class="fu">invoke</span>(selfField.<span class="fu">get</span>(<span class="kw">this</span>), id);</span><span id="cb9-17"><a href="#cb9-17" aria-hidden="true"></a></span><span id="cb9-18"><a href="#cb9-18" aria-hidden="true"></a>    <span class="kw">return</span> getIdRes.<span class="fu">isEmpty</span>() ? ResponseHelper.<span class="fu">constructFailedResponse</span>(ResponseHelper.<span class="fu">requestErrorCode</span>) : ResponseHelper.<span class="fu">constructSuccessResponse</span>(getIdRes.<span class="fu">get</span>());</span><span id="cb9-19"><a href="#cb9-19" aria-hidden="true"></a>}</span><span id="cb9-20"><a href="#cb9-20" aria-hidden="true"></a></span><span id="cb9-21"><a href="#cb9-21" aria-hidden="true"></a><span class="kw">public</span> JSONObject <span class="fu">deleteDataById</span>(<span class="bu">String</span> tableName, <span class="dt">int</span> id) <span class="kw">throws</span> <span class="bu">Exception</span> {</span><span id="cb9-22"><a href="#cb9-22" aria-hidden="true"></a>    JSONObject getDataByIdRes = <span class="kw">this</span>.<span class="fu">getDataById</span>(tableName, id);</span><span id="cb9-23"><a href="#cb9-23" aria-hidden="true"></a></span><span id="cb9-24"><a href="#cb9-24" aria-hidden="true"></a>    <span class="co">// 表内查询无数据</span></span><span id="cb9-25"><a href="#cb9-25" aria-hidden="true"></a>    <span class="kw">if</span> (<span class="bu">Object</span>.<span class="fu">equals</span>(getDataByIdRes.<span class="fu">data</span>, <span class="kw">null</span>)) {</span><span id="cb9-26"><a href="#cb9-26" aria-hidden="true"></a>        <span class="kw">return</span> getDataByIdRes;</span><span id="cb9-27"><a href="#cb9-27" aria-hidden="true"></a>    }</span><span id="cb9-28"><a href="#cb9-28" aria-hidden="true"></a></span><span id="cb9-29"><a href="#cb9-29" aria-hidden="true"></a>    <span class="bu">Class</span>&lt;?&gt; dataDaoClass = <span class="kw">this</span>.<span class="fu">getDataDaoClassByTableName</span>(tableName);</span><span id="cb9-30"><a href="#cb9-30" aria-hidden="true"></a>    <span class="bu">Method</span> deleteByIdMethod = dataDaoClass.<span class="fu">getMethod</span>(Constants.<span class="fu">deleteByIdMethodName</span>, <span class="bu">Integer</span>.<span class="fu">class</span>);</span><span id="cb9-31"><a href="#cb9-31" aria-hidden="true"></a>    <span class="bu">Field</span> selfField = <span class="kw">this</span>.<span class="fu">getClass</span>().<span class="fu">getDeclaredField</span>(tableName.<span class="fu">toFirstCharLowerCase</span>());</span><span id="cb9-32"><a href="#cb9-32" aria-hidden="true"></a></span><span id="cb9-33"><a href="#cb9-33" aria-hidden="true"></a>    deleteByIdMethod.<span class="fu">invoke</span>(selfField.<span class="fu">get</span>(<span class="kw">this</span>), id);</span><span id="cb9-34"><a href="#cb9-34" aria-hidden="true"></a></span><span id="cb9-35"><a href="#cb9-35" aria-hidden="true"></a>    <span class="kw">return</span> ResponseHelper.<span class="fu">constructSuccessResponse</span>(getDataByIdRes.<span class="fu">get</span>());</span><span id="cb9-36"><a href="#cb9-36" aria-hidden="true"></a>}</span></code></pre></div><p>为了进一步简化开发工作量与代码逻辑，可以考虑先创建公共类：<code>BaseEntity</code> 与 <code>BaseRepository</code>，使得实体类继承前者，对应的 <code>dao</code> 类继承后者。</p><p>对于增改功能而言，业务逻辑中唯二的区别在于判断重复条件与判断外键存在逻辑这两项。可以考虑抽象成统一的公共方法，通过接收可变个数个参数构成的List来进行判断。更具体的，其可能是下面的实现形式：</p><div class="sourceCode" id="cb10"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="kw">public</span> JSONObject <span class="fu">updateDataById</span>(</span><span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a>    <span class="bu">String</span> tableName, </span><span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a>    <span class="dt">int</span> id, </span><span id="cb10-4"><a href="#cb10-4" aria-hidden="true"></a>    <span class="bu">ArrayList</span>&lt;<span class="bu">String</span>&gt; duplicateConditionFields, </span><span id="cb10-5"><a href="#cb10-5" aria-hidden="true"></a>    <span class="bu">ArrayList</span>&lt;<span class="bu">String</span>&gt; foreignKeys,</span><span id="cb10-6"><a href="#cb10-6" aria-hidden="true"></a>    <span class="bu">Map</span>&lt;<span class="bu">String</span>, <span class="bu">String</span>&gt; newValues</span><span id="cb10-7"><a href="#cb10-7" aria-hidden="true"></a>) {</span><span id="cb10-8"><a href="#cb10-8" aria-hidden="true"></a>    <span class="bu">Class</span>&lt;?&gt; dataEntityClass = ...; <span class="co">// 查找对应的 Entity 层类</span></span><span id="cb10-9"><a href="#cb10-9" aria-hidden="true"></a>    <span class="bu">Class</span>&lt;?&gt; dataDaoClass = ...; <span class="co">// 查找对应的 Dao 层类</span></span><span id="cb10-10"><a href="#cb10-10" aria-hidden="true"></a>    <span class="bu">Method</span> updateByIdMethod = dataDaoClass.<span class="fu">getMethod</span>(<span class="st">&quot;saveAndFlush&quot;</span>); <span class="co">// 查找保存数据的方法</span></span><span id="cb10-11"><a href="#cb10-11" aria-hidden="true"></a>    <span class="bu">Method</span> findAllMethod = dataDaoClass.<span class="fu">getMethod</span>(<span class="st">&quot;findAll&quot;</span>); </span><span id="cb10-12"><a href="#cb10-12" aria-hidden="true"></a>    <span class="bu">Field</span> selfField = ...; <span class="co">// 找到自身类中对应的 field</span></span><span id="cb10-13"><a href="#cb10-13" aria-hidden="true"></a></span><span id="cb10-14"><a href="#cb10-14" aria-hidden="true"></a>    <span class="bu">Object</span> targetData = dataEntityClass.<span class="fu">getConstructor</span>().<span class="fu">newInstance</span>(); <span class="co">//获取要更新数据</span></span><span id="cb10-15"><a href="#cb10-15" aria-hidden="true"></a></span><span id="cb10-16"><a href="#cb10-16" aria-hidden="true"></a>    <span class="bu">Boolean</span> isForeignKeyExist = <span class="kw">true</span>;</span><span id="cb10-17"><a href="#cb10-17" aria-hidden="true"></a></span><span id="cb10-18"><a href="#cb10-18" aria-hidden="true"></a>    <span class="co">// 如果满足重复条件或外键不存在则直接返回，这里可以进一步优化</span></span><span id="cb10-19"><a href="#cb10-19" aria-hidden="true"></a>    <span class="kw">for</span>(foreignKey : foreignKeys) {</span><span id="cb10-20"><a href="#cb10-20" aria-hidden="true"></a>        <span class="bu">Class</span>&lt;?&gt; foreignKeyDaoClass = <span class="bu">Class</span>.<span class="fu">forName</span>(targetData.<span class="fu">getDeclaredField</span>(foreignKey).<span class="fu">getType</span>().<span class="fu">getName</span>() + ...); <span class="co">//找到外键对应 Dao 层类</span></span><span id="cb10-21"><a href="#cb10-21" aria-hidden="true"></a>        <span class="bu">Method</span> findByIdMethod = foreignKeyDaoClass.<span class="fu">getMethod</span>(<span class="st">&quot;findById&quot;</span>); </span><span id="cb10-22"><a href="#cb10-22" aria-hidden="true"></a>        <span class="bu">Field</span> selfField = ...; <span class="co">// 找到自身类中对应的 field</span></span><span id="cb10-23"><a href="#cb10-23" aria-hidden="true"></a>        Optional&lt;?&gt; getIdRes = (Optional&lt;?&gt;) findByIdMethod.<span class="fu">invoke</span>(selfField.<span class="fu">get</span>(<span class="kw">this</span>), <span class="bu">Integer</span>.<span class="fu">parseInt</span>(newValues.<span class="fu">get</span>(foreignKey).<span class="fu">getId</span>()));</span><span id="cb10-24"><a href="#cb10-24" aria-hidden="true"></a>        isForeignKeyExist &amp;= !getIdRes.<span class="fu">isEmpty</span>();</span><span id="cb10-25"><a href="#cb10-25" aria-hidden="true"></a>    }</span><span id="cb10-26"><a href="#cb10-26" aria-hidden="true"></a></span><span id="cb10-27"><a href="#cb10-27" aria-hidden="true"></a>    <span class="bu">List</span>&lt;?&gt; getAllRes = (<span class="bu">List</span>&lt;?&gt;) findAllMethod.<span class="fu">invoke</span>(selfField.<span class="fu">get</span>(<span class="kw">this</span>));</span><span id="cb10-28"><a href="#cb10-28" aria-hidden="true"></a></span><span id="cb10-29"><a href="#cb10-29" aria-hidden="true"></a>    <span class="kw">if</span> (<span class="bu">Object</span>.<span class="fu">equals</span>(getAllRes.<span class="fu">findAll</span>().<span class="fu">stream</span>().<span class="fu">filter</span>(data -&gt; {</span><span id="cb10-30"><a href="#cb10-30" aria-hidden="true"></a>        <span class="bu">Boolean</span> isExist = <span class="kw">true</span>;</span><span id="cb10-31"><a href="#cb10-31" aria-hidden="true"></a>        <span class="kw">for</span> (duplicateConditionField : duplicateConditionFields) {</span><span id="cb10-32"><a href="#cb10-32" aria-hidden="true"></a>            isExist &amp;= <span class="bu">Object</span>.<span class="fu">equals</span>(</span><span id="cb10-33"><a href="#cb10-33" aria-hidden="true"></a>                data.<span class="fu">getDeclaredField</span>(duplicateConditionField).<span class="fu">get</span>(data), </span><span id="cb10-34"><a href="#cb10-34" aria-hidden="true"></a>                targetData.<span class="fu">getDeclaredField</span>(duplicateConditionField).<span class="fu">get</span>(targetData)</span><span id="cb10-35"><a href="#cb10-35" aria-hidden="true"></a>            );</span><span id="cb10-36"><a href="#cb10-36" aria-hidden="true"></a>        }</span><span id="cb10-37"><a href="#cb10-37" aria-hidden="true"></a>        <span class="kw">return</span> isExist;</span><span id="cb10-38"><a href="#cb10-38" aria-hidden="true"></a>    }).<span class="fu">collect</span>(Collectors.<span class="fu">toList</span>()).<span class="fu">size</span>(), <span class="dv">0</span>) || !isForeignKeyExist) {</span><span id="cb10-39"><a href="#cb10-39" aria-hidden="true"></a>        <span class="kw">return</span>;</span><span id="cb10-40"><a href="#cb10-40" aria-hidden="true"></a>    }</span><span id="cb10-41"><a href="#cb10-41" aria-hidden="true"></a></span><span id="cb10-42"><a href="#cb10-42" aria-hidden="true"></a>    <span class="co">// 不满足重复条件且外键都存在时，进行数据更新</span></span><span id="cb10-43"><a href="#cb10-43" aria-hidden="true"></a>    <span class="kw">for</span> (field : targetData.<span class="fu">getDeclaredFields</span>()) {</span><span id="cb10-44"><a href="#cb10-44" aria-hidden="true"></a>        field.<span class="fu">set</span>(targetData, newValues.<span class="fu">get</span>(field.<span class="fu">getName</span>()).<span class="fu">toTargetType</span>());</span><span id="cb10-45"><a href="#cb10-45" aria-hidden="true"></a>    }</span><span id="cb10-46"><a href="#cb10-46" aria-hidden="true"></a></span><span id="cb10-47"><a href="#cb10-47" aria-hidden="true"></a>    updateByIdMethod.<span class="fu">invoke</span>(selfField.<span class="fu">get</span>(<span class="kw">this</span>), targetData);</span><span id="cb10-48"><a href="#cb10-48" aria-hidden="true"></a></span><span id="cb10-49"><a href="#cb10-49" aria-hidden="true"></a>    <span class="kw">return</span> ...; <span class="co">// 返回值</span></span><span id="cb10-50"><a href="#cb10-50" aria-hidden="true"></a>}</span></code></pre></div><p>考虑到增改功能逻辑也比较类似，因而增加功能的伪代码不再再次列出。</p><p>借此，大量类似的代码也可以被大幅省略，从而大幅减少工作量，同时也减少了冗余代码。</p><p>当然，这里也可以考虑使用拼接 <code>SQL</code> 的方法。不过考虑到后端开发上应该尽可能不写或少写原生的 <code>SQL</code>，因而这一种写法更符合规范些。</p><p>通过利用上述的写法，项目中的代码可以精简许多，由此也可以使得所需要的测试代码大幅减少，从而使得项目整体的工作量大量降低。事实上，正是由于当前项目中有大量逻辑比较类似的代码，导致为满足覆盖率所需的测试代码非常庞大，从而难以完成自动化测试代码的编写。</p><p>除此之外，一些类内的方法也可以作出一些更改。考虑到方法链的写法更加符合直觉，且也在一定程度上能提升开发效率并使代码更加简洁（尽管在一定程度上破坏了 <code>.</code> 运算符的原有语义，且也不是很符合 <a href="#CQRS">CQRS</a>），因而我个人更倾向于尽可能使用方法链的写法。</p><h3 id="前端">前端</h3><p>我个人而言也作为开发人员参与到了前端组的开发中。事实上最大的优化点在于接口调用的时机。当前，前端组在页面渲染时会请求一次后端接口，获取全部数据并渲染到页面上。之后，在进行关键词查找、数据插入、数据删除时各自会调用一次接口。至此为止都是比较合理的，当数据量庞大时前端不应该负责数据的查找工作，利用在服务器侧进行过优化的查询接口比较合理。然而，前端在进行数据编辑时，则是采用下面的流程：</p><pre class="mermaid"><code>flowchart TD    A[页面选中数据] --&gt; B[获取数据id]    B --&gt; C[根据id再次调用后端接口获取全部数据]    C --&gt; D[根据后端返回渲染页面]    D --&gt; E[用户输入完成后再次调取后端更新数据接口]</code></pre><p>由于在包含全部数据的页面进行初期渲染时每条数据的全部内容前端都已经获取到，因而选中数据进入编辑页面时完全可以直接利用前端已经拿到的数据进行渲染，不需要再次调用后端端口。且不谈在网络延迟较高的情况下，上面的做法会使得用户体验较差，在服务器有大量请求的情况下，前端冗余的调用会加重服务器的负担，从而影响性能。</p><p>另一方面我也注意到，前端由于没有将方法应用到了页面渲染的各个阶段，从而导致了某些请求会被重复多次执行，这也是影响性能的一大问题。当然，最好的解决方法应是前后端都做一下防抖处理。</p><h2 id="一些其他">一些其他</h2><p>开发上的问题大体如上，基本上都是后续项目中值得进行进一步更改的地方。除此以外，整个项目的生命周期中最最值得被后续继承的地方在于严格的 PR-Code Review 制度与文档的维护。其中前者保证了代码的质量与规范，后者则提高了有效沟通的效率。这两者才是在开发过程中降低工作量与各类成本的最关键因素。</p><h2 id="名词释义">名词释义</h2><h3 id="rad">RAD</h3><p>快速应用开发模型（Rapid Application Development），又称 V 模型。似乎是为了改进瀑布式模型而在上世纪 70 至 80 年代提出的。这一模型大体上遵循下图的几个阶段：</p><figure><img src="https://pikapikapikaori.github.io/pikapikapi-blog/archive/ITtech/_media/SoftwareInsights-20230428/RAD-model.webp" alt="" /><figcaption>picture</figcaption></figure><h3 id="微服务">微服务</h3><p>SOA（面向服务架构）的一种变体，提倡将单一应用程序划分为松耦合的服务组，每个服务可独立部署。其概念最早于 2005 年提出。</p><figure><img src="https://pikapikapikaori.github.io/pikapikapi-blog/archive/ITtech/_media/SoftwareInsights-20230428/microservice.png" alt="" /><figcaption>picture</figcaption></figure><h3 id="微前端">微前端</h3><p>2016 年被正式提出，是微服务这一概念被扩展到前端的一种应用形式，便于新老项目的共存与过渡，以及项目独立开发等。</p><figure><img src="https://pikapikapikaori.github.io/pikapikapi-blog/archive/ITtech/_media/SoftwareInsights-20230428/mircro-frontend.png" alt="" /><figcaption>picture</figcaption></figure><h3 id="java-反射机制"><code>Java</code> 反射机制</h3><p><code>Java</code> 先编译后运行，对象类型在编译期确定。在程序运行时类被动态加载，当类没被用到时没有被加载到 JVM，因而利用反射，可以在运行时获得类的各种内容。通过利用反射，可以动态地创建对象，更加灵活，但是会消耗系统资源。</p><h3 id="cqrs">CQRS</h3><p>Command Query Responsibility Segregation，即命令查询职责分离模式，要求一个方法更改对象的状态或返回一个结果，但是不能同时包含这两个行为。从某种角度来说算是继承了从前将系统交互视为 CRUD 的思想。相较之下，方法链（Method Chaining）语法中由于对象被引用一次即可被多次调用，从某种意义上违反了这一原则。</p><p>更具体的，符合 CQRS 与 <code>.</code> 运算符原有语义（<code>调用者.操作名</code>）的写法形如下面的形式：</p><div class="sourceCode" id="cb12"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a>Person p = <span class="kw">new</span> <span class="fu">Person</span>();</span><span id="cb12-2"><a href="#cb12-2" aria-hidden="true"></a>p.<span class="fu">getWater</span>();</span><span id="cb12-3"><a href="#cb12-3" aria-hidden="true"></a>p.<span class="fu">drinkWater</span>();</span><span id="cb12-4"><a href="#cb12-4" aria-hidden="true"></a>p.<span class="fu">getThirsty</span>();</span></code></pre></div><p>而方法链则形如下面的形式：</p><div class="sourceCode" id="cb13"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a><span class="kw">new</span> <span class="fu">Person</span>().<span class="fu">getWater</span>().<span class="fu">drinkWater</span>().<span class="fu">getThirsty</span>();</span></code></pre></div><p>这种写法更符合直觉，同时可以节省临时变量、简化代码。</p><h2 id="参考资料">参考资料</h2><ol type="1"><li>When I should use one to one relationship? (2012, September 7). Stack Overflow. https://stackoverflow.com/questions/12318870/when-i-should-use-one-to-one-relationship</li><li>search using regex in JPA. (2020, June 15). Stack Overflow. https://stackoverflow.com/questions/62379559/search-using-regex-in-jpa</li><li>Using Java Reflection. (n.d.). Using Java Reflection. https://www.oracle.com/technical-resources/articles/java/javareflection.html</li><li>Rapid application development - Wikipedia. (2014, July 2). Rapid Application Development - Wikipedia. https://en.wikipedia.org/wiki/Rapid_application_development</li><li>Jackson, C. (2019, June 19). Micro Frontends. martinfowler.com. https://martinfowler.com/articles/micro-frontends.html</li><li>M. (n.d.). CQRS pattern - Azure Architecture Center. CQRS Pattern - Azure Architecture Center | Microsoft Learn. https://learn.microsoft.com/en-us/azure/architecture/patterns/cqrs</li><li>Method chaining - why is it a good practice, or not? (2009, July 9). Stack Overflow. https://stackoverflow.com/questions/1103985/method-chaining-why-is-it-a-good-practice-or-not</li></ol>]]></content>
    <pubDate>Wed, 17 Jul 2024 20:39:42 +0800</pubDate>
  </entry>
   
  <entry>
    <title><![CDATA[随记：玩具重摄 甲辰年四月二十四日]]></title>
    <link>https://pikapikapikaori.github.io/pikapikapi-blog/#/writings/Notes-20240424</link>
    <guid isPermaLink="false">https://pikapikapikaori.github.io/pikapikapi-blog/#/writings/Notes-20240424</guid>
    <content type="html"><![CDATA[<h1 id="随记玩具重摄-甲辰年四月二十四日">随记：玩具重摄 甲辰年四月二十四日</h1><figure><img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/cover-picture.jpg" alt="" /><figcaption>picture</figcaption></figure><blockquote><p>本文首发于个人博客<br />发表日期：2024.04.24<br />最后编辑于：{docsify-last-updated}</p></blockquote><p>甲辰年四月二十四日，申城。</p><p>增拍 phat 的春香亲姐姐，现在已经很难买到了。</p><h2 id="phat-天海春香">Phat! 天海春香</h2><section class="multi-images-container-section"><p><img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-1.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-2.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-3.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-4.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-5.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-6.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-7.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-8.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-9.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-10.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-11.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-12.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-13.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-14.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-15.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-16.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-17.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-18.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-19.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-20.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-21.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-22.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-23.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-24.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-25.jpg" alt="picture" /></p></section><h2 id="phat-星井美希">Phat! 星井美希</h2><section class="multi-images-container-section"><p><img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-26.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-27.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-28.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-29.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-30.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-31.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-32.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-33.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-34.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-35.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-36.jpg" alt="picture" /></p></section><h2 id="眼镜厂-一番赏-part.3-a赏-星井美希">眼镜厂 一番赏 Part.3 A赏 星井美希</h2><section class="multi-images-container-section"><p><img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-37.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-38.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-39.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-40.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-41.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-42.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-43.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-44.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-45.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-46.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-47.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-48.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-49.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-50.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-51.jpg" alt="picture" /></p></section><h2 id="眼镜厂-sq-辉きの向こう侧へ-星井美希">眼镜厂 SQ 辉きの向こう侧へ! 星井美希</h2><section class="multi-images-container-section"><p><img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-52.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-53.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-54.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-55.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-56.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-79.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-57.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-58.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-59.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-60.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-61.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-62.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-63.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-64.jpg" alt="picture" /></p></section><h2 id="freeing-星井美希-浴衣">FREEing 星井美希 浴衣</h2><section class="multi-images-container-section"><p><img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-65.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-66.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-67.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-68.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-69.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-70.jpg" alt="picture" /></p></section><h2 id="眼镜厂-espresto-佐藤心">眼镜厂 Espresto 佐藤心</h2><section class="multi-images-container-section"><p><img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-71.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-72.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-73.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-74.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-75.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-76.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-77.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240424/picture-78.jpg" alt="picture" /></p></section>]]></content>
    <pubDate>Wed, 17 Jul 2024 03:35:22 +0800</pubDate>
  </entry>
   
  <entry>
    <title><![CDATA[随记：玩具重摄 甲辰年四月十八日]]></title>
    <link>https://pikapikapikaori.github.io/pikapikapi-blog/#/writings/Notes-20240418</link>
    <guid isPermaLink="false">https://pikapikapikaori.github.io/pikapikapi-blog/#/writings/Notes-20240418</guid>
    <content type="html"><![CDATA[<h1 id="随记玩具重摄-甲辰年四月十八日">随记：玩具重摄 甲辰年四月十八日</h1><figure><img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240418/cover-picture.jpg" alt="" /><figcaption>picture</figcaption></figure><blockquote><p>本文首发于个人博客<br />发表日期：2024.04.18<br />最后编辑于：{docsify-last-updated}</p></blockquote><p>甲辰年四月十八日，申城。</p><p>前些日子去日本旅行时顺便买了新相机。因为本身比较守旧所以在现在的微单时代最终还是选择了尼康 d850，配了镜头 70-200/2.8g、24-70/2.8e、闪光灯 sb-5000。为了拍手办买了个摄影棚，以及斯丹德的摄影灯一盏。</p><section class="multi-images-container-section"><p><img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240418/picture-1.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240418/picture-2.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240418/picture-3.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240418/picture-4.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240418/picture-5.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240418/picture-6.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240418/picture-7.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240418/picture-8.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240418/picture-9.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240418/picture-10.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240418/picture-11.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240418/picture-12.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240418/picture-13.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240418/picture-14.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240418/picture-15.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240418/picture-16.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240418/picture-17.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240418/picture-18.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240418/picture-19.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20240418/picture-20.jpg" alt="picture" /></p></section>]]></content>
    <pubDate>Wed, 17 Jul 2024 03:35:22 +0800</pubDate>
  </entry>
   
  <entry>
    <title><![CDATA[随记：近日玩具 癸卯年癸亥月甲午日]]></title>
    <link>https://pikapikapikaori.github.io/pikapikapi-blog/#/writings/Notes-20231202</link>
    <guid isPermaLink="false">https://pikapikapikaori.github.io/pikapikapi-blog/#/writings/Notes-20231202</guid>
    <content type="html"><![CDATA[<h1 id="随记近日玩具-癸卯年癸亥月甲午日">随记：近日玩具 癸卯年癸亥月甲午日</h1><figure><img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20231202/cover-picture.gif" alt="" /><figcaption>picture</figcaption></figure><blockquote><p>本文首发于个人博客<br />发表日期：2023.12.02<br />最后编辑于：{docsify-last-updated}</p></blockquote><p>癸卯年癸亥月甲午日，申城。</p><p>phat 偶像大师本家系列收齐了，不过 miki 以外的还没拆。15 周年纪念的三人组、e8 的 miki 睡美人，还有几个高垣枫和涩谷凛的手办也还没拆。另外不得不说偶像大师在国内的热度确实太低了，手办基本都是大降价。</p><section class="multi-images-container-section"><p><img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20231202/picture-4.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20231202/picture-6.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20231202/picture-7.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20231202/picture-1.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20231202/picture-8.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20231202/picture-5.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20231202/picture-3.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20231202/picture-2.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20231202/picture-9.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20231202/picture-10.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20231202/picture-11.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20231202/picture-12.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20231202/picture-13.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20231202/picture-14.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20231202/picture-15.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20231202/picture-16.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20231202/picture-17.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20231202/picture-18.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20231202/picture-19.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20231202/picture-20.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20231202/picture-21.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20231202/picture-22.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20231202/picture-23.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20231202/picture-24.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20231202/picture-25.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20231202/picture-26.jpeg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Notes-20231202/picture-27.jpeg" alt="picture" /></p></section>]]></content>
    <pubDate>Wed, 17 Jul 2024 03:35:22 +0800</pubDate>
  </entry>
   
  <entry>
    <title><![CDATA[すべてのサイト]]></title>
    <link>https://pikapikapikaori.github.io/pikapikapi-blog/#/jp/Sites</link>
    <guid isPermaLink="false">https://pikapikapikaori.github.io/pikapikapi-blog/#/jp/Sites</guid>
    <content type="html"><![CDATA[<h1 id="すべてのサイト">すべてのサイト</h1><div class="toc-page-div"><pre><code>&lt;a class=&quot;toc-page-display-a&quot; href=&quot;https://pikapikapikaori.github.io/pikapikapi-homepage/i18n/jp.html&quot; target=&quot;_blank&quot;&gt;    &lt;div class=&quot;toc-page-display-div&quot;&gt;        &lt;div class=&quot;toc-page-display-title-img&quot;&gt;            &lt;center&gt;                &lt;img class=&quot;ignore-view-full-image-img&quot; src=&quot;./_media/Sites/pikapikapi-homepage.png&quot;&gt;            &lt;/center&gt;        &lt;/div&gt;        &lt;div class=&quot;toc-page-display-title-div&quot;&gt;            ピカピカピ        &lt;/div&gt;        &lt;div class=&quot;toc-page-display-date-div&quot;&gt;            個人サイト        &lt;/div&gt;    &lt;/div&gt;&lt;/a&gt;&lt;a class=&quot;toc-page-display-a&quot; href=&quot;https://pikapikapikaori.github.io/pikapikapi-homepage/animepage/i18n/jp.html&quot; target=&quot;_blank&quot;&gt;    &lt;div class=&quot;toc-page-display-div&quot;&gt;        &lt;div class=&quot;toc-page-display-title-img&quot;&gt;            &lt;center&gt;                &lt;img class=&quot;ignore-view-full-image-img&quot; src=&quot;./_media/Sites/pikapikapi-photopage.png&quot;&gt;            &lt;/center&gt;        &lt;/div&gt;        &lt;div class=&quot;toc-page-display-title-div&quot;&gt;            ピカピカピ        &lt;/div&gt;        &lt;div class=&quot;toc-page-display-date-div&quot;&gt;            写真サイト        &lt;/div&gt;    &lt;/div&gt;&lt;/a&gt;&lt;a class=&quot;toc-page-display-a&quot; href=&quot;https://pikapikapikaori.github.io/pikapikapi-blog/&quot; target=&quot;_blank&quot;&gt;    &lt;div class=&quot;toc-page-display-div&quot;&gt;        &lt;div class=&quot;toc-page-display-title-img&quot;&gt;            &lt;center&gt;                &lt;img class=&quot;ignore-view-full-image-img&quot; src=&quot;./_media/Sites/pikapikapi-home.png&quot;&gt;            &lt;/center&gt;        &lt;/div&gt;        &lt;div class=&quot;toc-page-display-title-div&quot;&gt;            ピカピカピ        &lt;/div&gt;        &lt;div class=&quot;toc-page-display-date-div&quot;&gt;            このサイト、メインサイト        &lt;/div&gt;    &lt;/div&gt;&lt;/a&gt;&lt;a class=&quot;toc-page-display-a&quot; href=&quot;https://pikapikapikaori.github.io/pikapikapi-blog-hexo/&quot; target=&quot;_blank&quot;&gt;    &lt;div class=&quot;toc-page-display-div&quot;&gt;        &lt;div class=&quot;toc-page-display-title-img&quot;&gt;            &lt;center&gt;                &lt;img class=&quot;ignore-view-full-image-img&quot; src=&quot;./_media/Sites/pikapikapi-hexo.png&quot;&gt;            &lt;/center&gt;        &lt;/div&gt;        &lt;div class=&quot;toc-page-display-title-div&quot;&gt;            ピカピカピ        &lt;/div&gt;        &lt;div class=&quot;toc-page-display-date-div&quot;&gt;            サブサイト、Hexo、壱        &lt;/div&gt;    &lt;/div&gt;&lt;/a&gt;</code></pre></div>]]></content>
    <pubDate>Mon, 15 Jul 2024 22:17:03 +0800</pubDate>
  </entry>
   
  <entry>
    <title><![CDATA[Sites]]></title>
    <link>https://pikapikapikaori.github.io/pikapikapi-blog/#/en-us/Sites</link>
    <guid isPermaLink="false">https://pikapikapikaori.github.io/pikapikapi-blog/#/en-us/Sites</guid>
    <content type="html"><![CDATA[<h1 id="sites">Sites</h1><div class="toc-page-div"><pre><code>&lt;a class=&quot;toc-page-display-a&quot; href=&quot;https://pikapikapikaori.github.io/pikapikapi-homepage/i18n/en-us.html&quot; target=&quot;_blank&quot;&gt;    &lt;div class=&quot;toc-page-display-div&quot;&gt;        &lt;div class=&quot;toc-page-display-title-img&quot;&gt;            &lt;center&gt;                &lt;img class=&quot;ignore-view-full-image-img&quot; src=&quot;./_media/Sites/pikapikapi-homepage.png&quot;&gt;            &lt;/center&gt;        &lt;/div&gt;        &lt;div class=&quot;toc-page-display-title-div&quot;&gt;            ピカピカピ        &lt;/div&gt;        &lt;div class=&quot;toc-page-display-date-div&quot;&gt;            Personal Homepage        &lt;/div&gt;    &lt;/div&gt;&lt;/a&gt;&lt;a class=&quot;toc-page-display-a&quot; href=&quot;https://pikapikapikaori.github.io/pikapikapi-homepage/animepage/i18n/en-us.html&quot; target=&quot;_blank&quot;&gt;    &lt;div class=&quot;toc-page-display-div&quot;&gt;        &lt;div class=&quot;toc-page-display-title-img&quot;&gt;            &lt;center&gt;                &lt;img class=&quot;ignore-view-full-image-img&quot; src=&quot;./_media/Sites/pikapikapi-photopage.png&quot;&gt;            &lt;/center&gt;        &lt;/div&gt;        &lt;div class=&quot;toc-page-display-title-div&quot;&gt;            ピカピカピ        &lt;/div&gt;        &lt;div class=&quot;toc-page-display-date-div&quot;&gt;            Photograph Homepage        &lt;/div&gt;    &lt;/div&gt;&lt;/a&gt;&lt;a class=&quot;toc-page-display-a&quot; href=&quot;https://pikapikapikaori.github.io/pikapikapi-blog/&quot; target=&quot;_blank&quot;&gt;    &lt;div class=&quot;toc-page-display-div&quot;&gt;        &lt;div class=&quot;toc-page-display-title-img&quot;&gt;            &lt;center&gt;                &lt;img class=&quot;ignore-view-full-image-img&quot; src=&quot;./_media/Sites/pikapikapi-home.png&quot;&gt;            &lt;/center&gt;        &lt;/div&gt;        &lt;div class=&quot;toc-page-display-title-div&quot;&gt;            ピカピカピ        &lt;/div&gt;        &lt;div class=&quot;toc-page-display-date-div&quot;&gt;            This Site, Main Site        &lt;/div&gt;    &lt;/div&gt;&lt;/a&gt;&lt;a class=&quot;toc-page-display-a&quot; href=&quot;https://pikapikapikaori.github.io/pikapikapi-blog-hexo/&quot; target=&quot;_blank&quot;&gt;    &lt;div class=&quot;toc-page-display-div&quot;&gt;        &lt;div class=&quot;toc-page-display-title-img&quot;&gt;            &lt;center&gt;                &lt;img class=&quot;ignore-view-full-image-img&quot; src=&quot;./_media/Sites/pikapikapi-hexo.png&quot;&gt;            &lt;/center&gt;        &lt;/div&gt;        &lt;div class=&quot;toc-page-display-title-div&quot;&gt;            ピカピカピ        &lt;/div&gt;        &lt;div class=&quot;toc-page-display-date-div&quot;&gt;            Sub-Site, Hexo, No.1        &lt;/div&gt;    &lt;/div&gt;&lt;/a&gt;</code></pre></div>]]></content>
    <pubDate>Mon, 15 Jul 2024 22:17:03 +0800</pubDate>
  </entry>
   
  <entry>
    <title><![CDATA[退学日记 壹]]></title>
    <link>https://pikapikapikaori.github.io/pikapikapi-blog/#/writings/Phila-20240526</link>
    <guid isPermaLink="false">https://pikapikapikaori.github.io/pikapikapi-blog/#/writings/Phila-20240526</guid>
    <content type="html"><![CDATA[<h1 id="退学日记-壹">退学日记 壹</h1><figure><img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/Phila-20240526/cover-picture.jpg" alt="" /><figcaption>cover</figcaption></figure><blockquote><p>本文首发于个人博客<br />发表日期：2024.05.26<br />最后编辑于：{docsify-last-updated}</p></blockquote><p>贰零贰肆，在这个时间点附近几年选择读理工科研的大抵都是或多或少非常痛苦的。自然一年半前全然没想清楚就多少出于路径依赖选择保研本校软工的我也不例外。研一开始近一年，退学的念头太多次出现，而这些天这个想法久久无法消失的同时反而愈发强烈，为了作一部分的宣泄又或是逃避，也处于一些记录的目的，终于我决定每当这个念头出现便记在这里。</p><h2 id="论哲学">论哲学</h2><p>在开始抱怨与反思之前，我想先谈谈将这个栏目命名为「哲学实践」的原因。“实践”这个词大体上不会引起什么歧义与疑问，国内对这一词的用法最主要的受卡尔·马克思的影响，以他在《关于费尔巴哈的提纲》中的一句“哲学家们只是用不同的方式解释世界，而问题在于改变世界”最为代表。后来者大多认可实践实际上不仅仅是与认识过程相分离的主体际的行为，而是在认识过程中会自然发生的，受主客体双方所影响的一种行为。更多地引起疑问的则是“哲学”一词。哲学是什么？为什么要把一系列退学日记的牢骚与“哲学”甚至于是“哲学实践”联系起来？</p><blockquote><p>Die Philosophen haben die Welt nur verschieden interpretiert; es kömmt drauf an, sie zu verändern.<br />— Karl Marx, “Thesen über Feuerbach”</p></blockquote><p>对哲学一词的语源学释义大体已经说烂了，拉丁语的“Philosophia”又或是更为源头的古希腊语的“<ruby class='minority-language-font-ruby'>φιλοσοφία</ruby>”昭示着其是爱智慧本身，似乎一切爱智慧的内容都能成为哲学的研究对象。哲学作为一门所谓科学的科学，在带上这种“元”也即“meta”意味的同时也即使得“哲学是什么”一问成为了一个暂时还无可解的哲学问题。先贤追问一切的时候把这种追问本身视作是哲学实践，到了奥古斯丁那个时代的开始将哲学用作神学的理论依据；自笛卡尔起的哲学家们似乎将哲学视作是对本初或认识进行的理性证明，而罗素与维特根斯坦开启的语言学转向则无情的将哲学杀死了。</p><blockquote><p>Wovon man nicht sprechen kann, darüber muss man schweigen.<br />— Ludwig Wittgenstein, “Tractatus logico-philosophicus”</p></blockquote><p>然而作为一门科学或者退一万步来讲一门学问，大众对其庸俗化的哲学好像吃个饭喝个水都能被作为哲学而夸夸其谈总还是有些太过了。反过来看作为一门学问似乎对哲学的普遍理解就落于“形而上学”，更确切地讲似乎是本体论与认识论，或者是如今经历了语言学转向后的那些语言问题。受到中国儒学与道家影响的中国人又往往将形而上学与“道”联系起来，然而这显然是一种语言上的误认。</p><p>先说形而上学与道。形而上学（Metaphysics），我们知道这个词的用法最早源自亚里士多德的书名《<ruby class='minority-language-font-ruby'>τὰ μετὰ τὰ φυσικά</ruby>》，拉丁文译为 Metaphysica，表明着他将这些学问视为元物理学的，又或是在物理学之后的，也是在这里形而上学得到了第一个别名，即“第一哲学”。对 Metaphysica 一词的中文翻译出自井上哲次郎，他借用《周易·易传·系辞》中一句“形而上者谓之道，形而下者谓之器”完成了一个相当的翻译难题。这里的问题就是《系辞》这句话中的“道”到底是个什么东西。《周易》中《易传》相传孔子作了其中七篇，而《系辞》则是油孔子的学生们整理完成。《系辞》开篇点出其出自占卜筮龟来阐释宇宙论思想的目的，以“一阴一阳之谓道”与“形而上者谓之道，形而下者谓之器”就足以阐明了这里的“道”到底是个什么东西。而这个“道”在后来程明道乃与朱熹等理学家那里被评注为了与气相对，与理相当的东西。“气为器而理为式”，由此便可见一斑。</p><blockquote><p>一阴一阳之谓道……是故形而上者谓之道，形而下者谓之器，化而裁之谓之变，推而行之谓之通，举而错之天下之民谓之事业……是故，易有太极，是生两仪，两仪生四象，四象生八卦，八卦定吉凶，吉凶生大业。<br />—— 《周易·系辞》</p></blockquote><p>另一方面，老子那里的“道”显然不是这个由太极生出的一阴一阳。同样看原文。这里要注意的是《道德经》作为一本春秋战国时期的阐释本体论的著作，其用字之意与通常的意思大有不同，从“字之曰道”一句便可知。也因此从开篇第一句起就有很多不同的理解方式。需要注意的是这里的断句用字未必就真的是如今这样。当然《道德经》到底何时和谁所作，甚至于是老聃和李耳是否为一人还有待考据。仅从文本上来看，《道德经》中的这个“道”似乎更像是黑格尔“绝对精神”那一类的东西，而不仅仅是那个指代事物本质的最传统儒家《系辞》中的那个“道”。至于董仲舒后各朝代思想家在儒家大旗下延续百家思想对濡的释义之不同，所导致的对“道”一词的百般理解，在这里就略去不表了。</p><blockquote><p>道可道，非常道；名可名，非常名。无名天地之始，有名万物之母。故常无欲，以观其妙；常有欲，以观其徼……有物混成，先天地生。寂兮寥兮，独立不改，周行而不殆，可以为天下母。吾不知其名，字之曰道，强为之名曰大。大曰逝，逝曰远，远曰反。故道大，天大，地大，王亦大。域中有四大，而王居其一焉。人法地，地法天，天法道，道法自然……道生一，一生二，二生三，三生万物。万物负阴而抱阳，冲气以为和。<br />—— 《道德经》</p></blockquote><p>至此便可以得到第一个结论了：Metaphysica 与道，甚至于是儒家的道和道家的道，Metaphysica 与 Philosophia 显然都全然不是一个东西。而哲学到底是什么似乎也越发的扑朔不可解。追根溯源，我推敲为何泰勒斯一句“万物由水构成”就被尊称为哲学的开端的原因。我想最重要的原因，在于他开始追问和反思了，开始质疑和批判了。出于这种考量，我于是决定将每次退学念头萦绕时所作的思考记述，都当作是我个人的“哲学实践”的一部分。我并不需要刻意地去进行某种“哲学实践”，相反我早已在“哲学实践”之中了。</p><h2 id="论意义">论意义</h2><p>于是这里第一次真正意义上的，可以开始记录我的思索了。想来退学念头初起大约是在研一上的期中左右，大量与方向无关又全然未接触过的知识带来了无尽的痛苦，考试与论文等的多重压力致使了这一念头的出现。往后这一念头重复着出现与消失，当然我一如既往的支地逃避和漠视。而终于最近再也无法忍受。</p><p>我假定我目前表面上或是暂时的，被我认识到的这份痛苦来源于读研，更确切地说，读工科尤其是计算机类研。那么我为什么会选择读研？在撇去不小心保研这种客观外在的因素之后，致使我读研的原因是什么？很显然我并不愿意读研，专业本身的性质加上读研的恐怖传说导致我大四一心想着如何找个清闲工作混混，完全没有考虑过考研甚至是保研这两个极受欢迎的选择。当保研的可能性裹挟着我去参加面试，我手足无措只能随波逐流。直接上地，很显然是父母多年来以及当时对我反复的言说行为导致了我被动地参与保研活动。可是在这份活动中真的全然没有我自身的意志吗？答案显然也是否定的。</p><p>那么我读研的这份渴望又从哪里来？报复性地，我认为这也来自于多年来父母重复的言说行为。用精神分析来进行结构性考量，长久以来甚至于要继续持续到多年以后，我始终处在子女——父母的牢固结构中，父母作为大他者对我有某种程度的欲望，而子女——父母结构自婴儿时代的延续决定了我必然地要去满足大他者的这份欲望。拉康说无意识是大他者的语言，大他者利用其来进行言说。也因而可以说我的包含着读研欲求的无意识根本上也正是父母的欲望本身，或者说份致使我或者我的意识作出读研决定的潜藏在我无意识的这部分实质上正是父母的欲望本身。当然也应当认识到父母本身也是一个具有俄狄浦斯情节的婴儿，其总是想要满足他们父母，或者说更广泛地，社会这个大他者的欲求。然而这无非是使得我追根溯源想找到的那个对象由父母转变为社会而已。</p><p>再考虑我为什么要满足父母的欲望。不从精神分析而是更直接地来看，我满足父母欲望无非出自于对财产继承权的需求。倘若无论如何我都有或没有这份继承权，我绝不会去刻意地满足父母的欲望。当然也可以把这个财产继承权去包含婴儿时代所欲求的那份食物，使得其转化为一个可进行精神分析的结构性问题，但那种分析已经作过了，因而在这里不作讨论。可是这份财产继承权的合理性真的只能用主体的意志来决定而无法获得一种客观的合理性吗？我作为父母的子女而出生，一方面是父母迎合社会大他者的决定，一方面也是他们受动物性本能驱动而作出的决定。无论是哪一种，血缘上的亲缘关系致使我这个个体多少在某种程度上被视为满足父母永生欲望的一种实现，也因此无论是财产继承权还是政治继承权，无论是出于父母一方还是子女一方来看都是合理且义务的。正是这种由亲缘关系维系的父母在子女客体上的主体性的不可撤回性导致了对权利的放弃总要被视为一种不彻底的自尽，而这份自尽总或多或少会有一部份被子女内不属于父母的那一部分所承受，而因此总是要被苛责的。如今政治继承权的丧失不应被视为一种自尽，毋宁说其是多数人对掌权者权利的一种回收，当然这在这里略去不表。很容易看出，这种或多或少的永生欲望很容易被套在精神分析的框架之下，得到更有力的证明。</p><p>这种归因法只将读研的根源归因到了一个外在的客体，但仍然没有解释给出读研念头出现的原因。我是为了找到我读研的根本原因，也因此以为思考推动者是走入了一条歧路。现在要重新考虑读研的原因，而非原因者。大体上，从两个方面可以给出解答。</p><p>其一，读研作为一种功利主义与实用主义结合的结果。无论是出于面子或是后续赚钱的考量，在这里读研都是一种工具上的需求。事实上，倒不如说在这里人本身也被物化成了赚钱或是赚面子的工具，而读研只不过是对物化的人的一种增值行为。无论拿怎样的言论去美化其动机，在这里人终于还是被物化的，人不再是人了，而这种物化是历来最被批判的。人之为人，总要拒绝让人不再为人的东西。父母和大他者对我存在着这样一种物化，而在结构中作为大他者语言的无意识的主体也即是我本身也在进行着对自己的这种物化。考虑到父母在结构中也同时作为主体，那么这种物化似乎就是由结构本身所导致的，且随着存有的出现而出现，人永远都无法逃脱这份物化。</p><p>其二，大概只能从意义入手了。读研有其意义所在，且这份意义不能与功利主义或实用主义的想法有所牵扯，不然就会回到上面那种物化人的道路上了。</p><p>对意义的追问大抵都要去问存在，或者说生活的意义。这份追问是出于这样一种朴素的想法，即存有总是比非存有好的。当然非存有比存有好并不能得到活着的人倘若如此认为便应当自尽的结论，因为由非存有到存有再到非存有已经经历过一个无可撤回的存有过程了，其与从始至终的非存有是两回事。这里姑且先顺着存有比非存有的人道主义想法思索，一如前文认为物化总是不好的一样。那么我们就应该如此发问：存在的意义是什么？</p><p>这个问题确实伴随了我多年，至少就我所能回忆的，从初中开始就已经在思索这一层意义了。人活着总要回归于无，我并不惧怕无，因为无是不可知的，但我确实地会惧怕在无之前伴随着存有的痛苦。有人说痛苦正是活着的意义，这实在是有些太反人类反理性了。</p><p>小屁孩对存在的追问最多也就只能到存在并没有意义了，就像尼采所说的，就像加缪笔下的西西弗斯。我记得初中时不知怎么的，竟然和同学的一个女孩子聊起这份虚无的话题了。我想厌恶他人的我大抵是被搭话的，但这更显奇怪了。记忆中那个女孩子是充满春天气息的，倒不如说正像是春天本身的。事实上这两年看她分享的生活也正是如此，一年四季中穿着好看的衣服，拿着佳能相机挂着甜甜的笑容和友人恋人在微风中将自己的生活捕捉成带有记忆的静像。也因此很奇怪，为什么那个春天般的下午，阳光透过老旧的蓝色窗帘，这个满是春天气息的女孩子微微侧着头和我说她也常常在考虑这些。</p><p>回到正题。如今的我比起从前的我，在追问存在这一问题上已经不同了。读了海德格尔的我知道，或者说被劝说，此在通过追问自身的存在来追问存在本身，存在也由此栖居在此在自身，此在的存在通过其存在而对其本身展开。此在是被抛地活着，也因此他不得不为了生活而操劳，而去筹划。这份在时间性中展开的可能性继承自叔本华、尼采和祁克果的生命哲学。当此在在操劳与筹划时，此在对工具的应用使得其在手边与应手两层意义上不断转化，也因此可以说此在赋予了其自身存在的意义，也由此终于给出了一个最能被接受的解答：倘若意义真的存在，那么存在的意义即在于存在本身。倘若意义不存在，那么存在的意义便被此在人为地赋予了。然而由此一来，似乎我读研这件事反而成为了违背我自身筹划的，而应当被摒弃和放弃的一件事了。</p><p>对读研根因的追问本身也值得思考。在追求读研根因，以及根因所联系着的原因者的同时，我本身是否也就像是因为恒常的能指链上缺失的空洞而试图去找到那个原因者呢？如此一来，我就仿佛塞万提斯笔下的堂吉柯德一样，每次对原因与原因者的追问与对抗只是一种纯粹的幻想。</p><p>至此留下了几个待解决的问题：</p><ol type="1"><li>何以物化对人就是不好的，是需要对抗的？</li><li>何以存有总是比非存在更好，也因而非存有需要被拒绝？</li><li>这种追问本身是否只是一种堂吉柯德式的幻想，只是对对像a的一种补偿式寻找？</li><li>我如今的痛苦真的只是由读研所引起的吗？是否其实质上是由其他因素而非读研所引起的？</li><li>我预设读研是某个根因所外化形成的表象，成为了我痛苦的表面直接原因。我试图层层剥开这份外化过程寻找根因，可是根因或者说本质或意义真的存在吗？按照德里达的说法，一切都在延异，并没有什么恒常或是暂时的在场，那么是否我痛苦只是因为我痛苦？</li><li>德里达所谓的反结构也是一种结构性解释，因为延异这一概念实质上成为了解构后的全新的结构本身，就这一层意义上来看解构似乎也逃不开结构本身。那么我到底如何知道这份痛苦，并如何得以解决这份痛苦？</li></ol>]]></content>
    <pubDate>Sun, 14 Jul 2024 20:20:18 +0800</pubDate>
  </entry>
   
  <entry>
    <title><![CDATA[Z 高达 Wave-Shooter 形态设定考]]></title>
    <link>https://pikapikapikaori.github.io/pikapikapi-blog/#/writings/ZGundam-20220417</link>
    <guid isPermaLink="false">https://pikapikapikaori.github.io/pikapikapi-blog/#/writings/ZGundam-20220417</guid>
    <content type="html"><![CDATA[<h1 id="z-高达-wave-shooter-形态设定考">Z 高达 Wave-Shooter 形态设定考</h1><figure><img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ZGundam-20220417/cover-picture.jpg" alt="" /><figcaption>Cover</figcaption></figure><blockquote><p>本文首发于个人博客<br />发表日期：2022.04.17<br />最后编辑于：{docsify-last-updated}</p></blockquote><h2 id="tv-版原设">TV 版原设</h2><p>根据《MASTER ARCHIVE MOBILESUIT MSZ-006 Z GUNDAM》中设定，自「Z」至「ZZ」也即 0087 至 0088 年间进行过多次机体的检修。</p><section class="multi-images-container-section"><p><img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ZGundam-20220417/picture-11.jpg" alt="Picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ZGundam-20220417/picture-9.jpg" alt="Picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ZGundam-20220417/picture-10.jpg" alt="Picture" /></p></section><p>不难发现在 0087 年 11 月至 0087 年 12 月间实质上所采取的装备即是 Wave-Shooter 形态的装备。此时正值奥古与卡拉巴联手袭击乞立马扎罗基地。</p><h2 id="wave-shooter-形态">Wave-Shooter 形态</h2><figure><img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ZGundam-20220417/picture-8.jpeg" alt="" /><figcaption>Picture</figcaption></figure><p>设定是 0087 年 11 月换装为了可变后退翼与对应的盾牌，也就是 FXA-01K 型装备（虽然 12 月又换回去了，值得一提的是 mr 魂 z 的后裙甲喷口比较类似于 12 月及之后的版本，但也不是完全相同），原本似乎是 90 年为了模型大河原参考 zp 设计的（不确定，未找到确切来源），后来在北川的漫画《Z Define》中泷川基于此设计了漫画版 z。</p><p>漫画版 z 事实上进行了大幅度的更改：驾驶舱与前裙甲中间变为了想当圆润的造型，而后者更是在变形后成为了 ws 形态的机头部分；胸部造型小改；盾牌分离机构使得 ws 形态下的枪被放置在机身下侧；腿部的变形方式似乎也有改变，使得腿部变形后不再像其他 z 一样比机身高出一层；可变后退翼的变化；甚至原本放置榴弹仓之处的末端增加了一处可伸缩的的机械臂（虽然我不记得漫画里用过）；另外局部配色也有修改。个人来看其实 define 版 z 的 ws 形态一体型更加好。</p><h3 id="漫画设定图">漫画设定图</h3><section class="multi-images-container-section"><p><img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ZGundam-20220417/picture-1.jpeg" alt="Picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ZGundam-20220417/picture-2.jpeg" alt="Picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ZGundam-20220417/picture-3.jpeg" alt="Picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ZGundam-20220417/picture-4.jpeg" alt="Picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ZGundam-20220417/picture-5.jpeg" alt="Picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ZGundam-20220417/picture-6.jpeg" alt="Picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ZGundam-20220417/picture-7.jpeg" alt="Picture" /></p></section><h2 id="z-原设变形结构">Z 原设变形结构</h2><figure><img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/ZGundam-20220417/picture-12.GIF" alt="" /><figcaption>Picture</figcaption></figure>]]></content>
    <pubDate>Sun, 14 Jul 2024 15:41:57 +0800</pubDate>
  </entry>
   
  <entry>
    <title><![CDATA[2020 年度印象最深刻动画]]></title>
    <link>https://pikapikapikaori.github.io/pikapikapi-blog/#/writings/YearBest-2020-20210102</link>
    <guid isPermaLink="false">https://pikapikapikaori.github.io/pikapikapi-blog/#/writings/YearBest-2020-20210102</guid>
    <content type="html"><![CDATA[<h1 id="年度印象最深刻动画">2020 年度印象最深刻动画</h1><figure><img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/YearBest-2020-20210102/cover-picture.jpg" alt="" /><figcaption>cover</figcaption></figure><blockquote><p>本文首发于微博，简单整理后重新发布在个人博客上<br />发表日期：2021.01.02<br />最后编辑于：{docsify-last-updated}</p></blockquote><p>翻了翻 bgm 20 年一共标了 213 部，给分最高的来自深渊给了这一年唯一的九星。在其后一共标了 15 部 8 星，但真正的非续作 TV 动画也只有隐瞒之事、前说，映像研和 lapis 四部。只能感叹这一年动画片确实不好看，仔细想想十佳要凑起来大概也会有些困难。</p><p>因而整理一下，抛去短片来看个人十佳大概会是这样一个顺序：</p><ul><li>来自深渊剧场版</li><li>映像研</li><li>破晓之翼（勉强算到了非短片的十佳）</li><li>钢破烂再起二期（勉强也把他算到了 20 年）</li><li>新恐龙</li><li>g复国剧场</li><li>前说</li><li>白箱剧场</li><li>lapis &amp; 虹</li><li>炮T、龙魔女、sac2045、昨日之歌的多择暂且还没有结果</li></ul><h2 id="来自深渊剧场版">来自深渊剧场版</h2><p>深渊剧场和映像研上榜可以说是很显然的。深渊亮点全在于原作和设定，但作画也确实看了个爽。</p><h2 id="映像研">映像研</h2><p>映像研来说扳回了汤浅之前给我留下的坏印象，也是得益于原作者也好动画创作者也好，这一类关于动画的动画很难不引起动画爱好者的共鸣。水崎作为动画人的几段宣言也着实看的激动万分。</p><h2 id="破晓之翼">破晓之翼</h2><p>剑盾广告片也没什么好多说的，山下和 colorido 的风格我个人还是蛮喜欢的，几段作画也确实好看，和隔壁新无印一比那简直是天上地下。</p><section class="multi-images-container-section"><p><img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/YearBest-2020-20210102/picture-1.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/YearBest-2020-20210102/picture-2.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/YearBest-2020-20210102/picture-3.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/YearBest-2020-20210102/picture-4.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/YearBest-2020-20210102/picture-5.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/YearBest-2020-20210102/picture-6.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/YearBest-2020-20210102/picture-7.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/YearBest-2020-20210102/picture-8.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/YearBest-2020-20210102/picture-9.jpg" alt="picture" /> <img src="https://pikapikapikaori.github.io/pikapikapi-blog/writings/_media/YearBest-2020-20210102/picture-10.jpg" alt="picture" /></p></section><blockquote><p>破晓之翼第 2 话分镜<br />图源（按序）：<a href="https://animation-works.tumblr.com/post/628343286869934080/ポケモン薄明の翼２話コンテ">新井陽次郎 animation-works</a></p></blockquote><h2 id="钢破烂再起二期">钢破烂再起二期</h2><p>钢破烂则是意料之外的好看，虽然比不上最开始的破烂，但也算是挽回了这一系列之前的坏名声。虽然是富田但意外的很有高达味。钢之魂再起！！</p><h2 id="新恐龙">新恐龙</h2><p>新恐龙也是不消多说的强。除了丑的不能看的 3DCG 恐龙以外动的都还是蛮好看的，小岛和押山确实看的很爽。川村也让这一部难得的有了些不同于一贯哆啦剧场的味道。可惜明年脚本变成了佐藤大。我还记得 listeners 看完以后我留言我和 jin 总有一个是弱智，不过仔细想想 e7 后的佐藤也确实不行。</p><h2 id="g复国剧场">g复国剧场</h2><p>g复国可以说是相当私心了。你富野的高达本来就不适合这个年代，可是好看还是好看。</p><h2 id="前说">前说</h2><p>前说则是真实。在文化障壁之下漫才本来就难以被中国观众理解，而作为讲漫才的搞笑动画来讲一来他不搞笑二来他里面的段子也没多搞笑。画面也很穷各种地方看上去都是相当的平淡和贫穷。人设不好看修的也不好看动起来也不好看，但这种种缺点叠加到一起反而体现出了主角作为新晋不入流漫才艺人努力漫才的醍醐味，就这一层意义上来讲我还是很喜欢的。</p><h2 id="白箱剧场">白箱剧场</h2><p>白箱剧场说实话不好看。用一部剧场的篇幅把 TV 的故事重讲了一遍，多少有点无聊。不过当初白箱带给我的东西，哪怕只是一点点，多少也找回了一些。真实的落泪了。作画上看点也不多，不过结尾的中村第一遍没看出来，看到消息的时候还蛮惊讶的。</p><h2 id="lapis-虹">lapis &amp; 虹</h2><p>lapis 和虹，可以说是今年最佳的两部偶像片。前者相当的淳朴，相当相当的淳朴。缺点一堆但确实看得很开心。后者而言则是最好的拉拉，也是最不拉的拉拉。偶像魂堂堂燃烧。最草的是最后一集的台场独角兽，很难不想到 UC 最后一部虹的彼端。</p><h2 id="炮t龙魔女sac2045昨日之歌">炮T、龙魔女、sac2045、昨日之歌</h2><p>多择除了攻壳以外主要就是画的挺好看，攻壳主要就是神山。可惜变成了全 3DCG，要是 IG 再像之前那样画出来就好了。</p><p>其他来看短片来讲松本的 gotcha、山本的约定、怪物弹珠的广告片和樱花大战的广告片作画都看的挺爽的，然后木上的巴加则是看的百味杂陈。很难得还能在一个短片里同时看到山贺和贞本，不过你宅社的这短片真的莫名其妙。</p><p>总的来讲就是动画片真的不好看，然后就是希望今年好看点，不过八成没啥希望。</p>]]></content>
    <pubDate>Sun, 14 Jul 2024 15:41:57 +0800</pubDate>
  </entry>
  
</channel>
</rss>
